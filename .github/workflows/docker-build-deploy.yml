name: Build & Deploy finance-transactions with DB Backup + Provenance + Restart + Preserve

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성 및 확인
        run: |
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "faker" >> requirements.txt
          pip install -r requirements.txt
          test -f requirements.txt && echo "[✔] requirements.txt 생성 완료" || (echo "[❌] requirements.txt 생성 실패" && exit 1)

      - name: ⚙️ .env 파일 생성 및 확인
        run: |
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          test -f .env && echo "[✔] .env 생성 완료" || (echo "[❌] .env 생성 실패" && exit 1)

      - name: 🐍 거래 원장 및 거래 발생 시뮬레이션 코드 생성
        run: |
          mkdir -p backup
          echo "import csv, random, datetime, time" > ledger.py
          echo "from faker import Faker" >> ledger.py
          echo "fake = Faker()" >> ledger.py
          echo "accounts = [[fake.name(), fake.bban(), round(random.uniform(1000,100000),2)] for _ in range(10)]" >> ledger.py
          echo "with open('backup/accounts.csv', 'w', newline='') as f:" >> ledger.py
          echo "    writer = csv.writer(f)" >> ledger.py
          echo "    writer.writerow(['name','account','balance'])" >> ledger.py
          echo "    writer.writerows(accounts)" >> ledger.py
          echo "with open('backup/transactions.csv', 'w', newline='') as f_all, open('backup/retries.csv', 'w', newline='') as f_retry:" >> ledger.py
          echo "    writer_all = csv.writer(f_all)" >> ledger.py
          echo "    writer_all.writerow(['timestamp','amount','currency','status'])" >> ledger.py
          echo "    writer_retry = csv.writer(f_retry)" >> ledger.py
          echo "    writer_retry.writerow(['timestamp','amount','currency'])" >> ledger.py
          echo "    for _ in range(20):" >> ledger.py
          echo "        ts = datetime.datetime.now().isoformat()" >> ledger.py
          echo "        amt = round(random.uniform(1.0, 5000.0), 2)" >> ledger.py
          echo "        currency = random.choice(['USD','KRW','JPY'])" >> ledger.py
          echo "        status = random.choice(['completed','pending','failed'])" >> ledger.py
          echo "        writer_all.writerow([ts, amt, currency, status])" >> ledger.py
          echo "        if status != 'completed':" >> ledger.py
          echo "            writer_retry.writerow([ts, amt, currency])" >> ledger.py
          echo "        print(f'💸 거래 발생: {amt} {currency} / 상태: {status}')" >> ledger.py
          echo "        time.sleep(0.1)" >> ledger.py
          echo "with open('backup/retries.csv', newline='') as src, open('backup/transactions.csv', 'a', newline='') as dst:" >> ledger.py
          echo "    reader = csv.DictReader(src)" >> ledger.py
          echo "    writer = csv.writer(dst)" >> ledger.py
          echo "    for row in reader:" >> ledger.py
          echo "        ts = datetime.datetime.now().isoformat()" >> ledger.py
          echo "        writer.writerow([ts, row['amount'], row['currency'], 'completed'])" >> ledger.py
          echo "        print(f'✅ 재처리 완료: {row['amount']} {row['currency']}')" >> ledger.py
          python3 ledger.py

      - name: 📜 거래 원장 파일 상태 체크 및 배지 출력
        run: |
          for file in backup/accounts.csv backup/transactions.csv; do
            if [ -f "$file" ]; then echo "✔️ $file 생성됨"; else echo "❌ $file 누락됨" && exit 1; fi
          done

      - name: 🔐 Provenance 생성 (CSV 해시)
        run: |
          mkdir -p provenance
          TS=$(date +%Y%m%d%H%M%S)
          OUT="provenance/csv-metadata-$TS.json"
          echo "[" > "$OUT"
          for f in backup/*.csv; do
            HASH=$(sha256sum "$f" | awk '{print $1}')
            echo "  {\"file\": \"$f\", \"sha256\": \"$HASH\" }," >> "$OUT"
          done
          sed -i '$ s/},/}/' "$OUT"
          echo "]" >> "$OUT"

      - name: ⬇️ 증명서 다운로드용 업로드
        uses: actions/upload-artifact@v4
        with:
          name: csv-provenance
          path: provenance/*.json

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15
          sleep 10

      - name: 🗃️ CSV → PostgreSQL 적재
        run: |
          tail -n +2 backup/transactions.csv > backup/tmp.csv
          docker exec db psql -U postgres -d finance -c "CREATE TABLE IF NOT EXISTS transactions (timestamp TIMESTAMP, amount NUMERIC, currency VARCHAR(10), status VARCHAR(20));"
          docker cp backup/tmp.csv db:/tmp/tmp.csv
          docker exec db psql -U postgres -d finance -c "COPY transactions(timestamp, amount, currency, status) FROM '/tmp/tmp.csv' DELIMITER ',' CSV;"

      - name: 💾 DB 백업
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          docker exec db pg_dump -U postgres -d finance > backup/backup-$TS.sql
          echo "$TS" > backup/latest.txt

      - name: 🧾 Backup Provenance 생성
        run: |
          mkdir -p provenance
          TS=$(cat backup/latest.txt)
          BACKUP_FILE="backup/backup-$TS.sql"
          HASH=$(sha256sum "$BACKUP_FILE" | awk '{print $1}')
          echo "{\"artifact\": \"$BACKUP_FILE\", \"sha256\": \"$HASH\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > provenance/provenance-$TS.json

      - name: ⬇️ DB Backup 증명서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: db-provenance
          path: provenance/provenance-*.json

      - name: ♻️ 컨테이너 재시작 처리
        run: |
          if ! docker ps | grep -q db; then
            docker start db || docker run -d --name db \
              -e POSTGRES_DB=finance \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -p 5432:5432 postgres:15
          fi

      - name: 🧹 컨테이너 정리
        if: always()
        run: |
          docker stop db || true
          docker rm db || true
