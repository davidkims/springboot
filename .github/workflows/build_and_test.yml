# 파일명: .github/workflows/build_and_test.yml
# 설명: 이 워크플로우는 코드가 main 또는 develop 브랜치에 푸시되거나,
#        해당 브랜치로 풀 리퀘스트가 생성될 때마다 Swift 프로젝트를 빌드하고 테스트합니다.

name: Swift CLI Build and Test

on:
  push:
    branches:
      - main
      - develop # 주 개발 브랜치 추가 (예: develop)
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest # macOS 환경에서 테스트하려면 'macos-latest'로 변경 가능 (성능/비용 고려)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 리포지토리 코드를 워크플로우 런너로 가져옵니다.

    - name: Install Swift Toolchain
      # swift-actions/setup-swift@v2 액션은 'latest' 대신 특정 버전 번호를 요구합니다.
      # 현재 안정적인 최신 Swift 버전 (예: 5.10)을 사용합니다.
      # gpg 오류가 계속 발생한다면, 이 스텝 대신 수동 설치 스크립트를 고려해야 합니다.
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '5.10' # <--- 이 부분을 안정적인 특정 Swift 버전으로 변경해주세요.
                              # 예: '5.10', '5.9', '6.0' (베타/릴리즈 시)

    - name: Build Debug Configuration
      # Package.swift 파일이 리포지토리의 루트 디렉토리에 있다고 가정합니다.
      # 만약 Package.swift가 하위 디렉토리 (예: `my-app/Package.swift`)에 있다면,
      # `run: cd my-app && swift build` 와 같이 `cd` 명령을 추가해야 합니다.
      run: swift build

    - name: Run Tests
      # Package.swift 파일이 리포지토리의 루트 디렉토리에 있다고 가정합니다.
      run: swift test

    # Optional: Release 모드로도 빌드하여 컴파일 오류가 없는지 확인합니다.
    - name: Build Release Configuration
      # Package.swift 파일이 리포지토리의 루트 디렉토리에 있다고 가정합니다.
      run: swift build -c release
