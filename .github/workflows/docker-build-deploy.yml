name: Build & Deploy finance-transactions

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout 코드
        uses: actions/checkout@v4

      - name: 📄 requirements.txt 생성
        run: |
          echo "[✔️] requirements.txt 생성"
          echo "flask" > requirements.txt
          echo "python-dotenv" >> requirements.txt
          cat requirements.txt

      - name: ⚙️ .env 생성
        run: |
          echo "[✔️] .env 생성"
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          cat .env

      - name: 📄 app.py echo 생성 (GET/POST API)
        run: |
          echo "[✔️] app.py 생성 시작"
          echo "from flask import Flask, request, jsonify" > app.py
          echo "from dotenv import load_dotenv" >> app.py
          echo "import os" >> app.py
          echo "" >> app.py
          echo "load_dotenv()" >> app.py
          echo "app = Flask(__name__)" >> app.py
          echo "" >> app.py
          echo "@app.route('/', methods=['GET'])" >> app.py
          echo "def index():" >> app.py
          echo "    return jsonify({" >> app.py
          echo "        'status': 'success'," >> app.py
          echo "        'message': f'{os.getenv(\"APP_NAME\")} is running!'," >> app.py
          echo "        'env': os.getenv('FLASK_ENV')" >> app.py
          echo "    })" >> app.py
          echo "" >> app.py
          echo "@app.route('/transaction', methods=['POST'])" >> app.py
          echo "def transaction():" >> app.py
          echo "    try:" >> app.py
          echo "        data = request.get_json(force=True)" >> app.py
          echo "        return jsonify({" >> app.py
          echo "            'status': 'success'," >> app.py
          echo "            'message': 'Transaction received'," >> app.py
          echo "            'data': data" >> app.py
          echo "        }), 200" >> app.py
          echo "    except Exception as e:" >> app.py
          echo "        return jsonify({" >> app.py
          echo "            'status': 'error'," >> app.py
          echo "            'message': str(e)" >> app.py
          echo "        }), 400" >> app.py
          echo "" >> app.py
          echo "if __name__ == '__main__':" >> app.py
          echo "    app.run(host='0.0.0.0', port=5000)" >> app.py
          echo "[✔️] app.py 생성 완료"
          cat app.py

      - name: 📄 Dockerfile 생성
        run: |
          echo "[✔️] Dockerfile 생성 시작"
          echo "FROM python:3.11-slim" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
          echo "EXPOSE 5000" >> Dockerfile
          echo "CMD [\"python\", \"app.py\"]" >> Dockerfile
          echo "[✔️] Dockerfile 생성 완료"
          cat Dockerfile

      - name: 🐳 Docker 설치
        run: |
          echo "[✔️] Docker 설치 시작"
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version

      - name: 🏗️ Docker 이미지 빌드
        run: |
          echo "[🚧] Docker 이미지 빌드 시작"
          docker build -t finance-transactions:latest .
          echo "[✔️] Docker 이미지 빌드 완료"

      - name: 🚀 컨테이너 실행
        run: |
          echo "[🧹] 이전 컨테이너 정리 중"
          docker rm -f finance-transactions || echo "⚠️ 이전 컨테이너 없음"
          echo "[🚀] 새 컨테이너 실행 중"
          docker run -d \
            -p 8080:5000 \
            --name finance-transactions \
            -v finance-data:/data \
            finance-transactions:latest
          echo "[✔️] 컨테이너 실행 완료"

      - name: 🧹 정리 작업 (Always)
        if: always()
        run: |
          echo "[🧼] 컨테이너 정리 중"
          docker rm -f finance-transactions || true
          docker volume prune -f || true
