name: Build & Deploy finance-transactions with DB Backup + Provenance + Restart + Preserve

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🗓 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성 및 확인
        run: |
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          test -f requirements.txt && echo "[\u2714] requirements.txt 존재 확인" || (echo "[❌] requirements.txt 누른!" && exit 1)

      - name: ⚙️ .env 파일 생성 및 확인
        run: |
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          test -f .env && echo "[\u2714] .env 존재 확인" || (echo "[❌] .env 누른!" && exit 1)

      - name: 🦖 app.py 생성 및 확인
        run: |
          echo "from flask import Flask, request, jsonify" > app.py
          echo "from flask_sqlalchemy import SQLAlchemy" >> app.py
          echo "from dotenv import load_dotenv" >> app.py
          echo "import os" >> app.py
          echo "load_dotenv()" >> app.py
          echo "app = Flask(__name__)" >> app.py
          echo "DB_URI = f\"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('POSTGRES_DB')}\"" >> app.py
          echo "app.config['SQLALCHEMY_DATABASE_URI'] = DB_URI" >> app.py
          echo "db = SQLAlchemy(app)" >> app.py
          echo "class Transaction(db.Model):" >> app.py
          echo "    id = db.Column(db.Integer, primary_key=True)" >> app.py
          echo "    amount = db.Column(db.Float)" >> app.py
          echo "    currency = db.Column(db.String(10))" >> app.py
          echo "    status = db.Column(db.String(20))" >> app.py
          echo "@app.before_first_request" >> app.py
          echo "def create_tables():" >> app.py
          echo "    db.create_all()" >> app.py
          echo "@app.route('/', methods=['GET'])" >> app.py
          echo "def index():" >> app.py
          echo "    return jsonify({'status': 'success', 'message': f\"{os.getenv('APP_NAME')} is running!\"})" >> app.py
          echo "@app.route('/transaction', methods=['POST'])" >> app.py
          echo "def transaction():" >> app.py
          echo "    try:" >> app.py
          echo "        data = request.get_json(force=True)" >> app.py
          echo "        tx = Transaction(**data)" >> app.py
          echo "        db.session.add(tx)" >> app.py
          echo "        db.session.commit()" >> app.py
          echo "        return jsonify({'status': 'success', 'message': 'Saved', 'data': data})" >> app.py
          echo "    except Exception as e:" >> app.py
          echo "        return jsonify({'status': 'error', 'message': str(e)}), 400" >> app.py
          echo "if __name__ == '__main__':" >> app.py
          echo "    app.run(host='0.0.0.0', port=5000)" >> app.py
          test -f app.py && echo "[\u2714] app.py 존재 확인" || (echo "[❌] app.py 누른!" && exit 1)

      - name: 🐳 Dockerfile 생성 및 확인
        run: |
          echo "FROM python:3.11-slim" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
          echo "EXPOSE 5000" >> Dockerfile
          echo "CMD [\"python\", \"app.py\"]" >> Dockerfile
          test -f Dockerfile && echo "[\u2714] Dockerfile 존재 확인" || (echo "[❌] Dockerfile 누른!" && exit 1)

      - name: 🛠️ Docker 설치
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version

      - name: 🐐 PostgreSQL 커테이너 실행
        run: |
          mkdir -p backup
          docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15
          sleep 20

      - name: 📄 거래 시뮬리언 데이터 생성
        run: |
          mkdir -p backup
          echo "import csv, random, datetime" > ledger.py
          echo "with open('backup/transactions.csv', 'w', newline='') as f:" >> ledger.py
          echo "    writer = csv.writer(f)" >> ledger.py
          echo "    writer.writerow(['timestamp', 'amount', 'currency', 'status'])" >> ledger.py
          echo "    for _ in range(60):" >> ledger.py
          echo "        ts = datetime.datetime.now().isoformat()" >> ledger.py
          echo "        amt = round(random.uniform(10.0, 1000.0), 2)" >> ledger.py
          echo "        currency = random.choice(['USD', 'KRW', 'JPY'])" >> ledger.py
          echo "        status = random.choice(['completed', 'pending', 'failed'])" >> ledger.py
          echo "        writer.writerow([ts, amt, currency, status])" >> ledger.py
          python3 ledger.py

      - name: 🛃️ 거래 CSV → PostgreSQL 적재
        run: |
          tail -n +2 backup/transactions.csv > backup/tmp.csv
          docker exec db psql -U postgres -d finance -c "CREATE TABLE IF NOT EXISTS transactions (timestamp TIMESTAMP, amount NUMERIC, currency VARCHAR(10), status VARCHAR(20));"
          docker cp backup/tmp.csv db:/tmp/tmp.csv
          docker exec db psql -U postgres -d finance -c "COPY transactions(timestamp, amount, currency, status) FROM '/tmp/tmp.csv' DELIMITER ',' CSV;"

      - name: 📀 DB 백업 수행
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          docker exec db pg_dump -U postgres -d finance > backup/backup-$TIMESTAMP.sql
          echo "$TIMESTAMP" > backup/latest.txt

      - name: 📜 Provenance 증명서 생성
        run: |
          mkdir -p provenance
          TIMESTAMP=$(cat backup/latest.txt)
          BACKUP_FILE="backup/backup-$TIMESTAMP.sql"
          HASH=$(sha256sum "$BACKUP_FILE" | awk '{print $1}')
          PROV_FILE="provenance/provenance-$TIMESTAMP.json"
          echo "{" > "$PROV_FILE"
          echo "  \"artifact\": \"$(basename $BACKUP_FILE)\"," >> "$PROV_FILE"
          echo "  \"generated_on\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> "$PROV_FILE"
          echo "  \"db\": \"finance\"," >> "$PROV_FILE"
          echo "  \"sha256\": \"$HASH\"" >> "$PROV_FILE"
          echo "}" >> "$PROV_FILE"
          echo "[✔] 증명서 생성 완료: $PROV_FILE"
          cat "$PROV_FILE"

      - name: ⬇️ Provenance 증명서 다운로드용 업로드
        uses: actions/upload-artifact@v4
        with:
          name: provenance-certificate
          path: provenance/*.json

      - name: ♻️ 커테이너 재기동 처리
        run: |
          echo "[🔁] PostgreSQL 커테이너 검사"
          if ! docker ps | grep -q 'db'; then
            echo "[⚠️] db 커테이너 건지지 않음. 재개 시도..."
            docker start db || docker run -d --name db \
              -e POSTGRES_DB=finance \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -p 5432:5432 postgres:15
          fi

          echo "[🔁] Flask 애플 커테이너 검사"
          if ! docker ps | grep -q 'finance-transactions'; then
            echo "[⚠️] finance-transactions 커테이너 건지지 않음. 리브더후 재시도..."
            docker build -t finance-transactions .
            docker run -d --name finance-transactions -p 5000:5000 finance-transactions
          fi

      - name: 📃 커테이너 정보 기본 .github에 보존
        run: |
          mkdir -p .github/container-info
          docker ps -a > .github/container-info/containers.txt
          docker images > .github/container-info/images.txt
          docker inspect db > .github/container-info/db-inspect.json || echo "[⚠️] db 커테이너 없음"
          docker inspect finance-transactions > .github/container-info/finance-inspect.json || echo "[⚠️] finance-transactions 커테이너 없음"
          ls -lh .github/container-info/

      - name: 📦 커테이너 정보 다운로드용 업로드
        uses: actions/upload-artifact@v4
        with:
          name: container-info
          path: .github/container-info

      - name: 🛉 커테이너 정리
        if: always()
        run: |
          docker stop finance-transactions || true
          docker stop db || true
          docker rm finance-transactions || true
          docker rm db || true
