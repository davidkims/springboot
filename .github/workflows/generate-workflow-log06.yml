name: ♾️ Transfer Log Backup & Load - Download Scripts via curl

on:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  transfer_log_and_load:
    runs-on: ubuntu-latest

    env:
      TRANSFER_LOG_DIR: /opt/logs/transfer
      BACKUP_DIR:        /opt/backup/transfer
      MYSQL_ROOT_PASS:   root
      MYSQL_DB:          transactions
      REPO_RAW_BASE:     https://raw.githubusercontent.com/${{ github.repository }}/main
      LOCAL_BRANCH:      main

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔄 Sync remote branch
        run: |
          echo "🔄 시작: 원격 브랜치 업데이트"
          git fetch origin $LOCAL_BRANCH
          echo "최종 동기화를 위해 원격 브랜치 '$LOCAL_BRANCH'를 풀합니다."
          git pull --ff-only origin $LOCAL_BRANCH || {
            echo "❌ 오류: 'git pull --ff-only'에 실패했습니다. 워크플로우를 중단합니다.";
            exit 1;
          }
          echo "✅ 원격 브랜치 동기화 완료"

      - name: 📁 Prepare directories
        run: |
          echo "📁 시작: 디렉토리 준비"
          sudo mkdir -p "$TRANSFER_LOG_DIR" "$BACKUP_DIR"
          sudo chmod -R 777 "$TRANSFER_LOG_DIR" "$BACKUP_DIR"
          echo "✅ 디렉토리 준비 완료"

      - name: 💾 Generate 60 corporate transfer logs
        run: |
          echo "🕒 시작: 60건 거래 로그 생성"
          sudo rm -f "$TRANSFER_LOG_DIR"/*.txt
          for i in $(seq 1 60); do
            echo "📄 Generating log #$i"
            TS=$(date +'%Y-%m-%d %H:%M:%S')
            AMT=$((RANDOM % 900000 + 100000))
            LOG="[TRANSFER] $TS | ID:$i | 금액:₩${AMT} | 계좌:110-123-4567$(printf '%02d' $i)"
            echo "$LOG" | sudo tee "$TRANSFER_LOG_DIR/transfer-$i.txt" >/dev/null
          done
          echo "✅ 60건 거래 로그 생성 완료"

      - name: 📦 Backup logs into timestamped folder
        id: backup
        run: |
          echo "📦 시작: 백업 생성"
          TSF=$(date +'%Y%m%d_%H%M%S')
          echo "ts_folder=$TSF" >> "$GITHUB_OUTPUT"
          DEST="$BACKUP_DIR/$TSF"
          sudo mkdir -p "$DEST"
          sudo cp "$TRANSFER_LOG_DIR"/*.txt "$DEST/"
          echo "✅ 백업 완료: $DEST"

      - name: 📤 Upload logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: transfer-logs-${{ steps.backup.outputs.ts_folder }}
          path: $TRANSFER_LOG_DIR/*.txt

      - name: 🗄 Copy backup into .github/files
        run: |
          echo "🗄 시작: .github/files 경로에 백업 복사"
          mkdir -p ".github/files/${{ steps.backup.outputs.ts_folder }}"
          cp "$BACKUP_DIR/${{ steps.backup.outputs.ts_folder }}"/*.txt ".github/files/${{ steps.backup.outputs.ts_folder }}/"
          echo "✅ .github/files/${{ steps.backup.outputs.ts_folder }}에 복사 완료"

      - name: 🛠 Download Dockerfile and helper scripts
        run: |
          echo "🛠 시작: Dockerfile 및 스크립트 다운로드"
          mkdir -p .github/scripts
          curl -fsSL "$REPO_RAW_BASE/.github/Dockerfile" -o .github/Dockerfile && echo "✅ .github/Dockerfile 다운로드 완료"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/build_txn_processor.sh" -o .github/scripts/build_txn_processor.sh && chmod +x .github/scripts/build_txn_processor.sh && echo "✅ build_txn_processor.sh 다운로드 완료"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/init_mysql.sh" -o .github/scripts/init_mysql.sh && chmod +x .github/scripts/init_mysql.sh && echo "✅ init_mysql.sh 다운로드 완료"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/load_transactions.sh" -o .github/scripts/load_transactions.sh && chmod +x .github/scripts/load_transactions.sh && echo "✅ load_transactions.sh 다운로드 완료"

      - name: 🛠 Run build_txn_processor.sh
        run: |
          echo "🛠 시작: txn-processor 이미지 빌드 스크립트 실행"
          .github/scripts/build_txn_processor.sh

      - name: 🛠 Run init_mysql.sh
        run: |
          echo "🛠 시작: MySQL 초기화 스크립트 실행"
          .github/scripts/init_mysql.sh

      - name: 🛠 Run load_transactions.sh
        run: |
          echo "🛠 시작: 거래 적재 스크립트 실행"
          .github/scripts/load_transactions.sh

      - name: 📤 Upload backup folder artifact
        uses: actions/upload-artifact@v4
        with:
          name: transfer-backup-${{ steps.backup.outputs.ts_folder }}
          path: $BACKUP_DIR/${{ steps.backup.outputs.ts_folder }}

      - name: 📂 Show final backup state
        run: |
          echo "📂 최종 백업 디렉토리 트리"
          ls -R "$BACKUP_DIR" | tail -n 20"}]}
