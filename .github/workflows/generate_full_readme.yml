name: Update README.md Every Hour # 워크플로우 이름

on:
  # 매 시간마다 워크플로우를 실행하도록 스케줄 설정
  # '0 * * * *' 는 매 시간 0분(정각)에 실행됨을 의미합니다.
  # UTC 기준이므로, 한국 시간(KST)으로 오전 10시에 실행하고 싶다면,
  # UTC는 9시간 빠르므로 '0 1 * * *' (새벽 1시 UTC)로 설정해야 합니다.
  schedule:
    - cron: '0 * * * *' # 매 시간 정각에 실행 (UTC 기준)

  # 수동으로 워크플로우를 실행할 수 있도록 허용 (테스트 및 즉시 업데이트용)
  workflow_dispatch:

permissions:
  contents: write # README.md 파일을 수정하고 푸시해야 하므로 'write' 권한이 필요합니다.

jobs:
  update_readme:
    runs-on: ubuntu-latest # 최신 Ubuntu 러너 사용

    steps:
      - name: ">> 스텝 시작: 리포지토리 체크아웃"
        run: echo "--- 리포지토리 체크아웃 스텝 시작 ---"
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v4 # 최신 버전 사용
        with:
          fetch-depth: 0 # Git 히스토리를 모두 가져와야 커밋 기록에 문제가 없습니다.
      - name: "<< 스텝 완료: 리포지토리 체크아웃"
        run: echo "--- 리포지토리 체크아웃 스텝 완료 ---"

      - name: ">> 스텝 시작: README.md 업데이트 스크립트 실행"
        run: echo "--- README.md 업데이트 스크립트 스텝 시작 ---"
      - name: README.md 업데이트 스크립트 실행
        run: |
          echo "현재 날짜 및 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "README.md 파일 업데이트를 시작합니다."

          # --- 여기에 README.md를 업데이트하는 실제 명령어를 작성하세요 ---
          # 예시 1: 간단히 현재 시간을 README.md에 추가
          # echo "### Last Updated: $(date '+%Y-%m-%d %H:%M:%S KST')" >> README.md

          # 예시 2: 특정 섹션만 업데이트 (이전 내용을 덮어쓰거나 수정)
          # 아래는 마크다운 헤더 아래에 내용을 삽입하는 예시입니다.
          # 이 스크립트는 실제 내용을 동적으로 생성하여 README.md를 업데이트합니다.
          # 더 복잡한 내용이 필요하면 별도의 쉘 스크립트 파일을 만들고 호출하는 것이 좋습니다.

          # 기존 README.md 내용을 읽어와서 특정 섹션을 교체하거나 추가하는 복잡한 로직이 필요할 수 있습니다.
          # 여기서는 간단히 README.md에 새로운 섹션을 추가하는 예시입니다.

          # 스코어카드 결과 링크 또는 배지 업데이트 예시:
          # (이전 Scorecard 워크플로우에서 publish_results: true 설정 시 유효)
          # project_url="https://github.com/${{ github.repository }}"
          # echo "## OSSF Scorecard 결과" >> README.md
          # echo "[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/${project_url}/badge)](https://securityscorecards.dev/viewer/?uri=${project_url})" >> README.md
          # echo "" >> README.md # 빈 줄 추가

          # 실제 프로젝트의 동적 정보를 여기에 추가 (예: 최신 릴리즈 버전, 빌드 상태 등)
          # 예: 최신 태그 가져오기
          # LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "No tags yet")
          # echo "## 최신 릴리즈 버전" >> README.md
          # echo "현재 버전: ${LATEST_TAG}" >> README.md

          # 🚨 중요한 점: 매번 실행될 때마다 기존 내용을 어떻게 처리할지 결정해야 합니다.
          # 덮어쓰기: echo "새 내용" > README.md
          # 추가: echo "추가 내용" >> README.md
          # 특정 부분만 수정: sed, awk 등 사용 (매우 복잡)
          # 가장 좋은 방법은 전체 README.md 템플릿을 새로 생성하고 동적 데이터를 채우는 것입니다.

          # ---
          # 예시 3: README.md 파일을 완전히 새로 생성하거나 특정 내용을 대체
          # 이 예시는 `sed`를 사용하여 ''와
          # '' 주석 사이에 동적 내용을 삽입합니다.
          # README.md 파일에 아래 주석을 추가해두어야 합니다.
          # ```markdown
          # # 기존 내용은 여기에 있을 수 있습니다.
          # # ```
          # 먼저, 업데이트할 내용을 변수에 저장합니다.
          UPDATED_CONTENT="## 이 리포지토리의 최신 상태\n\n"
          UPDATED_CONTENT+="* 마지막 업데이트: $(date '+%Y-%m-%d %H:%M:%S KST')\n"
          UPDATED_CONTENT+="* GitHub Actions 빌드 상태: ![build status](https://github.com/${{ github.repository }}/workflows/Build/badge.svg)\n"
          UPDATED_CONTENT+="* 브랜치: ${{ github.ref_name }}\n"
          # 여기에 더 많은 동적 정보를 추가할 수 있습니다. (예: API 호출, 다른 파일 내용 읽기)

          # `sed`를 사용하여 특정 섹션을 동적으로 업데이트합니다.
          # macOS에서는 `sed -i ''`로 사용해야 할 수 있습니다.
          # `head -n -1`과 `tail -n +2`를 사용하여 시작/끝 주석을 유지하면서 내용을 삽입
          # 백업 파일(.bak) 생성 방지를 위해 -i 옵션 뒤에 빈 문자열('')을 사용
          # if sed --version >/dev/null 2>&1; then # GNU sed
          #   sed -i "//,//{//!d;}" README.md
          #   sed -i "//a\\${UPDATED_CONTENT}" README.md
          # else # BSD sed (macOS)
          #   sed -i '' "//,//{//!d;}" README.md
          #   sed -i '' "//a\\${UPDATED_CONTENT}" README.md
          # fi
          # 🚨 위의 sed 스크립트는 복잡하며, 실제 작동 환경에 따라 미세 조정이 필요할 수 있습니다.
          # 간단히 특정 마크다운 파일에서 동적 섹션을 생성하여 README.md에 복사하는 것이 더 쉬울 수 있습니다.

          # 가장 간단한 접근 방식:
          # - 새롭게 생성할 README.md 내용을 임시 파일에 작성
          # - 기존 README.md를 완전히 덮어쓰기
          # 예를 들어, dynamic_readme_content.md 라는 파일에 동적으로 생성할 내용을 작성한다고 가정
          # echo "# 프로젝트 개요" > dynamic_readme_content.md
          # echo "이것은 ${GITHUB_REPOSITORY} 프로젝트의 자동 업데이트된 README 파일입니다." >> dynamic_readme_content.md
          # echo "## 최신 정보" >> dynamic_readme_content.md
          # echo "- 업데이트 시간: $(date '+%Y-%m-%d %H:%M:%S KST')" >> dynamic_readme_content.md
          # echo "- GitHub Actions 워크플로우 상태: ![workflow status](https://github.com/${{ github.repository }}/workflows/Update%20README.md%20Every%20Hour/badge.svg)" >> dynamic_readme_content.md
          # # 기타 동적 내용 추가
          # mv dynamic_readme_content.md README.md # 기존 README.md를 덮어쓰기

          # 🚨 중요한 점: README.md를 업데이트하는 가장 좋은 방법은 프로젝트의 복잡성에 따라 다릅니다.
          # 간단한 정보 추가라면 `echo "..." >> README.md`
          # 특정 섹션 업데이트라면 Python 스크립트나 Node.js 스크립트 등을 작성하여 사용
          # 가장 안전한 방법은 아래 예시처럼 변경사항이 있는지 확인하고 푸시하는 것입니다.

          echo "README.md 파일 업데이트가 완료되었습니다. 변경사항을 확인합니다."
      - name: "<< 스텝 완료: README.md 업데이트 스크립트 실행"
        run: echo "--- README.md 업데이트 스크립트 스텝 완료 ---"

      - name: ">> 스텝 시작: 변경사항 감지 및 커밋/푸시"
        run: echo "--- 변경사항 감지 및 커밋/푸시 스텝 시작 ---"
      - name: 변경사항 감지 및 커밋/푸시
        run: |
          echo "Git 설정을 시작합니다."
          git config user.name "github-actions[bot]" # 커밋 사용자 이름 설정
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" # 커밋 사용자 이메일 설정

          # 변경된 파일이 있는지 확인
          if git diff --exit-code --quiet README.md; then
            echo "README.md 파일에 변경사항이 없습니다. 커밋 및 푸시를 건너뜜."
          else
            echo "README.md 파일에 변경사항이 감지되었습니다. 커밋하고 푸시합니다."
            git add README.md # README.md 파일 추가
            git commit -m "Docs: Update README.md with latest info [skip ci]" # 커밋 메시지 (CI 건너뛰기 옵션 포함)
            git push # 변경사항 푸시
            echo "README.md 업데이트 및 푸시 완료."
          fi
      - name: "<< 스텝 완료: 변경사항 감지 및 커밋/푸시"
        run: echo "--- 변경사항 감지 및 커밋/푸시 스텝 완료 ---"

      - name: ">> 워크플로우 실행 종료"
        run: echo "--- 워크플로우 실행이 성공적으로 완료되었습니다 ---"
