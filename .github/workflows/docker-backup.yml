# .github/workflows/docker-backup.yml
name: Docker Build, Deploy & Hourly Backup with Volume, Encryption & Optional Registry Push

permissions:
  contents: read      # 코드 체크아웃용
  packages: write     # GHCR에 이미지 푸시 권한

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # 매시간 0분 (UTC)

jobs:
  setup-docker:
    runs-on: ubuntu-latest
    steps:
      - name: "[setup-docker] Remove legacy Docker packages"
        run: |
          echo "[setup-docker] Removing legacy Docker packages..."
          sudo apt-get remove -y docker docker-engine docker.io containerd containerd.io runc \
            || echo "[setup-docker] Nothing to remove"
          echo "[setup-docker] Legacy removal done."

      - name: "[setup-docker] Install prerequisites"
        run: |
          echo "[setup-docker] Installing prerequisites..."
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          echo "[setup-docker] Prerequisites installed."

      - name: "[setup-docker] Add Docker GPG key"
        run: |
          echo "[setup-docker] Adding Docker GPG key..."
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
            | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "[setup-docker] GPG key added."

      - name: "[setup-docker] Configure Docker repository"
        run: |
          echo "[setup-docker] Configuring Docker repository..."
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
            | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          echo "[setup-docker] Repository configured."

      - name: "[setup-docker] Install Docker Engine & CLI"
        run: |
          echo "[setup-docker] Installing Docker Engine & CLI..."
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          echo "[setup-docker] Docker Engine & CLI installed."

  build-and-deploy:
    needs: setup-docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: "[build-and-deploy] Checkout code"
        uses: actions/checkout@v4

      - name: "[build-and-deploy] Ensure Dockerfile exists (echo-based)"
        run: |
          echo "[build-and-deploy] Checking for Dockerfile..."
          if [ ! -f Dockerfile ]; then
            echo "[build-and-deploy] Creating Dockerfile via echo..."
            echo "FROM python:3.10-slim" > Dockerfile && echo "[Dockerfile] Base image"
            echo "WORKDIR /app" >> Dockerfile    && echo "[Dockerfile] WORKDIR"
            echo "COPY . ." >> Dockerfile       && echo "[Dockerfile] COPY ."
            echo "RUN if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi" >> Dockerfile \
              && echo "[Dockerfile] Conditional pip install"
            echo 'CMD ["python", "app.py"]' >> Dockerfile  && echo "[Dockerfile] CMD"
            echo "[build-and-deploy] Dockerfile created."
          else
            echo "[build-and-deploy] Dockerfile already exists."
          fi

      - name: "[build-and-deploy] Build Docker image"
        run: |
          echo "[build-and-deploy] Building image finance-transactions:latest..."
          docker build -t finance-transactions:latest .
          echo "[build-and-deploy] Image build complete."

      - name: "[build-and-deploy] Login & Push to GHCR if GHCR_PAT set"
        run: |
          if [ -n "${{ secrets.GHCR_PAT }}" ]; then
            echo "[build-and-deploy] Logging in to ghcr.io..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            echo "[build-and-deploy] Tagging image..."
            docker tag finance-transactions:latest ghcr.io/${{ github.repository_owner }}/finance-transactions:latest
            echo "[build-and-deploy] Pushing image to GHCR..."
            docker push ghcr.io/${{ github.repository_owner }}/finance-transactions:latest
            echo "[build-and-deploy] Image pushed to GHCR."
          else
            echo "[build-and-deploy] GHCR_PAT not set; skipping login & push."
          fi

      - name: "[build-and-deploy] Restart finance-transactions container"
        run: |
          echo "[build-and-deploy] Restarting finance-transactions container..."
          if docker ps -a --format '{{.Names}}' | grep -q '^finance-transactions$'; then
            echo "[build-and-deploy] Removing existing container..."
            docker rm -f finance-transactions
          fi
          echo "[build-and-deploy] Launching new container with volume..."
          docker run -d --name finance-transactions -v finance-data:/data finance-transactions:latest
          echo "[build-and-deploy] Container restarted."

  backup:
    needs: setup-docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    env:
      BACKUP_PASSPHRASE: ${{ secrets.BACKUP_PASSPHRASE }}
    steps:
      - name: "[backup] Create raw backups"
        run: |
          echo "[backup] Starting raw backups..."
          TIMESTAMP=$(date +'%Y%m%d%H%M')
          echo "[backup] Saving image..."
          docker save finance-transactions:latest | gzip > finance-transactions_${TIMESTAMP}.tar.gz
          echo "[backup] Exporting container filesystem..."
          docker export finance-transactions | gzip > finance-transactions-container_${TIMESTAMP}.tar.gz
          echo "[backup] Archiving volume data..."
          docker run --rm -v finance-data:/data -v $PWD:/backup ubuntu:latest \
            bash -c "cd /data && tar czf /backup/volume_${TIMESTAMP}.tar.gz ."
          echo "[backup] Raw backups created."

      - name: "[backup] Encrypt backups with GPG"
        run: |
          echo "[backup] Encrypting backups..."
          for F in *_${TIMESTAMP}.tar.gz; do
            echo "[backup] Encrypting $F..."
            gpg --batch --yes --passphrase "$BACKUP_PASSPHRASE" -c "$F"
            rm "$F"
            echo "[backup] Created $F.gpg"
          done
          echo "[backup] Encryption complete."

      - name: "[backup] Upload encrypted artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker-backup-${{ github.run_id }}
          path: '*.tar.gz.gpg'

      - name: "[backup] Confirm upload"
        run: |
          echo "[backup] Encrypted artifacts uploaded."
