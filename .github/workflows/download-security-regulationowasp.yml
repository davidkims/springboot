# .github/workflows/download-and-import-security-regulations.yml

name: Download and Import Security Regulations

permissions:
  contents: write

on:
  schedule:
    - cron: '0 2 * * 1'    # Îß§Ï£º ÏõîÏöîÏùº 02:00 UTC
  workflow_dispatch:

jobs:
  download-import:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: github
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: regulationsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U github"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: github
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: regulationsdb

    steps:
      - name: üîÑ Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üóÇ Prepare directories
        run: |
          echo "[Step] Creating directories"
          mkdir -p regulations .github/scripts
          echo "[Done] Directories ready"

      - name: üîΩ Download CVSS v3.1 Spec
        continue-on-error: true
        run: |
          echo "[Step] Downloading CVSS v3.1 Specification"
          URL="https://www.first.org/cvss/v3-1/specification-document"
          OUT="regulations/CVSS_v3.1_Spec_$(date +'%Y-%m-%d').pdf"
          if curl -fSL "$URL" -o "$OUT"; then
            echo "[Done] CVSS spec ‚Üí $OUT"
          else
            echo "[Skip] CVSS spec not found"
          fi

      - name: üîΩ Download CVE Modified Feed
        continue-on-error: true
        run: |
          echo "[Step] Downloading CVE Modified Feed"
          URL="https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz"
          OUT_GZ="regulations/CVE_Modified_$(date +'%Y-%m-%d').json.gz"
          if curl -fSL "$URL" -o "$OUT_GZ"; then
            echo "[Done] CVE feed ‚Üí $OUT_GZ"
            gunzip -f "$OUT_GZ"
            echo "[Done] Uncompressed to regulations/CVE_Modified_$(date +'%Y-%m-%d').json"
          else
            echo "[Skip] CVE feed not available"
          fi

      - name: üîΩ Download ISRM Guidelines
        continue-on-error: true
        run: |
          echo "[Step] Downloading ISRM Guidelines (NIST SP800-30 Rev.1)"
          URL="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-30r1.pdf"
          OUT="regulations/NIST_SP800-30_Rev1_$(date +'%Y-%m-%d').pdf"
          if curl -fSL "$URL" -o "$OUT"; then
            echo "[Done] ISRM guidelines ‚Üí $OUT"
          else
            echo "[Skip] ISRM guidelines not found"
          fi

      - name: üîΩ Download OWASP Top Ten 2013
        continue-on-error: true
        run: |
          echo "[Step] Downloading OWASP Top Ten 2013"
          URL="https://raw.githubusercontent.com/OWASP/Top10/master/2013/OWASP%20Top%2010%20-%202013.pdf"
          OUT="regulations/OWASP_Top_Ten_2013_$(date +'%Y-%m-%d').pdf"
          if curl -fSL "$URL" -o "$OUT"; then
            echo "[Done] OWASP 2013 ‚Üí $OUT"
          else
            echo "[Skip] OWASP 2013 not available"
          fi

      - name: üîΩ Download OWASP Top Ten 2017
        continue-on-error: true
        run: |
          echo "[Step] Downloading OWASP Top Ten 2017"
          URL="https://raw.githubusercontent.com/OWASP/Top10/master/2017/OWASP%20Top%2010-2017%20%28en%29.pdf"
          OUT="regulations/OWASP_Top_Ten_2017_$(date +'%Y-%m-%d').pdf"
          if curl -fSL "$URL" -o "$OUT"; then
            echo "[Done] OWASP 2017 ‚Üí $OUT"
          else
            echo "[Skip] OWASP 2017 not available"
          fi

      - name: üîΩ Download OWASP Top Ten 2021
        continue-on-error: true
        run: |
          echo "[Step] Downloading OWASP Top Ten 2021"
          URL="https://owasp.org/www-chapter-minneapolis-st-paul/download/20211216_OWASP-MSP_OWASP_Top_Ten_2021.pdf?raw=true"
          OUT="regulations/OWASP_Top_Ten_2021_$(date +'%Y-%m-%d').pdf"
          if curl -fSL "$URL" -o "$OUT"; then
            echo "[Done] OWASP 2021 ‚Üí $OUT"
          else
            echo "[Skip] OWASP 2021 not available"
          fi

      - name: üîÑ Sync with remote main
        run: |
          echo "[Step] Syncing with origin/main"
          git fetch origin main
          git rebase origin/main
          echo "[Done] Synced"

      - name: üêç Create import script
        run: |
          echo "[Step] Generating DB import script"
          cat << 'EOF' > .github/scripts/import_regulations.py
#!/usr/bin/env python3
import os
import psycopg2
from psycopg2 import sql

def log(msg):
    print(f"[Import] {msg}")

log("Connecting to database")
conn = psycopg2.connect(
    host=os.environ['DB_HOST'],
    port=os.environ['DB_PORT'],
    dbname=os.environ['DB_NAME'],
    user=os.environ['DB_USER'],
    password=os.environ['DB_PASSWORD']
)
cur = conn.cursor()

log("Ensuring regulations table exists")
cur.execute("""
  CREATE TABLE IF NOT EXISTS regulations (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    date DATE NOT NULL,
    content BYTEA
  );
""")
log("Table ready")

for fname in os.listdir('regulations'):
    path = os.path.join('regulations', fname)
    log(f"Importing {fname}")
    with open(path, 'rb') as f:
        blob = f.read()
    name = os.path.splitext(fname)[0]
    date_str = fname.split('_')[-1].split('.')[0]
    cur.execute(
        sql.SQL("INSERT INTO regulations (name, date, content) VALUES (%s, %s, %s)"),
        (name, date_str, psycopg2.Binary(blob))
    )
    log(f"Inserted {fname}")

conn.commit()
log("Commit complete")
cur.close()
conn.close()
log("Connection closed")
EOF
          echo "[Done] import_regulations.py created"

      - name: üêç Import regulations into PostgreSQL
        run: |
          echo "[Step] Importing files into DB"
          python .github/scripts/import_regulations.py
          echo "[Done] Import complete"

      - name: üîÑ Commit & push changes
        run: |
          echo "[Step] Committing & pushing updates"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add regulations .github/scripts/import_regulations.py
          if git diff --quiet; then
            echo "[Skip] No changes to commit"
          else
            git commit -m "chore: download & import security regulations"
            git push
            echo "[Done] Changes pushed"
          fi
