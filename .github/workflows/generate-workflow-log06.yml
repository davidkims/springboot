name: Generate Workflow Run Log

on:
  workflow_dispatch: # GitHub UI에서 수동 실행 허용
  schedule:
    - cron: '0 0 * * *' # 매일 자정 UTC (한국 시간 오전 9시)에 실행
  push:
    branches:
      - main # 'main' 브랜치에 푸시될 때 (혹은 여러분의 기본 브랜치, 예: 'master')
    paths:
      - '.github/workflows/**' # 워크플로우 파일 변경 시에만 실행

jobs:
  generate_log:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행
    permissions:
      contents: write # `.github/workflow_run_log.md` 파일을 업데이트하기 위한 쓰기 권한 부여

    steps:
      - name: Checkout repository # 리포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 커밋 히스토리를 가져와서 pull/merge/rebase 작업에 필요

      - name: Ensure local branch is up-to-date with remote # 로컬 브랜치를 원격과 동기화
        run: |
          # 기본 pull 전략을 merge로 설정 (rebase를 선호하면 'git config pull.rebase true'로 변경 가능)
          git config pull.rebase false 
          # 현재 워크플로우가 실행 중인 브랜치(${GITHUB_REF_NAME}은 'main' 등이 됨)의 최신 내용을 가져와 병합
          git pull origin ${{ github.ref_name }} 
          # 만약 git pull이 실패(예: 충돌)해도 다음 단계가 계속 진행되도록 하려면 || true 를 추가할 수 있습니다.
          # 하지만 이 워크플로우에서는 충돌이 발생하면 문제가 있으므로, 실패 시 워크플로우를 중단하는 것이 좋습니다.

      - name: Fetch workflow runs and generate log # 워크플로우 실행 기록 가져와서 로그 파일 생성
        id: fetch_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub가 자동으로 제공하는 토큰 사용
        run: |
          #!/bin/bash

          REPO="${{ github.repository }}" # 현재 리포지토리 이름 (예: owner/repo-name)
          LOG_FILE=".github/workflow_run_log.md" # 로그 파일 경로 및 이름

          # 마크다운 파일 헤더 작성
          echo "# GitHub Workflow Run Log" > "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "This file is automatically generated by the \`Generate Workflow Run Log\` workflow." >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "| Workflow Name | Run ID | Status | Conclusion | Run Time (UTC) | Branch | Committer | Commit Message |" >> "$LOG_FILE"
          echo "|---|---|---|---|---|---|---|---|" >> "$LOG_FILE"

          # 리포지토리의 모든 워크플로우 ID 가져오기
          WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows" | jq -r '.workflows[] | .id')

          # 각 워크플로우에 대해 실행 기록 가져오기
          for WORKFLOW_ID in $WORKFLOWS; do
            WORKFLOW_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID" | jq -r '.name')

            # 현재 워크플로우의 실행 기록 가져오기 (최신 100개, 완료/진행중/대기 중 상태, 특정 이벤트에 대한 기록)
            RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=100&status=completed,in_progress,queued&event=push,workflow_dispatch,schedule,pull_request" | jq -r '.workflow_runs[] | "\(.name) \(.id) \(.status) \(.conclusion) \(.created_at) \(.head_branch) \(.head_commit.committer.name) \(.head_commit.message | gsub("[\r\n]"; " "))"') # 커밋 메시지에서 줄바꿈 제거

            # 실행 기록이 없으면 건너뛰기
            if [ -z "$RUNS" ]; then
              continue
            fi

            # 각 실행 기록 파싱하여 마크다운 파일에 추가
            while IFS= read -r RUN; do
              # 실행 데이터를 배열로 파싱 (단순한 공백 분할이므로 이름에 공백이 있으면 일부 문제가 있을 수 있음)
              RUN_ARRAY=($RUN)
              RUN_NAME="${RUN_ARRAY[0]}"
              RUN_ID="${RUN_ARRAY[1]}"
              RUN_STATUS="${RUN_ARRAY[2]}"
              RUN_CONCLUSION="${RUN_ARRAY[3]}"
              RUN_CREATED_AT="${RUN_ARRAY[4]}"
              RUN_BRANCH="${RUN_ARRAY[5]}"
              RUN_COMMITTER="${RUN_ARRAY[6]}"
              
              # 커밋 메시지는 나머지 부분을 모두 연결
              RUN_COMMIT_MESSAGE=""
              for ((i=7; i<${#RUN_ARRAY[@]}; i++)); do
                  RUN_COMMIT_MESSAGE+="${RUN_ARRAY[i]} "
              done
              RUN_COMMIT_MESSAGE=$(echo "$RUN_COMMIT_MESSAGE" | sed 's/ $//') # 마지막 공백 제거

              # 'conclusion'이 null인 경우 'N/A'로 표시
              if [ "$RUN_CONCLUSION" == "null" ]; then
                RUN_CONCLUSION="N/A"
              fi

              # 마크다운 테이블에 행 추가
              echo "| $RUN_NAME | $RUN_ID | $RUN_STATUS | $RUN_CONCLUSION | $RUN_CREATED_AT | $RUN_BRANCH | $RUN_COMMITTER | $RUN_COMMIT_MESSAGE |" >> "$LOG_FILE"
            done <<< "$RUNS"
          done

      - name: Commit and push changes # 변경사항 커밋 및 푸시
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update workflow run log" # 커밋 메시지
          file_pattern: ".github/workflow_run_log.md" # 특정 파일만 커밋하도록 지정
          commit_user_name: "GitHub Actions Bot" # 커밋 사용자 이름
          commit_user_email: "actions@github.com" # 커밋 사용자 이메일
          commit_author: "GitHub Actions Bot <actions@github.com>" # 커밋 작성자
          # 여기서는 pull_strategy를 사용하지 않습니다. 
          # 대신 이전 단계에서 명시적으로 `git pull`을 수행했습니다.
