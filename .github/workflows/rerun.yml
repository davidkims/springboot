name: 실패한 워크플로 자동 재시도 # 이 워크플로우의 이름입니다.

on:
  workflow_run:
    # 이 워크플로우가 모니터링할 워크플로우들의 목록입니다.
    # 여기에 나열된 워크플로우 중 하나라도 완료되면 이 워크플로우가 트리거됩니다.
    # GitHub Actions UI에 표시되는 정확한 워크플로우 '이름'을 사용해야 합니다.
    workflows:
      - GitHub 릴리스 생성 # .github/workflows/release1.yml
      - 자동 금융 백업(수동 + Cron) # .github/workflows/auto-backup.yml
      - Repo 분석 및 README 업데이트 # .github/workflows/workflow-health-monitor.yml
      - 🔄 PostgreSQL 및 Kafka를 사용한 Finance Smart Backup # .github/workflows/bankbackup.yml
      - 커뮤니티 커뮤니티 재시도 # .github/workflows/gitlab-integration.yml
      - 🌀 레지던트 배치 로그 백업 # .github/workflows/log-backup-container.yml
      - 자동 YAML 워크플로 수정 및 재실행 # .github/workflows/delete_workflows.yml
      - 🔄 OTP 없이도 금융 스마트 백업 # .github/workflows/finance-smart-backup.yml
      - Codespace 보안 설정 확인 # .github/workflows/codespace-security1-check.yml
      - Codespace 보안 설정 확인 # .github/workflows/codespace-security-check.yml
      - Repo 분석 및 README 업데이트 # .github/workflows/update_readme.yml
      - Echo()를 통한 OpenAI API 사용 로깅을 사용한 CI # .github/workflows/tokencheck.yml
      - 🔐 플러그인/복호화 + Codex 가격 추적 # .github/workflows/encrypt-decrypt-tag-label.yml
      - 자동 금융 백업 (Manual + Cron) # .github/workflows/auto-backup2.yml
      - 🐳 Docker 빌드 및 Echo로 실행 # .github/workflows/test.yml
      - 프로젝트 소스코드 백업 # .github/workflows/backup.yml
      - 프로젝트 소스코드 백업 # .github/workflows/build_and_test.yml
      - 💳 카드사별 거래 백업 + NetBackup + OCI 업로드 # .github/workflows/swift-backup.yml
      - 워크플로 실행 로그 생성 # .github/workflows/generate-workflow-log06.yml
      - ♾️ 무한 전송 로그 백업(상주) # .github/workflows/transfer-log-infinite-backup.yml
      - 🧾 고객 소스 생성 + 라이브러리 + 복호화 + 피자 자동화 (echo 완전 적용) # .github/workflows/customer-image-docker.yml
      - 🧾 결제 자동화 - PDF 포함 # .github/workflows/cash.yml
      # 자기 자신은 일반적으로 재시도 목록에서 제외합니다.
      # - 실패한 워크플로 자동 재시도 # .github/workflows/auto-rerun.yml
      - 금융 거래 구축 및 시뮬레이션 # .github/workflows/finance-docker.yml
      - ♾️ 전송 로그 백업 - 무한 상주 컨테이너 # .github/workflows/transfer-log-backup1.yml
      - Repo 분석 및 README 업데이트 # .github/workflows/update_readme1.yml
      - 전체 README.md 생성 # .github/workflows/generate_full_readme.yml
      - 🧱 Maven Build(echo 버전) # .github/workflows/auto-transactions.yml
      - MySQL 최신 버전 업그레이드 # .github/workflows/mysql-upgrade.yml
      - 키 가가이드 - PDF 포함 # .github/workflows/billing.yml
      - 🦾 거래 관련 - PDF 포함 # .github/workflows/ledger-generator.yml
      - 보안 ZIP 및 조건부 OCI 업로드를 통해 기업 은행 데이터 생성 및 백업 # .github/workflows/docker-ci-cd.yml
      - 🐬 MySQL 설정, 마이그레이션 및 백업 # .github/workflows/mysql-integrated.yml
      - 커뮤니티 커뮤니티 재시도 # .github/workflows/db.yml
      - 🔐 금융거래 자동 백업 # .github/workflows/docker-finance-build.yml
      - 🐳 GHCR + Kafka 스타일 로깅을 사용한 Docker Finance 백업 # .github/workflows/docker-backup-workflow.yml
      - 🧾 금융 거래 포함(PDF 포함) # .github/workflows/retrigger-and-db-init.yml
      - 📦 GitHub 릴리스 만들기 # .github/workflows/release.yml
      - GitHub 릴리스 생성 # .github/workflows/Release.yml
      - 💸 전송 로그 백업(레지던트 배치) ​​# .github/workflows/transfer-log-backup.yml
      - 🧾 다중 트랜잭션 백업(컨테이너 유형별) # .github/workflows/finance-backup-multi.yml
      - 🐬 동적 포트 및 영구 컨테이너를 사용한 MySQL 백업 # .github/workflows/sql-backup-and-migrate.yml
      - 🔁 자동 금융 백업(수동 트리거 없음) # .github/workflows/label.yml
      - 🐬 MySQL 설정 및 마이그레이션 # .github/workflows/mysql-setup.yml
    types:
      - completed # 모니터링하는 워크플로우가 완료되었을 때 (성공, 실패, 취소 여부와 관계없이) 이 워크플로우를 트리거합니다.

jobs:
  rerun-failed:
    # 모니터링하는 워크플로우 실행이 'failure' (실패) 또는 'cancelled' (취소) 상태일 때만 이 작업이 실행됩니다.
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    runs-on: ubuntu-latest # 이 작업이 실행될 가상 환경을 지정합니다.

    steps:
      - name: 워크플로에 대해 실패한 작업을 다시 실행합니다.
        uses: actions/github-script@v7 # GitHub API와 상호작용하기 위한 공식 액션입니다.
        with:
          script: |
            // 이 워크플로우를 트리거한 원본 워크플로우 실행의 ID를 환경 변수에서 가져옵니다.
            const runId = process.env.RUN_ID;
            
            // GitHub REST API를 호출하여 해당 run_id의 실패한 모든 작업을 재실행합니다.
            // context.repo.owner와 context.repo.repo는 현재 리포지토리의 소유자와 이름을 자동으로 가져옵니다.
            await github.rest.actions.reRunWorkflowFailedJobs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
        env:
          # `github.event.workflow_run.id`는 이 워크플로우를 트리거한 워크플로우 실행의 고유 ID입니다.
          # 이 ID를 RUN_ID 환경 변수에 할당하여 스크립트에서 활용합니다.
          RUN_ID: ${{ github.event.workflow_run.id }}
