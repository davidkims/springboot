name: ♾️ Transfer Log Backup & Load

on:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  transfer_log_and_load:
    runs-on: ubuntu-latest

    env:
      TRANSFER_LOG_DIR: /opt/logs/transfer
      BACKUP_DIR:        /opt/backup/transfer
      MYSQL_ROOT_PASS:   root
      MYSQL_DB:          transactions
      REPO_RAW_BASE:     https://raw.githubusercontent.com/${{ github.repository }}/main

    steps:
      - name: 📦 Checkout repository (clean)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true    # 로컬 변경사항 자동 제거

      - name: 📁 Prepare directories
        run: |
          echo "📁 시작: 디렉토리 준비"
          sudo mkdir -p "$TRANSFER_LOG_DIR" "$BACKUP_DIR"
          sudo chmod -R 777 "$TRANSFER_LOG_DIR" "$BACKUP_DIR"
          echo "✅ 디렉토리 준비 완료"

      - name: 💾 Generate 60 transfer logs
        run: |
          echo "🕒 시작: 60건 거래 로그 생성"
          sudo rm -f "$TRANSFER_LOG_DIR"/*.txt
          for i in $(seq 1 60); do
            TS=$(date +'%Y-%m-%d %H:%M:%S')
            AMT=$((RANDOM % 900000 + 100000))
            LOG="[TRANSFER] $TS | ID:$i | 금액:₩${AMT} | 계좌:110-123-4567$(printf '%02d' $i)"
            echo "$LOG" | sudo tee "$TRANSFER_LOG_DIR/transfer-$i.txt" >/dev/null
          done
          echo "✅ 60건 거래 로그 생성 완료"

      - name: 📦 Backup into timestamped folder
        id: backup
        run: |
          TSF=$(date +'%Y%m%d_%H%M%S')
          echo "ts_folder=$TSF" >> "$GITHUB_OUTPUT"
          DEST="$BACKUP_DIR/$TSF"
          sudo mkdir -p "$DEST"
          sudo cp "$TRANSFER_LOG_DIR"/*.txt "$DEST/"
          echo "✅ 백업 완료: $DEST"

      - name: 📤 Upload logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: transfer-logs-${{ steps.backup.outputs.ts_folder }}
          path: $TRANSFER_LOG_DIR/*.txt

      - name: 🗄 Copy backup into .github/files
        run: |
          mkdir -p ".github/files/${{ steps.backup.outputs.ts_folder }}"
          cp "$BACKUP_DIR/${{ steps.backup.outputs.ts_folder }}"/*.txt ".github/files/${{ steps.backup.outputs.ts_folder }}/"

      - name: 🛠 Download Dockerfile & helper scripts
        run: |
          mkdir -p .github/scripts
          curl -fsSL "$REPO_RAW_BASE/.github/Dockerfile"           -o .github/Dockerfile && echo "✅ Dockerfile 다운로드"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/build_txn_processor.sh" -o .github/scripts/build_txn_processor.sh && chmod +x .github/scripts/build_txn_processor.sh && echo "✅ build script 다운로드"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/init_mysql.sh"         -o .github/scripts/init_mysql.sh         && chmod +x .github/scripts/init_mysql.sh         && echo "✅ init script 다운로드"
          curl -fsSL "$REPO_RAW_BASE/.github/scripts/load_transactions.sh"  -o .github/scripts/load_transactions.sh  && chmod +x .github/scripts/load_transactions.sh  && echo "✅ load script 다운로드"

      - name: 🛠 Build txn-processor image
        run: |
          echo "🐳 이미지 빌드 시작"
          .github/scripts/build_txn_processor.sh

      - name: 🛠 Init MySQL & table
        run: |
          echo "🔧 MySQL 컨테이너 및 테이블 초기화"
          .github/scripts/init_mysql.sh

      - name: 🛠 Load transactions into MySQL
        run: |
          echo "📥 거래 데이터 적재 시작"
          .github/scripts/load_transactions.sh

      - name: 📤 Upload backup folder artifact
        uses: actions/upload-artifact@v4
        with:
          name: transfer-backup-${{ steps.backup.outputs.ts_folder }}
          path: $BACKUP_DIR/${{ steps.backup.outputs.ts_folder }}

      - name: 📂 Show final backup state
        run: |
          echo "📂 최종 백업 디렉터리 구조"
          ls -R "$BACKUP_DIR" | tail -n 20
