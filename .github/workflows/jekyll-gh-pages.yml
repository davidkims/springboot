name: 📄 Provenance Index Generator

on:
  push:
    paths:
      - "_provenance/*.json"
      - ".attestation/*.json"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-index:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: provenance-${{ github.run_id }}-${{ github.run_number }}

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 🧱 Ensure .attestation and _provenance directories
        run: |
          mkdir -p .attestation
          mkdir -p _provenance

      - name: 📄 Copy provenance.json or create fallback
        run: |
          FILE=".attestation/provenance.json"
          OUT="_provenance/${ARTIFACT_NAME}.json"

          if [ -f "$FILE" ]; then
            echo "✅ Found $FILE"
            cp "$FILE" "$OUT"
          else
            echo "⚠️ Not found: $FILE — creating dummy"
            cat <<EOF > "$OUT"
{
  "subject": [{
    "name": "${ARTIFACT_NAME}.zip",
    "digest": { "sha256": "dummyhashvalue0123456789abcdef" }
  }],
  "buildType": "https://example.com/fake/buildtype",
  "predicate": {
    "metadata": {
      "buildStartedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "tag": "dummy"
    }
  },
  "builder": {
    "id": "dummy.builder"
  },
  "invocation": {
    "configSource": {
      "uri": "https://github.com/example/repo"
    }
  }
}
EOF
          fi

          # Also generate SARIF
          cat <<EOF > "_provenance/${ARTIFACT_NAME}.sarif"
{
  "version": "2.1.0",
  "runs": [{
    "tool": {
      "driver": {
        "name": "attestation-converter",
        "informationUri": "https://github.com/actions/attest-build-provenance",
        "version": "1.0.0"
      }
    },
    "results": []
  }]
}
EOF

      - name: 📊 Generate CSV and index files
        run: |
          mkdir -p _data
          echo "artifact,sha256,tag,buildType,created,builder_id,config_source_uri" > _data/metadata.csv

          declare -A tag_map
          all_dates=()

          for f in _provenance/*.json; do
            ARTIFACT=$(jq -r '.subject[0].name' "$f")
            SHA256=$(jq -r '.subject[0].digest.sha256' "$f")
            TAG=$(jq -r '.predicate.metadata.tag // "untagged"' "$f")
            BUILD_TYPE=$(jq -r '.buildType // "N/A"' "$f")
            CREATED=$(jq -r '.predicate.metadata.buildStartedOn // "N/A"' "$f")
            BUILDER_ID=$(jq -r '.builder.id // "N/A"' "$f")
            CONFIG_URI=$(jq -r '.invocation.configSource.uri // "N/A"' "$f")

            echo "$ARTIFACT,$SHA256,$TAG,$BUILD_TYPE,$CREATED,$BUILDER_ID,$CONFIG_URI" >> _data/metadata.csv

            TAG_MD="index-${TAG}.md"
            if [ ! -f "$TAG_MD" ]; then
              echo "# 📦 Provenance Index for Tag: $TAG" > "$TAG_MD"
              echo "" >> "$TAG_MD"
              echo "| Artifact | SHA256 | Build Type | Created | Builder ID | Config URI |" >> "$TAG_MD"
              echo "|----------|--------|------------|---------|------------|-------------|" >> "$TAG_MD"
            fi

            echo "| $ARTIFACT | \`${SHA256:0:12}...\` | $BUILD_TYPE | $CREATED | $BUILDER_ID | $CONFIG_URI |" >> "$TAG_MD"

            tag_map["$TAG"]=1
            all_dates+=("$CREATED")
          done

          latest_date=$(printf '%s\n' "${all_dates[@]}" | grep -v 'N/A' | sort -r | head -n1)
          total_files=$(ls _provenance/*.json | wc -l)

          echo "# 🧾 Provenance Index Summary" > index.md
          echo "" >> index.md
          echo "- **Total Provenance Files**: \`$total_files\`" >> index.md
          echo "- **Latest Build Date**: \`$latest_date\`" >> index.md
          echo "" >> index.md
          echo "## 📁 Tag-based Indexes" >> index.md
          echo "" >> index.md

          for tag in "${!tag_map[@]}"; do
            echo "- [index-${tag}.md](index-${tag}.md) — Tag: \`$tag\`" >> index.md
          done

      - name: ✅ Commit and Push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "bot@example.com"
          git pull --rebase || echo "Nothing to pull"
          git add _data index.md index-*.md _provenance || true
          git commit -m "📌 Update provenance metadata and indexes" || echo "No changes to commit"
          git push || echo "No changes to push"
