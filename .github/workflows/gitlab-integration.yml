# 파일 위치: .github/workflows/gitlab-integration.yml
name: GitLab 연동 워크플로우

# main 브랜치에 푸시되거나, 수동 실행도 허용
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  push-to-gitlab:
    name: "GitLab 저장소로 푸시 및 파이프라인 트리거"
    runs-on: ubuntu-latest
    env:
      # GitLab 개인 엑세스 토큰 (GitHub Secrets에 미리 등록해야 함)
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
      # GitLab 프로젝트 ID (GitHub Secrets 또는 하드코딩)
      GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
      # GitLab 리모트 URL. oauth2 방식으로 인증하여 푸시.
      GITLAB_REMOTE_URL: https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.com/<namespace>/<project>.git
    steps:
      # 1) GitHub 저장소의 코드를 체크아웃
      - name: '1. Checkout GitHub 코드'
        uses: actions/checkout@v4

      # 2) Git 사용자 정보 설정 (GitLab 커밋 주체로 올리기 위함)
      - name: '2. Git 사용자 정보 설정'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3) GitLab 원격 저장소 리모트로 추가
      - name: '3. GitLab 원격(remote) 추가'
        run: |
          # 기존 origin 이외에 gitlab-origin이라는 이름으로 리모트 추가
          git remote add gitlab-origin "${{ env.GITLAB_REMOTE_URL }}"
          # 원격 리모트가 제대로 등록되었는지 확인
          git remote -v

      # 4) 원하는 브랜치(예: main)를 GitLab으로 강제 푸시 (포스 푸시금지에 유의)
      - name: '4. GitLab으로 코드 푸시'
        run: |
          # main 브랜치를 gitlab-origin의 main 브랜치로 푸시
          git push gitlab-origin HEAD:main

      # 5) (선택) GitLab 파이프라인을 수동 트리거
      #    GitLab 프로젝트 설정에 “Trigger Tokens”를 사용하지 않고,
      #    REST API로 직접 파이프라인을 트리거하는 예시입니다.
      #    GitLab 개인 토큰(PAT)에 api 권한이 있어야 합니다.
      - name: '5. GitLab 파이프라인 트리거'
        run: |
          curl --request POST \
            --header "PRIVATE-TOKEN: ${{ env.GITLAB_TOKEN }}" \
            --form "ref=main" \
            "https://gitlab.com/api/v4/projects/${{ env.GITLAB_PROJECT_ID }}/pipeline"
