name: Build & Deploy finance-transactions with DB Backup

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"  # 매 5분 간격

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성
        run: |
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "[✔] requirements.txt 생성 완료"

      - name: ⚙️ .env 파일 생성
        run: |
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "[✔] .env 파일 생성 완료"

      - name: 🐍 app.py 생성
        run: |
          echo "from flask import Flask, request, jsonify" > app.py
          echo "from flask_sqlalchemy import SQLAlchemy" >> app.py
          echo "from dotenv import load_dotenv" >> app.py
          echo "import os" >> app.py
          echo "load_dotenv()" >> app.py
          echo "app = Flask(__name__)" >> app.py
          echo "DB_URI = f\"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('POSTGRES_DB')}\"" >> app.py
          echo "app.config['SQLALCHEMY_DATABASE_URI'] = DB_URI" >> app.py
          echo "db = SQLAlchemy(app)" >> app.py
          echo "class Transaction(db.Model):" >> app.py
          echo "    id = db.Column(db.Integer, primary_key=True)" >> app.py
          echo "    amount = db.Column(db.Float)" >> app.py
          echo "    currency = db.Column(db.String(10))" >> app.py
          echo "    status = db.Column(db.String(20))" >> app.py
          echo "@app.before_first_request" >> app.py
          echo "def create_tables():" >> app.py
          echo "    db.create_all()" >> app.py
          echo "@app.route('/', methods=['GET'])" >> app.py
          echo "def index():" >> app.py
          echo "    return jsonify({'status': 'success', 'message': f\"{os.getenv('APP_NAME')} is running!\"})" >> app.py
          echo "@app.route('/transaction', methods=['POST'])" >> app.py
          echo "def transaction():" >> app.py
          echo "    try:" >> app.py
          echo "        data = request.get_json(force=True)" >> app.py
          echo "        tx = Transaction(**data)" >> app.py
          echo "        db.session.add(tx)" >> app.py
          echo "        db.session.commit()" >> app.py
          echo "        return jsonify({'status': 'success', 'message': 'Saved', 'data': data})" >> app.py
          echo "    except Exception as e:" >> app.py
          echo "        return jsonify({'status': 'error', 'message': str(e)}), 400" >> app.py
          echo "if __name__ == '__main__':" >> app.py
          echo "    app.run(host='0.0.0.0', port=5000)" >> app.py

      - name: 🐳 Dockerfile 생성
        run: |
          echo "FROM python:3.11-slim" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
          echo "EXPOSE 5000" >> Dockerfile
          echo "CMD [\"python\", \"app.py\"]" >> Dockerfile
          echo "[✔] Dockerfile 생성 완료"

      - name: 🛠️ Docker 설치
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15
          sleep 20

      - name: 🏗️ Docker 이미지 빌드
        run: |
          docker build -t finance-transactions:latest .

      - name: 🚀 Flask 앱 실행
        run: |
          docker run -d --name finance-transactions \
            --link db \
            --env-file .env \
            -p 8080:5000 \
            finance-transactions:latest
          sleep 10

      - name: 📄 거래 시뮬레이션 ledger.py 생성 및 실행
        run: |
          mkdir -p backup
          echo "import csv, random, datetime" > ledger.py
          echo "with open('backup/transactions.csv', 'w', newline='') as f:" >> ledger.py
          echo "    writer = csv.writer(f)" >> ledger.py
          echo "    writer.writerow(['timestamp', 'amount', 'currency', 'status'])" >> ledger.py
          echo "    for _ in range(60):" >> ledger.py
          echo "        ts = datetime.datetime.now().isoformat()" >> ledger.py
          echo "        amt = round(random.uniform(10.0, 1000.0), 2)" >> ledger.py
          echo "        currency = random.choice(['USD', 'KRW', 'JPY'])" >> ledger.py
          echo "        status = random.choice(['completed', 'pending', 'failed'])" >> ledger.py
          echo "        writer.writerow([ts, amt, currency, status])" >> ledger.py
          python3 ledger.py
          echo "[✔] 거래 원장(60건) 생성 완료"

      - name: 🗃️ 📄 transactions.csv → PostgreSQL DB 적재 자동화
        run: |
          echo "[+] CSV 파일 DB 적재 시작"
          tail -n +2 backup/transactions.csv > backup/tmp_transactions.csv
          echo "[+] CSV 헤더 제거 완료 → tmp_transactions.csv"
          docker exec db psql -U postgres -d finance -c "CREATE TABLE IF NOT EXISTS transactions (timestamp TIMESTAMP, amount NUMERIC, currency VARCHAR(10), status VARCHAR(20));"
          echo "[+] 테이블 생성 또는 확인 완료"
          docker cp backup/tmp_transactions.csv db:/tmp/tmp_transactions.csv
          echo "[+] CSV 파일 컨테이너 복사 완료"
          docker exec db psql -U postgres -d finance -c "COPY transactions(timestamp, amount, currency, status) FROM '/tmp/tmp_transactions.csv' DELIMITER ',' CSV;"
          echo "[✔] CSV → DB 적재 완료"

      - name: 📦 backup.sh 생성 및 실행
        run: |
          mkdir -p backup
          echo "#!/bin/bash" > backup.sh
          echo "TIMESTAMP=\$(date +%Y%m%d%H%M%S)" >> backup.sh
          echo "docker exec db pg_dump -U postgres -d finance > backup/backup-\$TIMESTAMP.sql" >> backup.sh
          chmod +x backup.sh
          ./backup.sh
          echo "[✔] DB 백업 완료"
          ls -lh backup

      - name: 🧹 마무리 정리
        if: always()
        run: |
          docker stop finance-transactions || true
          docker stop db || true
          docker rm finance-transactions || true
          docker rm db || true
          echo "[✔] 컨테이너 정리 완료"
