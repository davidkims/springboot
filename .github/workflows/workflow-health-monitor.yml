name: Workflow Health Monitor and Alerting # 워크플로우의 이름. 첫 줄에 구문 오류가 발생할 가능성은 낮음.

on:
  workflow_run:
    # 'on.workflow_run does not reference any workflows' 오류를 해결하기 위해 'workflows: []'를 명시적으로 추가합니다.
    # 이는 리포지토리의 모든 워크플로우 실행을 감시하겠다는 의미입니다.
    workflows: [] # 이 줄은 필수이며, 들여쓰기가 'workflow_run'과 동일해야 합니다.
    types: [completed] # 다른 워크플로우가 'completed' (성공/실패 여부와 관계없이 완료) 상태일 때 이 워크플로우를 트리거합니다.

  schedule:
    # UTC 기준 매 시간 0분(정시)에 워크플로우를 주기적으로 실행합니다.
    # 이는 'workflow_run' 트리거가 놓칠 수 있는 경우를 대비하여 백업 역할을 합니다.
    - cron: '0 * * * *'

  workflow_dispatch: {} # GitHub UI에서 수동으로 이 워크플로우를 실행할 수 있도록 허용합니다.

jobs:
  monitor-and-alert:
    runs-on: ubuntu-latest # 이 Job을 실행할 GitHub 호스팅 러너 환경을 지정합니다.
    
    # 이 워크플로우가 다른 워크플로우 실행 기록을 읽고, 리포지토리 코드를 체크아웃할 수 있도록 필요한 권한을 명시적으로 부여합니다.
    permissions:
      actions: read # 다른 워크플로우의 실행 기록을 읽기 위해 필요합니다.
      contents: read # 리포지토리 코드를 체크아웃하고, .github/workflows/*.yml 파일을 읽기 위해 필요합니다.

    steps:
      - name: Checkout repository code # 리포지토리 코드를 러너에 체크아웃합니다.
        uses: actions/checkout@v4

      - name: Fetch recent workflow runs # 최근 24시간 내에 실패한 워크플로우 실행 기록을 가져옵니다.
        id: get_workflow_runs # 이 스텝의 출력을 참조하기 위한 ID
        run: |
          # GitHub API를 사용하여 최근 24시간 내에 생성된 실패한 워크플로우 실행 목록을 쿼리합니다.
          # 'jq'는 JSON 응답을 파싱하는 도구이며, GitHub Actions 러너에 기본으로 설치되어 있습니다.
          FAILED_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=failure&created=>$(date -u -d '24 hours ago' '+%Y-%m-%dT%H:%M:%SZ')" | \
            jq -r '.workflow_runs[] | "- \(.name) (\(.html_url)) (ID: \(.id), Event: \(.event))"')

          # 실패한 워크플로우가 있는지 확인하고, 결과를 출력으로 설정합니다.
          if [ -n "$FAILED_RUNS" ]; then
            echo "::set-output name=failed_runs::$FAILED_RUNS"
            echo "🚨 Failed workflows detected:"
            echo "$FAILED_RUNS"
          else
            echo "✅ No failed workflows detected in the last 24 hours."
            echo "::set-output name=failed_runs::" # 실패가 없으면 빈 문자열로 설정
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions에서 기본 제공하는 토큰 (repo 스코프에 'actions:read' 권한 필요)

      - name: Send Alert if workflows failed (Slack Example) # 실패한 워크플로우가 있을 경우 Slack으로 알림을 보냅니다.
        # 이전 'get_workflow_runs' 스텝에서 'failed_runs' 출력이 비어있지 않을 때만 이 스텝을 실행합니다.
        if: steps.get_workflow_runs.outputs.failed_runs != ''
        uses: rtCamp/action-slack-notify@v2 # Slack 알림을 위한 GitHub Action 사용
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # GitHub Secrets에 저장된 Slack Webhook URL 사용
          SLACK_MESSAGE: | # Slack에 전송될 메시지 내용을 정의합니다. Markdown 형식 지원.
            *GitHub Actions Workflow Failure Alert*
            Repository: `${{ github.repository }}`
            Failed Workflows (Last 24h):
            ${{ steps.get_workflow_runs.outputs.failed_runs }}

            Please investigate immediately.
          SLACK_USERNAME: GitHub Actions Bot # Slack 알림의 발신자 이름
          SLACK_CHANNEL: '#github-alerts' # 알림을 보낼 Slack 채널 (필요에 따라 변경)
          SLACK_ICON_EMOJI: ':octocat:' # 알림에 사용할 이모지 (선택 사항)

      # --- 선택 사항: 워크플로우 파일 설명 누락 검사 ---
      # 이 섹션은 제공해주신 '설명이 필요합니다' 문제에 대한 해결책입니다.
      - name: Install yq # YAML 파일을 안전하게 파싱하기 위한 'yq' 도구를 설치합니다.
        uses: mikefarah/yq@v4 # 'yq' 액션의 최신 안정 버전 사용

      - name: Check for missing workflow descriptions # 모든 워크플로우 파일에 'description' 필드가 있는지 확인합니다.
        run: |
          MISSING_DESCRIPTIONS_COUNT=0
          MISSING_DESCRIPTIONS_LIST=""
          # .github/workflows 디렉토리 내의 모든 .yml 워크플로우 파일을 순회합니다.
          for workflow_file in .github/workflows/*.yml; do
            # 파일이 존재하고 일반 파일인지 확인합니다.
            if [ -f "$workflow_file" ]; then
              # 'yq'를 사용하여 'description' 필드를 읽습니다. 필드가 없으면 빈 문자열을 반환합니다.
              description=$(yq e '.description // ""' "$workflow_file")
              
              # 'description'이 비어있는지 확인합니다.
              if [ -z "$description" ]; then
                echo "::warning file=$workflow_file::Workflow '$workflow_file' is missing a 'description' field. Please add one for better documentation."
                MISSING_DESCRIPTIONS_COUNT=$((MISSING_DESCRIPTIONS_COUNT + 1))
                MISSING_DESCRIPTIONS_LIST+="\n- $workflow_file"
              fi
            fi
          done

          # 설명이 누락된 워크플로우가 하나라도 있다면 워크플로우를 실패시킵니다.
          if [ "$MISSING_DESCRIPTIONS_COUNT" -gt 0 ]; then
            echo "::error::Found $MISSING_DESCRIPTIONS_COUNT workflow(s) with missing 'description' field(s):$MISSING_DESCRIPTIONS_LIST"
            exit 1 # 이 스텝이 실패하여 전체 워크플로우도 실패하게 됩니다.
          else
            echo "✅ All workflow files have descriptions. Good for documentation!"
          fi
