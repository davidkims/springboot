# 파일명: .github/workflows/generate_workflow_run_log.yml
name: 워크플로 실행 로그 생성

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * 0' # 매주 일요일, 매 5분마다 실행 (UTC 기준)
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'

jobs:
  create_log:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 체크아웃 저장소 (전체 기록 포함)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 기록을 가져옵니다.

      # --- REMOVE the previous "원격과 동기화 및 브랜치 리베이스" step ---
      # This logic will be handled more robustly by the git-auto-commit-action itself,
      # or by an explicit pull just before it.

      - name: 워크플로 실행을 가져오고 로그를 생성합니다.
        id: fetch_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          REPO="${{ github.repository }}"
          LOG_FILE=".github/workflow_run_log.md"

          echo "# GitHub 워크플로 실행 로그" > "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "이 파일은 \`워크플로 실행 로그 생성\` 워크플로에 의해 자동으로 생성됩니다." >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "마지막 업데이트: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "| 워크플로 이름 | 실행 ID | 상태 | 결론 | 실행 시간(UTC) | 브랜치 | 커미터 | 커밋 메시지 |" >> "$LOG_FILE"
          echo "|---|---|---|---|---|---|---|---|" >> "$LOG_FILE"

          WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows" | jq -r '.workflows[] | .id')

          for WORKFLOW_ID in $WORKFLOWS; do
            WORKFLOW_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID" | jq -r '.name')

            RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=100&status=completed,in_progress,queued&event=push,workflow_dispatch,schedule,pull_request" \
              | jq -r '.workflow_runs[] | "\(.name) \(.id) \(.status) \(.conclusion) \(.created_at) \(.head_branch) \(.head_commit.committer.name) \(.head_commit.message | gsub("[\r\n]"; " "))"')

            if [ -z "$RUNS" ]; then
              continue
            fi

            while IFS= read -r RUN; do
              RUN_ARRAY=($RUN)
              RUN_NAME="${RUN_ARRAY[0]}"
              RUN_ID="${RUN_ARRAY[1]}"
              RUN_STATUS="${RUN_ARRAY[2]}"
              RUN_CONCLUSION="${RUN_ARRAY[3]}"
              RUN_CREATED_AT="${RUN_ARRAY[4]}"
              RUN_BRANCH="${RUN_ARRAY[5]}"
              RUN_COMMITTER="${RUN_ARRAY[6]}"

              RUN_COMMIT_MESSAGE=""
              for ((i=7; i<${#RUN_ARRAY[@]}; i++)); do
                  RUN_COMMIT_MESSAGE+="${RUN_ARRAY[i]} "
              done
              RUN_COMMIT_MESSAGE=$(echo "$RUN_COMMIT_MESSAGE" | sed 's/ $//')

              if [ "$RUN_CONCLUSION" == "null" ]; then
                RUN_CONCLUSION="N/A"
              fi

              echo "| $RUN_NAME | $RUN_ID | $RUN_STATUS | $RUN_CONCLUSION | $RUN_CREATED_AT | $RUN_BRANCH | $RUN_COMMITTER | $RUN_COMMIT_MESSAGE |" >> "$LOG_FILE"
            done <<< "$RUNS"
          done

      # --- NEW STEP: Explicitly pull remote changes before auto-committing ---
      - name: 원격 브랜치와 최종 동기화
        run: |
          LOCAL_BRANCH="${{ github.ref_name }}"
          echo "최종 동기화를 위해 원격 브랜치 '$LOCAL_BRANCH'를 풀합니다."
          # --ff-only: fast-forward 병합만 시도합니다. 실패 시 워크플로우를 중단합니다.
          # 이는 diverged 상태를 발생시키지 않고 원격의 최신 커밋을 가져옵니다.
          git pull --ff-only origin "$LOCAL_BRANCH"
          if [ $? -ne 0 ]; then
            echo "오류: 최종 'git pull --ff-only'에 실패했습니다. 원격 브랜치가 diverged되었을 수 있습니다."
            echo "워크플로우를 중단합니다. 수동으로 'git pull' 또는 'git rebase'가 필요할 수 있습니다."
            exit 1
          fi

      - name: 변경 사항 커밋 및 푸시
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "워크플로 실행 로그 업데이트"
          file_pattern: ".github/workflow_run_log.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
          branch: ${{ github.ref_name }} # 명시적으로 대상 브랜치 지정
