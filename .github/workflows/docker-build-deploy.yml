name: Build & Deploy finance-transactions with DB Backup

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성
        run: |
          echo "[+] requirements.txt 생성"
          echo "flask" > requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "[✔] requirements.txt 생성 완료"

      - name: ⚙️ .env 파일 생성
        run: |
          echo "[+] .env 파일 생성"
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "[✔] .env 파일 생성 완료"

      - name: 🐍 app.py 생성
        run: |
          echo "[+] app.py 생성 시작"
          cat << 'EOF' > app.py
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
import os

load_dotenv()
app = Flask(__name__)

DB_URI = f"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('POSTGRES_DB')}"
app.config['SQLALCHEMY_DATABASE_URI'] = DB_URI
db = SQLAlchemy(app)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    amount = db.Column(db.Float)
    currency = db.Column(db.String(10))
    status = db.Column(db.String(20))

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/', methods=['GET'])
def index():
    return jsonify({'status': 'success', 'message': f"{os.getenv('APP_NAME')} is running!"})

@app.route('/transaction', methods=['POST'])
def transaction():
    try:
        data = request.get_json(force=True)
        tx = Transaction(**data)
        db.session.add(tx)
        db.session.commit()
        return jsonify({'status': 'success', 'message': 'Saved', 'data': data})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
EOF
          echo "[✔] app.py 생성 완료"

      - name: 🐳 Dockerfile 생성
        run: |
          echo "[+] Dockerfile 생성 시작"
          cat << 'EOF' > Dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 5000
CMD ["python", "app.py"]
EOF
          echo "[✔] Dockerfile 생성 완료"

      - name: 🛠️ Docker 설치
        run: |
          echo "[+] Docker 설치 중..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version
          echo "[✔] Docker 설치 완료"

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          echo "[+] PostgreSQL 컨테이너 실행"
          docker run -d \
            --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 \
            postgres:15
          echo "⏳ DB 초기화 대기 중..."
          sleep 20
          echo "[✔] PostgreSQL 컨테이너 실행 완료"

      - name: 🏗️ Docker 이미지 빌드
        run: |
          echo "[+] Docker 이미지 빌드 시작"
          docker build -t finance-transactions:latest .
          docker image ls
          echo "[✔] Docker 이미지 빌드 완료"

      - name: 🚀 Flask 앱 컨테이너 실행
        run: |
          echo "[+] finance-transactions 컨테이너 실행"
          docker run -d \
            --name finance-transactions \
            --link db \
            --env-file .env \
            -p 8080:5000 \
            finance-transactions:latest
          echo "[✔] finance-transactions 컨테이너 실행 완료"

      - name: 📂 backup.sh 생성 및 실행
        run: |
          echo "[+] backup.sh 생성 시작"
          mkdir -p backup
          cat << 'EOF' > backup.sh
#!/bin/bash
mkdir -p backup
TIMESTAMP=$(date +%Y%m%d%H%M%S)
docker exec db pg_dump -U postgres -d finance > backup/backup-$TIMESTAMP.sql
EOF
          chmod +x backup.sh
          echo "[🔁] backup.sh 실행 중..."
          ./backup.sh
          echo "[✔] 백업 완료. 파일 목록:"
          ls -lh backup

      - name: 📦 GitHub Release에 DB 백업 업로드
        uses: softprops/action-gh-release@v2
        with:
          name: "📦 PostgreSQL DB Backup"
          tag_name: "db-backup-${{ github.run_id }}"
          files: backup/*.sql
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}

      - name: 🧹 마무리 정리
        if: always()
        run: |
          echo "[+] 마무리 정리 시작"
          docker ps -a
          echo "[✔] 마무리 정리 완료"
