name: Repo Analysis and README Update # 워크플로우의 이름

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 트리거
    paths:
      # README.md를 업데이트하는 기준이 되는 파일들의 변경을 감지
      # 여기에 프로젝트의 소스 코드, 설정 파일 등 README.md 업데이트를 유발하는 변경 사항을 추가
      - '**.py'
      - '**.java'
      - '**.css'
      # README.md 자체의 변경은 이 워크플로우를 트리거하지 않도록 주의 (무한 루프 방지)
      # 만약 README.md 자체 변경 시에도 이 워크플로우가 실행되어야 한다면, '.md' 또는 'README.md'를 추가
      # 그러나 일반적으로는 README.md가 변경되었을 때 다른 파일을 업데이트하는 것은 비논리적이며,
      # 이 워크플로우가 README.md를 "자동으로" 생성/업데이트하는 것이 목적이므로,
      # README.md의 수동 변경은 이 워크플로우의 실행을 막는 것이 좋습니다.

  schedule:
    # UTC 기준 매일 자정(새벽 9시 KST)에 주기적으로 실행
    - cron: '0 0 * * *'

  workflow_dispatch: # GitHub UI에서 수동으로 워크플로우 실행 허용
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger from UI'

jobs:
  update-readme:
    runs-on: ubuntu-latest # Job을 실행할 러너 환경

    permissions:
      contents: write # 리포지토리 내용을 읽고, README.md를 수정 후 푸시하기 위해 'write' 권한 필수

    steps:
      - name: Checkout repository # 리포지토리 코드를 러너에 체크아웃
        uses: actions/checkout@v4
        with:
          # `GITHUB_TOKEN`은 푸시 권한을 가짐. `permissions: contents: write`와 함께 작동.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python (for scripting) # Python 환경 설정 (README 생성 스크립트가 Python인 경우)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 또는 '3.9', '3.10', '3.11' 등 특정 안정 버전 지정
          # cache: 'pip' # 종속성 캐싱 활성화 (선택 사항, 대규모 종속성 시 유용)

      # --- README.md 내용을 생성 또는 수정하는 실제 로직 ---
      # 이 부분은 여러분의 리포지토리 분석 및 README 업데이트 스크립트에 따라 달라집니다.
      # 여기에 필요한 라이브러리 설치, 데이터 수집, 콘텐츠 생성 스크립트 실행 등을 배치합니다.
      - name: Install Python dependencies (if needed)
        run: |
          # pip install some-analysis-library markdown-it-py

      - name: Generate updated README.md content # README.md 내용을 생성하는 스텝
        id: generate_content # 이 스텝에 ID 부여 (다음 스텝에서 내용이 변경되었는지 확인하기 위함)
        run: |
          TEMP_README="temp_README.md"
          # 기존 README.md 내용을 백업 (선택 사항)
          # cp README.md README.md.bak

          # 새로운 README.md 내용 생성 시작
          echo "# Project Overview" > $TEMP_README
          echo "" >> $TEMP_README
          echo "This README is automatically generated by a GitHub Actions workflow." >> $TEMP_README
          echo "Last updated: $(date)" >> $TEMP_README
          echo "" >> $TEMP_README

          echo "## Repository Analysis" >> $TEMP_README
          echo "### Code Statistics:" >> $TEMP_README
          echo "- Python files: $(find . -name '*.py' | wc -l | xargs)" >> $TEMP_README
          echo "- Java files: $(find . -name '*.java' | wc -l | xargs)" >> $TEMP_README
          echo "- CSS files: $(find . -name '*.css' | wc -l | xargs)" >> $TEMP_README
          echo "" >> $TEMP_README

          echo "### Workflow Overview:" >> $TEMP_README
          # 모든 워크플로우 파일 목록을 가져와 README에 추가 (간단한 예시)
          for wf in .github/workflows/*.yml; do
            wf_name=$(yq e '.name // "Unnamed Workflow"' "$wf") # yq로 워크플로우 이름 가져오기
            echo "- [ ] $wf_name (`$(basename $wf)`) " >> $TEMP_README
          done
          echo "" >> $TEMP_README

          # 기존 README.md와 새로 생성된 내용 비교
          # 내용이 변경되었는지 확인하여 불필요한 커밋 방지
          if cmp -s README.md "$TEMP_README"; then
            echo "::set-output name=content_changed::false"
            echo "README.md content has not changed. Skipping update."
          else
            mv "$TEMP_README" README.md
            echo "::set-output name=content_changed::true"
            echo "README.md content has changed. Proceeding with update."
          fi
        # 'yq'가 필요하므로 'Install yq' 스텝이 선행되어야 함
        # 또는 이 스텝 내에서 'curl -L https://github.com/mikefarah/yq/releases/download/v4.x.x/yq_linux_amd64 -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq' 등으로 설치

      # 'yq' 설치 (Generate updated README.md content 스텝에서 yq를 사용하는 경우 이 스텝이 먼저 실행되어야 함)
      - name: Install yq (for YAML parsing in README generation)
        uses: mikefarah/yq@v4 # 'Generate updated README.md content' 스텝 이전에 배치

      # --- Git 설정 및 푸시 로직 (가장 중요하고 견고하게) ---
      - name: Configure Git for automated commit # Git 사용자 정보 설정
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push changes # README.md 변경 사항이 있을 경우에만 커밋 및 푸시
        # 이전 'generate_content' 스텝에서 'content_changed' 출력이 'true'일 때만 실행
        if: steps.generate_content.outputs.content_changed == 'true'
        run: |
          echo "Adding README.md to git..."
          git add README.md # README.md 파일 스테이징

          echo "Checking if there are actual changes to commit..."
          # `git diff-index --quiet HEAD --`는 작업 디렉토리의 변경 사항이 HEAD 커밋과 다른지 확인합니다.
          # 변경 사항이 없으면 0을 반환, 있으면 1을 반환합니다.
          if git diff-index --quiet HEAD --; then
              echo "No actual changes to commit after staging. Exiting."
              exit 0 # 변경 사항이 없으면 정상 종료
          fi

          echo "Attempting to commit and push changes to README.md..."

          # 1. 원격 'main' 브랜치의 최신 변경 사항 가져오기 (로컬에는 적용 안 함)
          echo "Fetching latest changes from remote/main..."
          git fetch origin main

          # 2. 로컬 변경 사항을 원격 'main'의 최신 상태 위에 리베이스 시도
          #    --autostash: 임시 변경사항을 스태시했다가 리베이스 후 다시 적용
          #    --no-edit: 인터랙티브 리베이스 에디터 열지 않음
          #    || { ... }: rebase 실패 시 대체 명령 실행
          echo "Attempting to rebase local changes onto remote/main..."
          git rebase origin/main --autostash --no-edit || {
            echo "Rebase failed. Attempting to merge remote changes instead."
            # 3. 리베이스 실패 시, 원격 'main' 브랜치와 병합 시도
            #    --no-edit: 병합 커밋 메시지 에디터 열지 않음
            git merge origin/main --no-edit || {
              echo "Error: Both rebase and merge failed due to unresolvable conflicts. Manual intervention is required."
              # 충돌 시 워크플로우를 실패시키고 관리자에게 알림
              exit 1
            }
          }

          # 4. 변경 사항 커밋
          #    'git commit'이 실패할 경우 (예: rebase 과정에서 이미 커밋되거나 변경 사항이 없는 경우),
          #    오류를 무시하고 다음 단계로 진행 (`|| true` 사용)
          echo "Committing changes..."
          git commit -m "Docs: Auto-generate repository analysis report in README.md" || true

          # 5. 최종적으로 변경 사항을 원격 리포지토리로 푸시
          echo "Pushing changes to origin/main..."
          git push origin main
          echo "Successfully pushed README.md updates."
