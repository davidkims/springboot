name: Build & Simulate Finance Transactions

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  finance-docker:
    runs-on: ubuntu-latest

    steps:
    - name: ‚úÖ Checkout Repository
      uses: actions/checkout@v4

    - name: üìÅ Create Disk Slot & Directories
      run: |
        sudo mkdir -p /opt/finance/{credit,check,stock,forex,logs}
        sudo fallocate -l 10G /opt/finance/.disk_slot || sudo dd if=/dev/zero of=/opt/finance/.disk_slot bs=1M count=10240
        sudo chmod -R 777 /opt/finance

    - name: üõ†Ô∏è Generate Project Files
      run: |
        mkdir -p project/init-db
        mkdir -p project/src
        echo "${SCHEMA_SQL}" > project/init-db/schema.sql
        echo "${JAVA_CODE}" > project/src/FinanceApp.java
        echo "${DOCKERFILE_CONTENT}" > project/Dockerfile

    - name: üê≥ Build Docker Image
      run: docker build -t finance-app:latest ./project

    - name: üöÄ Run Finance Transaction Simulation
      run: docker run --rm finance-app:latest

    env:
      SCHEMA_SQL: |
        CREATE TABLE IF NOT EXISTS credit_card_transactions (
          id SERIAL PRIMARY KEY,
          user_id INT,
          amount DECIMAL(10, 2),
          currency VARCHAR(10),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS check_card_transactions (
          id SERIAL PRIMARY KEY,
          user_id INT,
          amount DECIMAL(10, 2),
          currency VARCHAR(10),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS stock_trades (
          id SERIAL PRIMARY KEY,
          user_id INT,
          stock_symbol VARCHAR(10),
          quantity INT,
          price DECIMAL(10, 2),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS forex_trades (
          id SERIAL PRIMARY KEY,
          user_id INT,
          from_currency VARCHAR(10),
          to_currency VARCHAR(10),
          amount DECIMAL(10, 2),
          rate DECIMAL(10, 5),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

      JAVA_CODE: |
        import java.util.Random;

        public class FinanceApp {
            public static void main(String[] args) {
                System.out.println("üöÄ Starting Finance Transaction Simulation...");

                simulateCreditTransaction();
                simulateCheckTransaction();
                simulateStockTrade();
                simulateForexTrade();
            }

            static void simulateCreditTransaction() {
                Random r = new Random();
                System.out.println("üí≥ CreditCard: User#1 spent $" + (r.nextInt(9000) + 100) + " USD");
            }

            static void simulateCheckTransaction() {
                Random r = new Random();
                System.out.println("üí≥ CheckCard: User#2 spent $" + (r.nextInt(5000) + 50) + " KRW");
            }

            static void simulateStockTrade() {
                Random r = new Random();
                System.out.println("üìà Stock: User#3 bought " + r.nextInt(50) + " shares of AAPL at $" + (r.nextDouble() * 100 + 100));
            }

            static void simulateForexTrade() {
                Random r = new Random();
                double amount = r.nextInt(500) + 50;
                double rate = 1.13;
                System.out.println("üí± Forex: User#4 exchanged $" + amount + " USD to EUR at rate " + rate);
            }
        }

      DOCKERFILE_CONTENT: |
        FROM openjdk:17
        WORKDIR /app
        COPY ./src ./src
        COPY ./init-db /docker-entrypoint-initdb.d
        RUN javac ./src/FinanceApp.java
        CMD ["java", "-cp", "./src", "FinanceApp"]
