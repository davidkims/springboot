name: Finance Transaction Simulation with Reports

on:
  push:
    branches: [main]
  workflow_dispatch:

  contents: write
  packages: write
  security-events: write  # SARIF 업로드를 위한 권한

  finance-simulation:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 📁 Create Project & Disk Slot Directories
      run: |
        sudo mkdir -p /opt/finance/{credit,check,stock,forex,logs,reports}
        sudo fallocate -l 10G /opt/finance/.disk_slot || sudo dd if=/dev/zero of=/opt/finance/.disk_slot bs=1M count=10240
        sudo chmod -R 777 /opt/finance
        mkdir -p project/init-db
        mkdir -p project/src
        mkdir -p output
        mkdir -p reports

    - name: 🛠️ Generate Source Files
      run: |
        echo "${{ env.SCHEMA_SQL }}" > project/init-db/schema.sql
        echo "${{ env.JAVA_CODE }}" > project/src/FinanceApp.java
        echo "${{ env.DOCKERFILE_CONTENT }}" > project/Dockerfile

    - name: 🐳 Build Docker Image
      run: docker build -t finance-app:latest ./project

    - name: 🚀 Run Simulation and Capture Output
      run: docker run --rm finance-app:latest > output/transactions.log

    - name: 📊 Generate CSV, Markdown, SARIF Reports
      run: |
        echo "type,user,detail" > reports/transactions.csv
        grep "CreditCard" output/transactions.log | sed 's/💳 CreditCard:/credit,1,/g' >> reports/transactions.csv
        grep "CheckCard" output/transactions.log | sed 's/💳 CheckCard:/check,2,/g' >> reports/transactions.csv
        grep "Stock" output/transactions.log | sed 's/📈 Stock:/stock,3,/g' >> reports/transactions.csv
        grep "Forex" output/transactions.log | sed 's/💱 Forex:/forex,4,/g' >> reports/transactions.csv

        echo "## 💰 거래 시뮬레이션 요약 보고서" > reports/transactions.md
        cat output/transactions.log >> reports/transactions.md

        echo '{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "FinanceSimulation",
          "version": "1.0.0",
          "informationUri": "https://github.com/davidkims/my_real_study",
          "rules": []
        }
      },
      "results": [' > reports/transactions.sarif

        awk '/CreditCard|CheckCard|Stock|Forex/ {
          gsub(/"/, "\\\"", $0);
          printf("{\"ruleId\":\"finance-log\",\"level\":\"note\",\"message\":{\"text\":\"%s\"}},\n", $0);
        }' output/transactions.log | sed '$ s/,$//' >> reports/transactions.sarif

        echo '      ]
    }
  ]
}' >> reports/transactions.sarif

    - name: 📦 Upload Reports as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: finance-reports
        path: reports/
        retention-days: 7

    - name: 🛡 Upload SARIF to Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/transactions.sarif
        category: finance-simulation

    env:
      SCHEMA_SQL: |
        CREATE TABLE IF NOT EXISTS credit_card_transactions (
          id SERIAL PRIMARY KEY,
          user_id INT,
          amount DECIMAL(10, 2),
          currency VARCHAR(10),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS check_card_transactions (
          id SERIAL PRIMARY KEY,
          user_id INT,
          amount DECIMAL(10, 2),
          currency VARCHAR(10),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS stock_trades (
          id SERIAL PRIMARY KEY,
          user_id INT,
          stock_symbol VARCHAR(10),
          quantity INT,
          price DECIMAL(10, 2),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS forex_trades (
          id SERIAL PRIMARY KEY,
          user_id INT,
          from_currency VARCHAR(10),
          to_currency VARCHAR(10),
          amount DECIMAL(10, 2),
          rate DECIMAL(10, 5),
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

      JAVA_CODE: |
        import java.util.Random;
        public class FinanceApp {
            public static void main(String[] args) {
                System.out.println("🚀 Starting Finance Transaction Simulation...");
                simulateCreditTransaction();
                simulateCheckTransaction();
                simulateStockTrade();
                simulateForexTrade();
            }
            static void simulateCreditTransaction() {
                Random r = new Random();
                System.out.println("💳 CreditCard: User#1 spent $" + (r.nextInt(9000) + 100) + " USD");
            }
            static void simulateCheckTransaction() {
                Random r = new Random();
                System.out.println("💳 CheckCard: User#2 spent $" + (r.nextInt(5000) + 50) + " KRW");
            }
            static void simulateStockTrade() {
                Random r = new Random();
                System.out.println("📈 Stock: User#3 bought " + r.nextInt(50) + " shares of AAPL at $" + (r.nextDouble() * 100 + 100));
            }
            static void simulateForexTrade() {
                Random r = new Random();
                double amount = r.nextInt(500) + 50;
                double rate = 1.13;
                System.out.println("💱 Forex: User#4 exchanged $" + amount + " USD to EUR at rate " + rate);
            }
        }

      DOCKERFILE_CONTENT: |
        FROM openjdk:17
        WORKDIR /app
        COPY ./src ./src
        COPY ./init-db /docker-entrypoint-initdb.d
        RUN javac ./src/FinanceApp.java
        CMD ["java", "-cp", "./src", "FinanceApp"]
