name: Docker 이미지 빌드 및 배포 (파일 생성 포함)

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 * * * *' # 필요에 따라 주석 해제하여 매시간 실행 (자동 누적)

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3 # 최신 버전 사용 권장

      # ==========================================================
      # 1. 파일 생성 (예시: Dockerfile 및 간단한 스크립트)
      #    주의: 실제 프로젝트에서는 이 파일들이 리포지토리에 미리 커밋되어 있어야 합니다.
      #    이 스텝은 "파일 생성"의 개념을 보여주기 위함입니다.
      #    만약 외부 URL에서 파일을 다운로드해야 한다면 'run' 블록에 curl/wget 사용.
      # ==========================================================
      - name: Dockerfile 생성 (예시)
        run: |
          echo "FROM ubuntu:22.04" > Dockerfile
          echo "LABEL maintainer='your.email@example.com'" >> Dockerfile
          echo "RUN apt-get update && apt-get install -y curl" >> Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY . /app" >> Dockerfile
          echo "CMD [\"echo\", \"Hello from Docker!\"]" >> Dockerfile
          echo "Dockerfile이 생성되었습니다." # 번역 오류 수정: "인증을 받았습니다" -> "생성되었습니다"

      - name: 예시 스크립트 생성 (install.sh)
        run: |
          mkdir -p scripts
          echo "#!/bin/bash" > scripts/install.sh
          echo "echo '스크립트 실행: 애플리케이션 설치 중...'" >> scripts/install.sh # 번역 오류 수정: "텍스트 실행: 인력 설치 중..." -> "스크립트 실행: 애플리케이션 설치 중..."
          echo "mkdir -p /opt/my_app_data" >> scripts/install.sh
          echo "echo '애플리케이션 데이터 디렉토리 생성 완료.'" >> scripts/install.sh # 번역 오류 수정: "애플리케이션 컨퍼런스 생성하기." -> "애플리케이션 데이터 디렉토리 생성 완료."
          chmod +x scripts/install.sh
          echo "scripts/install.sh가 생성되었습니다." # 번역 오류 수정: "만들어졌습니다" -> "생성되었습니다"

      # ==========================================================
      # 2. AWS ECR 자격 증명 존재 여부 확인
      # ==========================================================
      - name: AWS 자격 증명 확인
        id: check_aws_credentials
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && [ -n "${{ secrets.ECR_REGISTRY_URL }}" ]; then
            echo "::set-output name=aws_credentials_exist::true"
          else
            echo "::set-output name=aws_credentials_exist::false"
          fi

      # ==========================================================
      # 3. Docker Hub 자격 증명 존재 여부 확인
      # ==========================================================
      - name: Docker Hub 자격 증명 확인
        id: check_docker_hub_credentials
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "::set-output name=docker_hub_credentials_exist::true"
          else
            echo "::set-output name=docker_hub_credentials_exist::false"
          fi

      # ==========================================================
      # 4. SSH 호스트 Secret 존재 여부 확인 (새로 추가)
      # ==========================================================
      - name: SSH Host Secret 확인
        id: check_ssh_host
        run: |
          if [ -n "${{ secrets.SSH_HOST }}" ]; then
            echo "::set-output name=ssh_host_exist::true"
          else
            echo "::set-output name=ssh_host_exist::false"
          fi

      # ==========================================================
      # 5. AWS ECR 로그인 및 푸시 (AWS 자격 증명 존재 시)
      # ==========================================================
      - name: AWS 자격 증명 구성
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 # 또는 ECR이 위치한 리전으로 변경

      - name: Amazon ECR에 로그인
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'true'
        uses: docker/login-action@v3
        with:
          ecr: auto

      - name: Docker 이미지를 빌드하고 ECR에 푸시합니다.
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'true'
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 리포지토리 루트에 있다면 '.' 유지
          # context: ./docker # Dockerfile이 'docker/' 폴더 안에 있다면 이 줄을 사용
          # file: ./docker/Dockerfile.prod # Dockerfile 이름이 'Dockerfile'이 아니거나 서브 디렉토리에 있다면 이 줄을 사용
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY_URL }}/my-ecr-repo:latest
            ${{ secrets.ECR_REGISTRY_URL }}/my-ecr-repo:${{ github.sha }}
          cache-from: type=gha # GitHub Actions 캐시 사용 (빌드 속도 향상)
          cache-to: type=gha,mode=max # GitHub Actions 캐시 저장

      - name: Amazon ECR에서 로그아웃(선택 사항)
        if: always() && steps.check_aws_credentials.outputs.aws_credentials_exist == 'true'
        uses: docker/login-action@v3
        with:
          ecr: auto
          logout: true

      # ==========================================================
      # 6. Docker Hub 로그인 및 푸시 (AWS 자격 증명 없음 + Docker Hub 자격 증명 있음)
      # ==========================================================
      - name: Docker Hub에 로그인 (AWS 자격 증명이 없는 경우 대체)
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'false' && steps.check_docker_hub_credentials.outputs.docker_hub_credentials_exist == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker 이미지를 빌드하고 Docker Hub에 푸시합니다(폴백)
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'false' && steps.check_docker_hub_credentials.outputs.docker_hub_credentials_exist == 'true'
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 리포지토리 루트에 있다면 '.' 유지
          # context: ./docker # Dockerfile이 'docker/' 폴더 안에 있다면 이 줄을 사용
          # file: ./docker/Dockerfile.prod # Dockerfile 이름이 'Dockerfile'이 아니거나 서브 디렉토리에 있다면 이 줄을 사용
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-dockerhub-repo:latest
            ${{ secrets.DOCKER_USERNAME }}/my-dockerhub-repo:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ==========================================================
      # 7. 로컬 빌드 전용 (ECR/Docker Hub 자격 증명 모두 없음)
      # ==========================================================
      - name: 로컬 빌드 전용 (ECR/Docker Hub 자격 증명이 없는 경우)
        if: steps.check_aws_credentials.outputs.aws_credentials_exist == 'false' && steps.check_docker_hub_credentials.outputs.docker_hub_credentials_exist == 'false'
        run: |
          echo "AWS ECR 또는 Docker Hub 자격 증명을 찾을 수 없습니다. Docker 이미지를 로컬에서만 빌드합니다."
          # Dockerfile 경로를 여기에 직접 지정
          docker build -t my-local-image:latest . # Dockerfile이 리포지토리 루트에 있다면 '.' 유지
          # docker build -t my-local-image:latest -f ./docker/Dockerfile ./docker # 'docker/' 폴더에 있다면 이렇게 수정
          echo "로컬 빌드가 완료되었습니다. 이미지가 어떤 레지스트리에도 푸시되지 않았습니다."

      # ==========================================================
      # 8. 배포 (옵션)
      # ==========================================================
      - name: 서버에 배포 (선택 사항 - SSH 또는 배포 스크립트 실행)
        # 배포 조건: ECR 또는 Docker Hub 중 하나라도 성공적으로 이미지를 푸시했고, SSH_HOST Secret이 존재할 때
        if: (steps.check_aws_credentials.outputs.aws_credentials_exist == 'true' || steps.check_docker_hub_credentials.outputs.docker_hub_credentials_exist == 'true') && steps.check_ssh_host.outputs.ssh_host_exist == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "--- 서버에 최신 Docker 이미지 배포 시작 ---"
            
            # ECR 또는 Docker Hub 이미지 경로를 동적으로 선택
            IMAGE_TAG=""
            if [ "${{ steps.check_aws_credentials.outputs.aws_credentials_exist }}" == "true" ]; then
              IMAGE_TAG="${{ secrets.ECR_REGISTRY_URL }}/my-ecr-repo:latest"
            elif [ "${{ steps.check_docker_hub_credentials.outputs.docker_hub_credentials_exist }}" == "true" ]; then
              IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/my-dockerhub-repo:latest"
            else
              echo "배포할 이미지 소스를 찾을 수 없습니다. 배포를 건너뜜."
              exit 0 # 이미지가 푸시되지 않았으므로 배포는 건너뛰지만 실패로 처리하지 않음
            fi

            echo "풀 받을 이미지: $IMAGE_TAG"
            cd /path/to/your/app_on_server # 서버의 애플리케이션 디렉토리로 이동
            
            # 기존 컨테이너 중지 및 삭제 (멱등성을 위해, 컨테이너가 없어도 오류 없이 진행)
            docker stop my_application_container || true
            docker rm my_application_container || true
            
            # 최신 이미지 풀 및 컨테이너 실행
            docker pull $IMAGE_TAG
            docker run -d --name my_application_container -p 80:8080 $IMAGE_TAG # -p 옵션은 예시, 실제 포트에 맞게 변경
            
            # 오래된 이미지 정리 (디스크 공간 확보)
            docker image prune -f
            echo "--- 서버 배포 완료 ---" # 번역 오류 수정: "서버 플러그인" -> "서버 배포 완료"
