name: 🧾 금융 거래 자동화 (PDF 영수증 포함)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  auto-finance:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 저장소 체크아웃
        uses: actions/checkout@v4

      - name: 📁 echo 기반 코드 파일 및 디렉토리 생성
        run: |
          echo "📂 디렉토리 생성"
          mkdir -p app output

          echo "📄 ledger.py 생성 시작"
          echo 'import os, csv, time, random, datetime' > app/ledger.py
          echo 'import psycopg2, mysql.connector' >> app/ledger.py
          echo 'from fpdf import FPDF' >> app/ledger.py
          echo 'banks = ["한국은행", "카카오뱅크", "신한은행"]' >> app/ledger.py
          echo 'companies = ["삼성전자", "LG화학", "현대모비스"]' >> app/ledger.py
          echo 'logistics = ["반도체", "이차전지", "자동차부품"]' >> app/ledger.py
          echo 'def wait(): time.sleep(10)' >> app/ledger.py
          echo 'def connect_pg(): return psycopg2.connect(host="postgres", dbname="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo 'def connect_my(): return mysql.connector.connect(host="mysql", database="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo 'def generate():' >> app/ledger.py
          echo ' rows = []' >> app/ledger.py
          echo ' now = datetime.datetime.now().isoformat()' >> app/ledger.py
          echo ' for _ in range(50):' >> app/ledger.py
          echo '  bank = random.choice(banks)' >> app/ledger.py
          echo '  company = random.choice(companies)' >> app/ledger.py
          echo '  item = random.choice(logistics)' >> app/ledger.py
          echo '  amount = round(random.uniform(10000, 50000000), 2)' >> app/ledger.py
          echo '  currency = random.choice(["KRW", "USD"])' >> app/ledger.py
          echo '  status = random.choice(["성공", "실패"])' >> app/ledger.py
          echo '  memo = f"{bank}-{company} {item} 거래"' >> app/ledger.py
          echo '  rows.append([now, bank, company, item, amount, currency, status, memo])' >> app/ledger.py
          echo ' return rows' >> app/ledger.py
          echo 'def save_csv(rows):' >> app/ledger.py
          echo ' os.makedirs("output", exist_ok=True)' >> app/ledger.py
          echo ' with open("output/transactions.csv", "w", encoding="utf-8", newline="") as f:' >> app/ledger.py
          echo '  writer = csv.writer(f)' >> app/ledger.py
          echo '  writer.writerow(["시간", "은행", "기업", "물류항목", "금액", "통화", "상태", "설명"])' >> app/ledger.py
          echo '  writer.writerows(rows)' >> app/ledger.py
          echo 'def save_pg(rows):' >> app/ledger.py
          echo ' conn = connect_pg(); cur = conn.cursor()' >> app/ledger.py
          echo ' cur.execute("CREATE TABLE IF NOT EXISTS 거래 (시간 TEXT, 은행 TEXT, 기업 TEXT, 물류항목 TEXT, 금액 REAL, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo ' cur.executemany("INSERT INTO 거래 VALUES (%s,%s,%s,%s,%s,%s,%s,%s)", rows)' >> app/ledger.py
          echo ' conn.commit(); conn.close()' >> app/ledger.py
          echo 'def save_my(rows):' >> app/ledger.py
          echo ' conn = connect_my(); cur = conn.cursor()' >> app/ledger.py
          echo ' cur.execute("CREATE TABLE IF NOT EXISTS 거래 (시간 TEXT, 은행 TEXT, 기업 TEXT, 물류항목 TEXT, 금액 FLOAT, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo ' cur.executemany("INSERT INTO 거래 VALUES (%s,%s,%s,%s,%s,%s,%s,%s)", rows)' >> app/ledger.py
          echo ' conn.commit(); conn.close()' >> app/ledger.py
          echo 'def generate_pdfs(rows):' >> app/ledger.py
          echo ' os.makedirs("output/receipts", exist_ok=True)' >> app/ledger.py
          echo ' for i, row in enumerate(rows):' >> app/ledger.py
          echo '  if row[6] != "성공": continue' >> app/ledger.py
          echo '  pdf = FPDF(); pdf.add_page(); pdf.set_font("Arial", size=12)' >> app/ledger.py
          echo '  lines = [f"영수증 번호: {i+1:03}", f"시간: {row[0]}", f"은행: {row[1]}", f"기업: {row[2]}", f"물류: {row[3]}", f"금액: {row[4]} {row[5]}", f"상태: {row[6]}", f"설명: {row[7]}"]' >> app/ledger.py
          echo '  for line in lines: pdf.cell(200, 10, txt=line, ln=1)' >> app/ledger.py
          echo '  pdf.output(f"output/receipts/receipt_{i+1:03}.pdf")' >> app/ledger.py
          echo 'if __name__ == "__main__": wait(); rows = generate(); save_csv(rows); save_pg(rows); save_my(rows); generate_pdfs(rows)' >> app/ledger.py

          echo "📄 Dockerfile 생성"
          echo 'FROM python:3.10-slim' > app/Dockerfile
          echo 'WORKDIR /app' >> app/Dockerfile
          echo 'COPY ledger.py .' >> app/Dockerfile
          echo 'RUN apt-get update && apt-get install -y gcc libpq-dev libjpeg-dev libfreetype6-dev build-essential' >> app/Dockerfile
          echo 'RUN pip install --no-cache-dir psycopg2 mysql-connector-python fpdf' >> app/Dockerfile
          echo 'CMD ["python", "ledger.py"]' >> app/Dockerfile

          echo "📄 docker-compose.yml 생성"
          echo 'version: "3.9"' > docker-compose.yml
          echo 'services:' >> docker-compose.yml
          echo '  postgres:' >> docker-compose.yml
          echo '    image: postgres:14' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      POSTGRES_USER: ledger' >> docker-compose.yml
          echo '      POSTGRES_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      POSTGRES_DB: ledgerdb' >> docker-compose.yml
          echo '    volumes: [pgdata:/var/lib/postgresql/data]' >> docker-compose.yml
          echo '  mysql:' >> docker-compose.yml
          echo '    image: mysql:8' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      MYSQL_ROOT_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      MYSQL_DATABASE: ledgerdb' >> docker-compose.yml
          echo '      MYSQL_USER: ledger' >> docker-compose.yml
          echo '      MYSQL_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '    volumes: [mysqldata:/var/lib/mysql]' >> docker-compose.yml
          echo '  ledger:' >> docker-compose.yml
          echo '    build: ./app' >> docker-compose.yml
          echo '    depends_on: [postgres, mysql]' >> docker-compose.yml
          echo '    volumes: [./output:/app/output]' >> docker-compose.yml
          echo 'volumes:' >> docker-compose.yml
          echo '  pgdata:' >> docker-compose.yml
          echo '  mysqldata:' >> docker-compose.yml

      - name: 🛠️ Docker Compose Build & Start
        run: |
          echo "🔧 Docker Compose Build 시작"
          docker compose build
          echo "🚀 Docker Compose 컨테이너 시작"
          docker compose up -d
          echo "⏳ 컨테이너 초기화 대기"
          sleep 30

      - name: 📤 거래 CSV 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 거래데이터
          path: output/transactions.csv

      - name: 📤 성공 영수증 PDF 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 영수증_PDF
          path: output/receipts/*.pdf
