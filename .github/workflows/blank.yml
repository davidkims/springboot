name: Ledger Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  ledger:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üê≥ Download or Generate Dockerfile
        run: |
          if [ ! -f Dockerfile ]; then
            echo "üì• DockerfileÏù¥ ÏóÜÏäµÎãàÎã§. ÏõêÍ≤©ÏóêÏÑú Îã§Ïö¥Î°úÎìú ÏãúÎèÑ Ï§ë..."
            curl -fsSL https://raw.githubusercontent.com/davidkims/assets/main/finance-ledger/Dockerfile -o Dockerfile || cat <<'EOF' > Dockerfile
FROM mysql:8.0
ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=finance_db
COPY init.sql /docker-entrypoint-initdb.d/
COPY transactions.sql /docker-entrypoint-initdb.d/
EOF
          fi
          echo "‚úÖ Dockerfile ÎÇ¥Ïö©:"
          cat Dockerfile

      - name: üì• Download SQL Scripts or Generate
        run: |
          if [ ! -f init.sql ]; then
            echo "üì• init.sql Îã§Ïö¥Î°úÎìú Ï§ë..."
            curl -fsSL https://raw.githubusercontent.com/davidkims/assets/main/finance-ledger/init.sql -o init.sql || cat <<'EOF' > init.sql
CREATE DATABASE IF NOT EXISTS finance_db;
USE finance_db;
CREATE TABLE IF NOT EXISTS customer_ledger (
  id INT AUTO_INCREMENT PRIMARY KEY,
  customer_id VARCHAR(50),
  transaction_type VARCHAR(20),
  transaction_amount DECIMAL(18, 2),
  currency VARCHAR(10),
  status VARCHAR(20),
  transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
EOF
          fi
          if [ ! -f transactions.sql ]; then
            echo "üì• transactions.sql Îã§Ïö¥Î°úÎìú Ï§ë..."
            curl -fsSL https://raw.githubusercontent.com/davidkims/assets/main/finance-ledger/transactions.sql -o transactions.sql || cat <<'EOF' > transactions.sql
USE finance_db;
INSERT INTO customer_ledger (customer_id, transaction_type, transaction_amount, currency, status) VALUES
("CUST1001", "credit_card", 10200.50, "KRW", "approved"),
("CUST1002", "check_card", 2300.00, "KRW", "pending"),
("CUST1003", "forex", 153000.00, "USD", "completed");
EOF
          fi

      - name: Build Docker Image
        run: docker build -t finance-ledger-db .

      - name: Run MySQL Container
        run: |
          docker run -d --name finance-db -e MYSQL_ROOT_PASSWORD=root -p 3307:3306 finance-ledger-db
          sleep 30

      - name: Backup DB
        run: docker exec finance-db mysqldump -uroot -proot --databases finance_db > backup.sql

      - name: Restore DB
        run: |
          docker run -d --name restore-db -e MYSQL_ROOT_PASSWORD=root -p 3308:3306 mysql:8.0
          sleep 30
          docker cp backup.sql restore-db:/tmp/backup.sql
          docker exec restore-db bash -c "mysql -uroot -proot < /tmp/backup.sql"

      - name: Setup Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install mysql-connector-python pillow

      - name: üì• Download or Generate analyze_logs.py
        run: |
          if [ ! -f analyze_logs.py ]; then
            echo "üì• analyze_logs.py Îã§Ïö¥Î°úÎìú Ï§ë..."
            curl -fsSL https://raw.githubusercontent.com/davidkims/assets/main/finance-ledger/analyze_logs.py -o analyze_logs.py || cat <<'EOF' > analyze_logs.py
import mysql.connector
import csv
conn = mysql.connector.connect(host='127.0.0.1', user='root', password='root', database='finance_db')
cursor = conn.cursor()
cursor.execute('SELECT status, COUNT(*), SUM(transaction_amount) FROM customer_ledger GROUP BY status')
status_stats = cursor.fetchall()
cursor.execute('SELECT transaction_type, COUNT(*), SUM(transaction_amount) FROM customer_ledger GROUP BY transaction_type')
type_stats = cursor.fetchall()
with open('status_stats.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerow(['Status', 'Count', 'Total Amount'])
    writer.writerows(status_stats)
with open('type_stats.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerow(['Transaction Type', 'Count', 'Total Amount'])
    writer.writerows(type_stats)
with open('ledger_analysis.md', 'w') as f:
    f.write('## Ledger Status Summary\n\n')
    f.write('| Status | Count | Total Amount |\n|--------|-------|---------------|\n')
    for row in status_stats:
        f.write(f"| {row[0]} | {row[1]} | {row[2]:,.2f} |\n")
    f.write('\n## Transaction Type Summary\n\n')
    f.write('| Type | Count | Total Amount |\n|------|-------|---------------|\n')
    for row in type_stats:
        f.write(f"| {row[0]} | {row[1]} | {row[2]:,.2f} |\n")
cursor.close()
conn.close()
EOF
          fi

      - name: üì• Download or Generate generate_customer_images.py
        run: |
          if [ ! -f generate_customer_images.py ]; then
            echo "üì• generate_customer_images.py Îã§Ïö¥Î°úÎìú Ï§ë..."
            curl -fsSL https://raw.githubusercontent.com/davidkims/assets/main/finance-ledger/generate_customer_images.py -o generate_customer_images.py || cat <<'EOF' > generate_customer_images.py
import mysql.connector
from PIL import Image, ImageDraw, ImageFont
import os
conn = mysql.connector.connect(host='127.0.0.1', user='root', password='root', database='finance_db')
cursor = conn.cursor()
cursor.execute("SELECT customer_id, transaction_type, transaction_amount, currency, status FROM customer_ledger")
records = cursor.fetchall()
os.makedirs("customer_images", exist_ok=True)
try:
    font = ImageFont.truetype("DejaVuSans-Bold.ttf", 18)
except:
    font = ImageFont.load_default()
for idx, row in enumerate(records):
    customer_id, tx_type, amount, currency, status = row
    img = Image.new("RGB", (500, 200), color="white")
    draw = ImageDraw.Draw(img)
    draw.text((20, 20), f"Customer ID: {customer_id}", font=font, fill="black")
    draw.text((20, 60), f"Transaction Type: {tx_type}", font=font, fill="black")
    draw.text((20, 100), f"Amount: {amount:.2f} {currency}", font=font, fill="black")
    draw.text((20, 140), f"Status: {status}", font=font, fill="blue" if status == "approved" else "red")
    img.save(f"customer_images/customer_{idx+1}.png")
cursor.close()
conn.close()
EOF
          fi

      - name: Copy Scripts to Container
        run: |
          docker cp analyze_logs.py restore-db:/analyze_logs.py
          docker cp generate_customer_images.py restore-db:/generate_customer_images.py

      - name: Run Analysis and Image Generation
        run: |
          docker exec restore-db bash -c "apt-get update && apt-get install -y python3 python3-pip && pip3 install mysql-connector-python pillow && mkdir -p /output && python3 /analyze_logs.py && python3 /generate_customer_images.py && mv *.csv *.md /output/ && cp -r customer_images /output/"
          docker cp restore-db:/output ./output

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ledger-assets
          path: output/
