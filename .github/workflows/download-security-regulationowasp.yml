# .github/workflows/download-and-import-security-regulations.yml
이름: 보안 규정 다운로드 및 가져오기
권한:
  contents: write

on:
  schedule:
    - cron: '0 2 * * 1' # 매주 월요일 02:00 UTC
  workflow_dispatch:

jobs:
  download-import:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: github
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: regulationsDB
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U github"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: github
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: regulationsDB
    steps:
      - name: 🔄 체크아웃 저장소(전체 기록)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: 🗂 디렉토리 준비
        run: |
          echo "[단계] 디렉토리 생성"
          mkdir -p regulations .github/scripts
          echo "[완료] 디렉토리 준비됨"

      - name: 🔽 CVSS v3.1 사양 다운로드
        continue-on-error: true
        run: |
          echo "[단계] CVSS v3.1 사양 다운로드"
          URL="https://www.first.org/cvss/v3-1/specification-document"
          OUT="regulations/CVSS_v3.1_사양_$(date +'%Y-%m-%d').pdf"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT"; then
            echo "[완료] CVSS 사양 → $OUT"
          else
            echo "[건너뛰기] CVSS 사양을 찾을 수 없습니다"
          fi

      - name: 🔽 CVE 수정 피드 다운로드
        continue-on-error: true
        run: |
          echo "[단계] CVE 수정 피드 다운로드"
          URL="https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz"
          OUT_GZ="regulations/CVE_수정_$(date +'%Y-%m-%d').json.gz"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT_GZ"; then
            echo "[완료] CVE 피드 → $OUT_GZ"
            gunzip -f "$OUT_GZ"
            echo "[완료] regulation/CVE_Modified_$(date +'%Y-%m-%d').json으로 압축 해제됨"
          else
            echo "[건너뛰기] CVE 피드를 사용할 수 없습니다"
          fi

      - name: 🔽 ISRM 가이드라인 다운로드
        continue-on-error: true
        run: |
          echo "[단계] ISRM 가이드라인 다운로드(NIST SP800-30 Rev.1)"
          URL="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-30r1.pdf"
          OUT="regulations/NIST_SP800-30_Rev1_$(date +'%Y-%m-%d').pdf"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT"; then
            echo "[완료] ISRM 가이드라인 → $OUT"
          else
            echo "[건너뛰기] ISRM 가이드라인을 찾을 수 없습니다"
          fi

      - name: 🔽 OWASP Top Ten 2013 다운로드
        continue-on-error: true
        run: |
          echo "[단계] OWASP Top Ten 2013 다운로드"
          URL="https://raw.githubusercontent.com/OWASP/Top10/master/2013/OWASP%20Top%2010%20-%202013.pdf"
          OUT="regulations/OWASP_Top_Ten_2013_$(date +'%Y-%m-%d').pdf"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT"; then
            echo "[완료] OWASP 2013 → $OUT"
          else
            echo "[건너뛰기] OWASP 2013을 사용할 수 없습니다"
          fi

      - name: 🔽 OWASP Top Ten 2017 다운로드
        continue-on-error: true
        run: |
          echo "[단계] OWASP Top Ten 2017 다운로드"
          URL="https://raw.githubusercontent.com/OWASP/Top10/master/2017/OWASP%20Top%2010-2017%20%28en%29.pdf"
          OUT="regulations/OWASP_Top_Ten_2017_$(date +'%Y-%m-%d').pdf"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT"; then
            echo "[완료] OWASP 2017 → $OUT"
          else
            echo "[건너뛰기] OWASP 2017을 사용할 수 없습니다"
          fi

      - name: 🔽 OWASP Top Ten 2021 다운로드
        continue-on-error: true
        run: |
          echo "[단계] OWASP Top Ten 2021 다운로드"
          URL="https://owasp.org/www-chapter-minneapolis-st-paul/download/20211216_OWASP-MSP_OWASP_Top_Ten_2021.pdf?raw=true"
          OUT="regulations/OWASP_Top_Ten_2021_$(date +'%Y-%m-%d').pdf"
          if curl --proto '=https' --tlsv1.2 -fSL "$URL" -o "$OUT"; then
            echo "[완료] OWASP 2021 → $OUT"
          else
            echo "[건너뛰기] OWASP 2021을 사용할 수 없습니다"
          fi

      - name: 🔄 원격 메인과 동기화
        run: |
          echo "[단계] origin/main과 동기화"
          git fetch origin main
          git rebase origin/main
          echo "[완료] 동기화됨"

      - name: 🐍 가져오기 스크립트 생성
        run: |
          echo "[단계] DB 가져오기 스크립트 생성"
          cat << 'EOF' > .github/scripts/import_regulations.py
          #!/usr/bin/env python3
          import os
          import psycopg2
          from psycopg2 import sql
          
          def log(msg):
              print(f"[가져오기] {msg}")
          
          def import_regulations():
              log("데이터베이스에 연결 중입니다")
              conn = psycopg2.connect(
                  host=os.environ['DB_HOST'],
                  port=os.environ['DB_PORT'],
                  dbname=os.environ['DB_NAME'],
                  user=os.environ['DB_USER'],
                  password=os.environ['DB_PASSWORD']
              )
              cur = conn.cursor()
              
              log("규정 테이블이 존재하는지 확인")
              cur.execute("""
                CREATE TABLE IF NOT EXISTS regulations (
                  id SERIAL PRIMARY KEY,
                  name TEXT NOT NULL,
                  date DATE NOT NULL,
                  content BYTEA
                );
              """)
              log("테이블 준비됨")
              
              for fname in os.listdir('regulations'):
                  path = os.path.join('regulations', fname)
                  log(f"{fname}을(를) 가져오는 중")
                  with open(path, 'rb') as f:
                      blob = f.read()
                  name = os.path.splitext(fname)[0]
                  date_str = fname.split('_')[-1].split('.')[0]
                  cur.execute(
                      sql.SQL("INSERT INTO regulations (name, date, content) VALUES (%s, %s, %s)"),
                      (name, date_str, psycopg2.Binary(blob))
                  )
                  log(f"{fname}을 삽입했습니다")
              
              conn.commit()
              log("커밋 완료")
              cur.close()
              conn.close()
              log("연결이 닫혔습니다.")

          if __name__ == "__main__":
              import_regulations()
          EOF
          echo "[완료] import_regulations.py가 생성되었습니다"

      - name: 🐍 PostgreSQL로 규정 가져오기
        run: |
          echo "[Step] DB로 파일 가져오기"
          python .github/scripts/import_regulations.py
          echo "[완료] 가져오기 완료"

      - name: 🔄 변경 사항 커밋 및 푸시
        run: |
          echo "[Step] 업데이트 커밋 및 푸시"
          git config user.name "github-actions[봇]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add regulation .github/scripts/import_regulations.py
          if git diff --quiet; then
            echo "[건너뛰기] 커밋할 변경 사항이 없습니다"
          else
            git commit -m "작업: 보안 규정 다운로드 및 가져오기"
            git push
            echo "[완료] 변경 사항이 푸시되었습니다."
          fi
