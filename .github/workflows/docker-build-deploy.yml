name: Build & Deploy finance-transactions with DB Backup

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성
        run: |
          echo "📦 requirements.txt 생성"
          echo "flask" | tee requirements.txt
          echo "python-dotenv" | tee -a requirements.txt
          echo "psycopg2-binary" | tee -a requirements.txt
          echo "SQLAlchemy" | tee -a requirements.txt

      - name: ⚙️ .env 생성
        run: |
          echo "⚙️ .env 생성"
          echo "FLASK_ENV=production" | tee .env
          echo "APP_NAME=FinanceTransactions" | tee -a .env
          echo "DEBUG=False" | tee -a .env
          echo "POSTGRES_DB=finance" | tee -a .env
          echo "POSTGRES_USER=postgres" | tee -a .env
          echo "POSTGRES_PASSWORD=postgres123" | tee -a .env
          echo "DB_HOST=db" | tee -a .env
          echo "DB_PORT=5432" | tee -a .env

      - name: 📄 app.py 생성
        run: |
          echo "📄 app.py 생성"
          echo 'from flask import Flask, request, jsonify' | tee app.py
          echo 'from flask_sqlalchemy import SQLAlchemy' | tee -a app.py
          echo 'from dotenv import load_dotenv' | tee -a app.py
          echo 'import os' | tee -a app.py
          echo '' | tee -a app.py
          echo 'load_dotenv()' | tee -a app.py
          echo 'app = Flask(__name__)' | tee -a app.py
          echo '' | tee -a app.py
          echo 'DB_URI = f"postgresql://{os.getenv(\"POSTGRES_USER\")}:{os.getenv(\"POSTGRES_PASSWORD\")}@{os.getenv(\"DB_HOST\")}:{os.getenv(\"DB_PORT\")}/{os.getenv(\"POSTGRES_DB\")}"' | tee -a app.py
          echo 'app.config["SQLALCHEMY_DATABASE_URI"] = DB_URI' | tee -a app.py
          echo 'db = SQLAlchemy(app)' | tee -a app.py
          echo '' | tee -a app.py
          echo 'class Transaction(db.Model):' | tee -a app.py
          echo '    id = db.Column(db.Integer, primary_key=True)' | tee -a app.py
          echo '    amount = db.Column(db.Float)' | tee -a app.py
          echo '    currency = db.Column(db.String(10))' | tee -a app.py
          echo '    status = db.Column(db.String(20))' | tee -a app.py
          echo '' | tee -a app.py
          echo '@app.before_first_request' | tee -a app.py
          echo 'def create_tables():' | tee -a app.py
          echo '    db.create_all()' | tee -a app.py
          echo '' | tee -a app.py
          echo '@app.route("/", methods=["GET"])' | tee -a app.py
          echo 'def index():' | tee -a app.py
          echo '    return jsonify({"status": "success", "message": f"{os.getenv(\"APP_NAME\")} is running!"})' | tee -a app.py
          echo '' | tee -a app.py
          echo '@app.route("/transaction", methods=["POST"])' | tee -a app.py
          echo 'def transaction():' | tee -a app.py
          echo '    try:' | tee -a app.py
          echo '        data = request.get_json(force=True)' | tee -a app.py
          echo '        tx = Transaction(**data)' | tee -a app.py
          echo '        db.session.add(tx)' | tee -a app.py
          echo '        db.session.commit()' | tee -a app.py
          echo '        return jsonify({"status": "success", "message": "Saved", "data": data})' | tee -a app.py
          echo '    except Exception as e:' | tee -a app.py
          echo '        return jsonify({"status": "error", "message": str(e)}), 400' | tee -a app.py
          echo '' | tee -a app.py
          echo 'if __name__ == "__main__":' | tee -a app.py
          echo '    app.run(host="0.0.0.0", port=5000)' | tee -a app.py

      - name: 🐳 Docker 설치
        run: |
          echo "🐳 Docker 설치 및 확인"
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          echo "🐘 PostgreSQL 컨테이너 실행"
          docker run -d \
            --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 \
            postgres:15
          echo "⏳ DB 초기화 대기 중..."
          sleep 20

      - name: 🏗️ Docker 이미지 빌드
        run: |
          echo "🏗️ Docker 이미지 빌드"
          docker build -t finance-transactions:latest .
          docker image ls

      - name: 🚀 Flask 앱 컨테이너 실행
        run: |
          echo "🚀 Flask 앱 실행"
          docker run -d \
            --name finance-transactions \
            --link db \
            --env-file .env \
            -p 8080:5000 \
            finance-transactions:latest

      - name: 🗄️ DB 백업 스크립트 생성 및 실행
        run: |
          echo "🗄️ DB 백업 스크립트 생성"
          echo "#!/bin/bash" | tee backup.sh
          echo "mkdir -p backup" | tee -a backup.sh
          echo "TIMESTAMP=\$(date +%Y%m%d%H%M%S)" | tee -a backup.sh
          echo "docker exec db pg_dump -U postgres -d finance > backup/backup-\$TIMESTAMP.sql" | tee -a backup.sh
          chmod +x backup.sh
          ./backup.sh
          ls -lh backup

      - name: 📦 GitHub Release 업로드
        uses: softprops/action-gh-release@v2
        with:
          name: "📦 PostgreSQL DB Backup"
          tag_name: "db-backup-${{ github.run_id }}"
          files: backup/*.sql
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}

      - name: 🧹 정리
        if: always()
        run: |
          echo "🧹 정리 시작"
          docker ps -a
          docker volume prune -f || true
          echo "🧹 정리 완료"
