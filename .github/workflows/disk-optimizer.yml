name: Disk & Cache Optimizer

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  optimize:
    runs-on: ubuntu-latest # Using the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Always use the latest stable version of actions

      # --- Disk Optimization & Cleanup ---
      # This section focuses on freeing up disk space on the runner before and during the build.
      
      - name: Report initial disk usage
        run: |
          echo "Initial disk usage:"
          df -h

      - name: Clean up existing Docker resources (if any)
        # This is crucial for runners that might have lingering Docker images/volumes from previous runs.
        # `--all` removes all unused images (not just dangling), `--force` avoids confirmation,
        # `--volumes` removes unused volumes. Use with caution but it's effective for fresh starts.
        run: |
          echo "Pruning unused Docker images, containers, volumes, and build cache..."
          docker system prune --all --force --volumes
          echo "Disk usage after Docker prune:"
          df -h

      - name: Create cache directory if it doesn't exist
        # This step is critical to prevent the "Path Validation Error".
        # Ensure the path here matches the 'path' in your caching steps.
        run: |
          mkdir -p ~/.npm # For Node.js projects, create the npm cache directory
          # Add other cache directories here if your project uses them, e.g.:
          # mkdir -p ~/.m2/repository # For Maven
          # mkdir -p ~/.cache/pip     # For Python pip cache
          echo "Cache directories ensured."

      # --- Cache Optimization (for Speed) ---
      # Caching dependencies significantly speeds up subsequent runs.

      - name: Restore dependencies cache
        uses: actions/cache@v4 # Use the latest stable version for caching
        with:
          path: ~/.npm # The path where your package manager caches dependencies
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }} # Key based on OS and project lock file
          restore-keys: |
            ${{ runner.os }}-npm- # Fallback key if exact match isn't found

      # --- Build Process (where your main work happens) ---
      # Assuming you have a build step that uses your dependencies

      - name: Install Node.js dependencies (example)
        # This step would typically run after cache restore.
        # If the cache hit, this step will be much faster or even skipped by npm/yarn.
        run: |
          # npm ci # For clean installs based on package-lock.json
          # npm install # For general installs
          echo "Dependencies installed." # Replace with your actual build/install command

      # --- Custom Disk Optimization Script Execution ---
      # For project-specific cleanup, like removing logs or temporary build files.

      - name: Run custom disk optimization script
        # Ensure your optimize_disk.sh script has execute permissions.
        run: |
          chmod +x scripts/optimize_disk.sh
          bash scripts/optimize_disk.sh .github # Pass specific directories/arguments if needed
          echo "Custom disk optimization script executed."
          echo "Disk usage after custom script:"
          df -h

      # --- Cache Saving (for Speed) ---
      # Save the cache only if the build was successful to avoid caching broken states.

      - name: Save dependencies cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        # Only save cache if the previous steps succeeded
        if: success()
