name: Apply MySQL SQL Scripts

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

env:
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

jobs:
  apply_sql:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Git 리포지토리 체크아웃

      - name: Install MySQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client # MySQL 클라이언트 설치

      - name: Wait for MySQL to be ready (optional, but recommended)
        run: |
          for i in {1..30}; do
            mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1" &> /dev/null
            if [ $? -eq 0 ]; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done
          mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1" || { echo "MySQL not ready after timeout!"; exit 1; }

      - name: Execute schema.sql
        run: |
          if [ -f ./sql/schema.sql ]; then # sql/schema.sql 파일이 존재하는지 확인
            mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE < ./sql/schema.sql
            echo "schema.sql executed successfully."
          else
            echo "sql/schema.sql not found, skipping."
          fi
        env:
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }} # 비밀번호는 직접 노출되지 않도록 env에 명시적으로 전달

      - name: Execute data.sql
        run: |
          if [ -f ./sql/data.sql ]; then # sql/data.sql 파일이 존재하는지 확인
            mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE < ./sql/data.sql
            echo "data.sql executed successfully."
          else
            echo "sql/data.sql not found, skipping."
          fi
        env:
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
