name: PostgreSQL DB 백업 및 S3 업로드

on:
  workflow_dispatch: # GitHub UI에서 수동 실행 가능하도록 설정

jobs:
  backup_postgres:
    runs-on: ubuntu-latest

    # 환경 변수 정의
    env:
      DB_HOST: your_db_host        # PostgreSQL 호스트 IP 또는 도메인
      DB_PORT: 5432              # PostgreSQL 포트 (기본 5432)
      DB_USER: your_db_user      # PostgreSQL 사용자명
      DB_NAME: your_db_name      # 백업할 데이터베이스 이름
      PGPASSWORD: your_db_password # PostgreSQL 사용자 비밀번호
      
      AWS_REGION: ap-northeast-2 # S3 버킷이 위치한 AWS 리전
      S3_BUCKET_NAME: your-s3-backup-bucket # 백업 파일을 업로드할 S3 버킷 이름

    steps:
      - name: 📦 사전 준비: PostgreSQL 클라이언트 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: 🕒 타임스탬프 및 백업 파일 경로 설정
        id: set_vars # 이 단계의 출력 값을 참조하기 위한 ID
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_FILE_NAME="database_backup_${TIMESTAMP}.sql"
          
          # 백업 파일을 저장할 임시 디렉토리 생성 (runner 환경)
          mkdir -p /tmp/db_backups
          BACKUP_FILE_PATH="/tmp/db_backups/${BACKUP_FILE_NAME}"
          
          echo "BACKUP_FILE_PATH=${BACKUP_FILE_PATH}" >> "$GITHUB_OUTPUT"
          echo "BACKUP_FILE_NAME=${BACKUP_FILE_NAME}" >> "$GITHUB_OUTPUT"
          echo "TIMESTAMP=${TIMESTAMP}" >> "$GITHUB_OUTPUT" # 필요 시 사용

      - name: 💾 PostgreSQL 데이터베이스 백업 (pg_dump)
        run: |
          # 환경 변수 PGPASSWORD를 사용하여 비밀번호를 안전하게 전달
          # BACKUP_FILE_PATH는 이전 단계에서 설정된 정확한 경로를 사용
          pg_dump -h "${{ env.DB_HOST }}" -p "${{ env.DB_PORT }}" -U "${{ env.DB_USER }}" -d "${{ env.DB_NAME }}" > "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}"
          
          echo "✅ PostgreSQL 백업 완료: ${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}"
          ls -lh "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}" # 백업 파일 정보 확인

      - name: 🔐 백업 파일 암호화 (선택 사항)
        # 이 단계는 암호화 키 관리 전략에 따라 달라집니다.
        # 예시로 OpenSSL을 사용하지만, 실제 프로덕션에서는 더 안전한 방식을 고려해야 합니다.
        # openssl enc -aes-256-cbc -salt -in "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}" -out "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}.enc" -k "your_encryption_key_here" # 실제 키 사용
        # rm "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}" # 원본 파일 삭제 (암호화 성공 시)
        run: echo "암호화 단계는 보안 키 관리 방안에 따라 구현 필요"
        # continue-on-error: true # 암호화 실패 시에도 워크플로우 진행

      - name: ☁️ AWS 자격 증명 구성
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ⬆️ S3에 백업 업로드
        run: |
          # 백업 파일을 S3 버킷에 업로드합니다.
          # 암호화된 파일을 업로드하는 경우, ${BACKUP_FILE_PATH}.enc 를 사용해야 합니다.
          aws s3 cp "${{ steps.set_vars.outputs.BACKUP_FILE_PATH }}" "s3://${{ env.S3_BUCKET_NAME }}/backups/${{ steps.set_vars.outputs.BACKUP_FILE_NAME }}"
          echo "✅ S3 업로드 완료: s3://${{ env.S3_BUCKET_NAME }}/backups/${{ steps.set_vars.outputs.BACKUP_FILE_NAME }}"

      - name: 🧹 로컬 백업 파일 정리
        if: always() # 이전 단계 실패 여부와 상관없이 항상 실행
        run: |
          # 임시 백업 파일과 디렉토리를 삭제합니다.
          rm -rf /tmp/db_backups
          echo "✅ 로컬 백업 파일 정리 완료"
