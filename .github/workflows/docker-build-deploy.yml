name: Docker Image Build and Deploy

on:
  push:
    branches:
      - main # main 브랜치에 push될 때마다 실행
  schedule:
    - cron: '0 * * * *' # 매 시간 0분마다 (이것이 "매시간마다 최신 버전 누적"의 의미에 가장 가깝지만, 일반적으로 권장되지는 않습니다. 태그를 활용하는 것이 좋습니다.)

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: . # Dockerfile이 있는 경로
          push: true
          tags: |
            my_organization/my_app:latest
            my_organization/my_app:${{ github.sha }} # 커밋 SHA를 태그로 사용 (버전 관리)
            # my_organization/my_app:${{ github.run_number }} # 워크플로우 실행 번호를 태그로 사용

      - name: Deploy to Server (Optional - SSH 또는 배포 스크립트 실행)
        # 이 부분은 실제 배포 환경에 따라 달라집니다.
        # 예: SSH를 통해 서버에 접속하여 docker-compose pull && docker-compose up -d 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /path/to/your/app_on_server
            docker-compose pull myapp
            docker-compose up -d --no-deps myapp # 의존성 없이 특정 서비스만 업데이트
            docker image prune -f # 오래된 이미지 삭제
