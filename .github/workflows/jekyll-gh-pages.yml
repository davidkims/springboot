name: 🔁 Auto Finance Backup (Manual + Cron)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"  # 5분마다 자동 실행

jobs:
  auto-finance-backup:
    runs-on: ubuntu-latest

    env:
      DB_NAME: finance
      DB_USER: root
      DB_PASS: rootpass123
      BACKUP_DIR: /opt/finance/backups
      SQL_INIT_FILE: /opt/finance/init.sql

    steps:
      - name: 📂 1. 디렉토리 및 SQL 초기화 파일 생성
        run: |
          echo "📁 [mkdir] Creating backup directory: $BACKUP_DIR"
          sudo mkdir -p "$BACKUP_DIR"

          echo "📄 [echo] Writing SQL to $SQL_INIT_FILE"
          {
            echo "CREATE TABLE IF NOT EXISTS transactions ("
            echo "  id INT AUTO_INCREMENT PRIMARY KEY,"
            echo "  type VARCHAR(30),"
            echo "  amount DECIMAL(10,2),"
            echo "  currency VARCHAR(10),"
            echo "  status VARCHAR(20),"
            echo "  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
            echo ");"
          } | tee "$SQL_INIT_FILE"

          echo "✅ SQL 초기화 파일 내용:"
          cat "$SQL_INIT_FILE"

      - name: 🐬 2. MySQL 컨테이너 실행
        run: |
          echo "🐳 [docker run] Starting MySQL container..."
          docker run -d --rm \
            --name mysql-auto \
            -e MYSQL_ROOT_PASSWORD=$DB_PASS \
            -e MYSQL_DATABASE=$DB_NAME \
            -v "$SQL_INIT_FILE":/docker-entrypoint-initdb.d/init.sql \
            -p 3306:3306 \
            mysql:8.0

          echo "⏳ Waiting 25s for DB init..."
          sleep 25

      - name: 🔐 3. 로그인 구성 및 백업 수행
        run: |
          echo "🔐 [auth] Creating ~/.my.cnf"
          {
            echo "[client]"
            echo "user=$DB_USER"
            echo "password=$DB_PASS"
            echo "host=127.0.0.1"
            echo "port=3306"
          } > ~/.my.cnf
          chmod 600 ~/.my.cnf

          echo "🕐 [timestamp] Generating timestamp"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_FILE="$BACKUP_DIR/backup-$TIMESTAMP.sql"

          echo "💾 [mysqldump] Backing up to: $BACKUP_FILE"
          mysqldump --defaults-file=~/.my.cnf --no-tablespaces "$DB_NAME" > "$BACKUP_FILE"

          echo "✅ Backup completed: $BACKUP_FILE"
          ls -lh "$BACKUP_FILE"

          echo "📜 [verify] Running SHOW TABLES;"
          mysql --defaults-file=~/.my.cnf -e "USE $DB_NAME; SHOW TABLES;"

          echo "📌 [env] Exporting backup file info"
          echo "BACKUP_FILE_PATH=$BACKUP_FILE" >> $GITHUB_ENV
          echo "BACKUP_FILE_NAME=backup-$TIMESTAMP.sql" >> $GITHUB_ENV

      - name: 🧹 4. MySQL 컨테이너 정리
        run: |
          echo "🧼 [docker stop] Stopping MySQL container..."
          docker stop mysql-auto || echo "⚠️ MySQL container not running"

      - name: 📦 5. GitHub Release 생성 및 백업 파일 업로드
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "backup-${{ env.BACKUP_FILE_NAME }}"
          name: "MySQL Backup - ${{ env.BACKUP_FILE_NAME }}"
          files: ${{ env.BACKUP_FILE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
