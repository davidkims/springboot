name: CI Build and Push Docker Image

# GHCR로 푸시하기 위한 권한 설정
permissions:
  contents: read             # repository 읽기 권한
  packages: write            # GitHub Packages (GHCR) 쓰기 권한

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Ensure pom.xml Exists (or Generate a Default One via echo)
        run: |
          if [ ! -f ./pom.xml ]; then
            echo "⚠️ pom.xml이 루트에 존재하지 않습니다. 기본 pom.xml을 echo로 생성합니다."

            # 최소한의 Maven 프로젝트 정의
            echo "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"" > pom.xml
            echo "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" >> pom.xml
            echo "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0" >> pom.xml
            echo "         http://maven.apache.org/xsd/maven-4.0.0.xsd\">" >> pom.xml
            echo "    <modelVersion>4.0.0</modelVersion>" >> pom.xml
            echo "    <groupId>com.example</groupId>" >> pom.xml
            echo "    <artifactId>demo</artifactId>" >> pom.xml
            echo "    <version>1.0-SNAPSHOT</version>" >> pom.xml
            echo "    <properties>" >> pom.xml
            echo "        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>" >> pom.xml
            echo "        <maven.compiler.source>17</maven.compiler.source>" >> pom.xml
            echo "        <maven.compiler.target>17</maven.compiler.target>" >> pom.xml
            echo "    </properties>" >> pom.xml
            echo "    <dependencies>" >> pom.xml
            echo "        <!-- Spring Boot Starter (샘플) -->" >> pom.xml
            echo "        <dependency>" >> pom.xml
            echo "            <groupId>org.springframework.boot</groupId>" >> pom.xml
            echo "            <artifactId>spring-boot-starter</artifactId>" >> pom.xml
            echo "            <version>3.1.0</version>" >> pom.xml
            echo "        </dependency>" >> pom.xml
            echo "    </dependencies>" >> pom.xml
            echo "    <build>" >> pom.xml
            echo "        <plugins>" >> pom.xml
            echo "            <plugin>" >> pom.xml
            echo "                <groupId>org.springframework.boot</groupId>" >> pom.xml
            echo "                <artifactId>spring-boot-maven-plugin</artifactId>" >> pom.xml
            echo "            </plugin>" >> pom.xml
            echo "        </plugins>" >> pom.xml
            echo "    </build>" >> pom.xml
            echo "</project>" >> pom.xml

            echo "✅ 기본 pom.xml 생성 완료."
          else
            echo "✅ pom.xml이 이미 존재합니다."
          fi

      - name: 🔍 Ensure Dockerfile Exists (or Generate a Default One via echo)
        run: |
          if [ ! -f ./Dockerfile ]; then
            echo "⚠️ Dockerfile이 루트에 존재하지 않습니다. 기본 Dockerfile을 echo로 생성합니다."

            # 1. Alpine 기반 이미지 선택 및 JDK 설치
            echo "FROM eclipse-temurin:17-jdk-alpine" > Dockerfile

            # 2. 작업 디렉토리 설정
            echo "" >> Dockerfile
            echo "# 작업 디렉토리 생성" >> Dockerfile
            echo "WORKDIR /app" >> Dockerfile

            # 3. 소스 복사
            echo "" >> Dockerfile
            echo "# 로컬 소스코드를 컨테이너로 복사" >> Dockerfile
            echo "COPY . ." >> Dockerfile

            # 4. 시스템 Maven 설치 (pom.xml이 생성되었으므로 빌드 가능)
            echo "" >> Dockerfile
            echo "# 시스템 Maven 설치" >> Dockerfile
            echo "RUN apk update && apk add --no-cache maven" >> Dockerfile

            # 5. Maven 빌드: pom.xml이 반드시 존재하므로 빌드 사용
            echo "" >> Dockerfile
            echo "# Maven으로 패키지 빌드 (테스트는 생략)" >> Dockerfile
            echo "RUN mvn package -DskipTests" >> Dockerfile

            # 6. 애플리케이션 실행
            echo "" >> Dockerfile
            echo "# 빌드된 JAR 실행" >> Dockerfile
            echo "CMD [\"sh\", \"-c\", \"if [ -f target/*.jar ]; then java -jar target/*.jar; else echo '⚠️ 실행할 JAR이 없습니다.'; fi\"]" >> Dockerfile

            echo "✅ 기본 Dockerfile 생성 완료."
          else
            echo "✅ Dockerfile이 이미 존재합니다."
          fi

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/springboot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ 완료 메시지
        run: echo "✅ Docker 이미지를 빌드하여 ghcr.io/${{ github.repository_owner }}/springboot:latest 로 푸시했습니다."
