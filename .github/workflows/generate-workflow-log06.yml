name: Generate Workflow Run Log

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight UTC
  push:
    branches:
      - main # Or your default branch like 'master'
    paths:
      - '.github/workflows/**' # Trigger if any workflow file changes

jobs:
  generate_log:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission to update the markdown file

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch workflow runs
        id: fetch_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided token
        run: |
          #!/bin/bash

          REPO="${{ github.repository }}"
          LOG_FILE=".github/workflow_run_log.md"

          echo "# GitHub Workflow Run Log" > "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "This file is automatically generated by the \`Generate Workflow Run Log\` workflow." >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "| Workflow Name | Run ID | Status | Conclusion | Run Time (UTC) | Branch | Committer | Commit Message |" >> "$LOG_FILE"
          echo "|---|---|---|---|---|---|---|---|" >> "$LOG_FILE"

          # Fetch workflow runs for all workflows
          # We'll fetch the last 100 runs for simplicity, you can adjust 'per_page' if needed.
          # The GitHub API has a rate limit, so fetching too many at once might cause issues.
          # We iterate through all workflows to get their runs.

          WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows" | jq -r '.workflows[] | .id')

          for WORKFLOW_ID in $WORKFLOWS; do
            WORKFLOW_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID" | jq -r '.name')

            # Fetch runs for the current workflow, sorted by created_at in descending order
            RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=50&status=completed&event=push,workflow_dispatch,schedule" | jq -r '.workflow_runs[] | select(.status == "completed" or .status == "queued" or .status == "in_progress") | "\(.name) \(.id) \(.status) \(.conclusion) \(.created_at) \(.head_branch) \(.head_commit.committer.name) \(.head_commit.message | gsub("[\r\n]"; " "))"') # Replace newlines in commit message

            if [ -z "$RUNS" ]; then
              continue # Skip if no runs found for this workflow
            fi

            while IFS= read -r RUN; do
              # Parse the run data
              RUN_NAME=$(echo "$RUN" | awk '{print $1}')
              RUN_ID=$(echo "$RUN" | awk '{print $2}')
              RUN_STATUS=$(echo "$RUN" | awk '{print $3}')
              RUN_CONCLUSION=$(echo "$RUN" | awk '{print $4}')
              RUN_CREATED_AT=$(echo "$RUN" | awk '{print $5}')
              RUN_BRANCH=$(echo "$RUN" | awk '{print $6}')
              RUN_COMMITTER=$(echo "$RUN" | awk '{print $7}')
              RUN_COMMIT_MESSAGE=$(echo "$RUN" | awk '{$1=$2=$3=$4=$5=$6=$7=""; print $0}' | sed 's/^ *//') # Extract the rest as commit message

              # Handle cases where conclusion might be null for in-progress or queued runs
              if [ "$RUN_CONCLUSION" == "null" ]; then
                RUN_CONCLUSION="N/A"
              fi

              # Add to markdown file
              echo "| $RUN_NAME | $RUN_ID | $RUN_STATUS | $RUN_CONCLUSION | $RUN_CREATED_AT | $RUN_BRANCH | $RUN_COMMITTER | $RUN_COMMIT_MESSAGE |" >> "$LOG_FILE"
            done <<< "$RUNS"
          done

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update workflow run log"
          file_pattern: ".github/workflow_run_log.md"
          # Optional: Configure the committer and author
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
