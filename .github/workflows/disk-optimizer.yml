name: Disk & Cache Optimizer with Git Tagging

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: '생성할 Git 태그 이름 (예: v1.0.0, release-20250608)'
        required: false # 태그 생성을 선택 사항으로 만들기 위해 false로 설정
        type: string

jobs:
  optimize_and_tag:
    runs-on: ubuntu-latest

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 Git 이력을 가져와야 태그 생성 및 푸시가 올바르게 작동

      # --- 디스크 최적화 및 정리 ---
      - name: 초기 디스크 사용량 보고
        run: |
          echo "초기 디스크 사용량:"
          df -h

      - name: 불필요한 Docker 리소스 정리
        run: |
          echo "사용되지 않는 Docker 이미지, 컨테이너, 볼륨, 빌드 캐시 정리..."
          docker system prune --all --force --volumes
          echo "Docker 정리 후 디스크 사용량:"
          df -h

      - name: 캐시 디렉토리 생성 확인
        # 'Path Validation Error' 방지를 위해 캐시 디렉토리가 존재하는지 확인하고 없으면 생성
        run: |
          mkdir -p ~/.npm # Node.js 프로젝트의 경우 npm 캐시 디렉토리
          # 다른 프로젝트 유형에 따라 필요한 캐시 디렉토리 추가:
          # mkdir -p ~/.m2/repository # Maven
          # mkdir -p ~/.cache/pip     # Python pip 캐시
          echo "캐시 디렉토리 생성이 확인되었습니다."

      # --- 캐시 최적화 (속도 향상) ---
      - name: 종속성 캐시 복원
        uses: actions/cache@v4
        with:
          path: ~/.npm # 패키지 관리자가 종속성을 캐시하는 경로
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # --- 빌드 프로세스 (주요 작업) ---
      - name: Node.js 종속성 설치 (예시)
        # 캐시가 적중되면 이 단계는 훨씬 빨라지거나 npm/yarn에 의해 건너뛸 수 있습니다.
        run: |
          npm install # 또는 npm ci, yarn 등 실제 프로젝트의 종속성 설치 명령
          echo "종속성이 설치되었습니다."

      # --- 사용자 정의 디스크 최적화 스크립트 실행 ---
      - name: 사용자 정의 디스크 최적화 스크립트 실행
        run: |
          chmod +x scripts/optimize_disk.sh
          bash scripts/optimize_disk.sh .github
          echo "사용자 정의 디스크 최적화 스크립트가 실행되었습니다."
          echo "사용자 정의 스크립트 실행 후 디스크 사용량:"
          df -h

      # --- 캐시 저장 (속도 향상) ---
      - name: 종속성 캐시 저장
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        if: success() # 이전 단계가 성공적으로 완료된 경우에만 캐시 저장

      # --- Git 태그 생성 및 푸시 (새로운 기능) ---
      - name: Git 태그 생성 및 푸시 (선택 사항)
        if: github.event.inputs.tag_name != '' # tag_name 입력값이 있을 경우에만 실행
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 기본 GITHUB_TOKEN 사용
        run: |
          TAG_NAME=${{ github.event.inputs.tag_name }}
          echo "새로운 Git 태그 '$TAG_NAME'을 생성하고 푸시합니다."

          # Git 설정: GitHub Actions에서 태그를 푸시할 수 있도록 사용자 정보 설정
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 태그 생성
          git tag $TAG_NAME

          # 생성된 태그를 GitHub 리포지토리로 푸시
          git push origin $TAG_NAME

          echo "태그 '$TAG_NAME' 푸시 완료."
