# YAML Configuration for Generating and Extracting Corporate Banking Data with Echo Directives

# 0. 로깅 및 에코 메시지 지시사항
# 이 섹션의 설정과 메시지들은 데이터 처리 스크립트가 진행 상황을 "에코" (출력/로깅)하는 데 사용됩니다.
# 스크립트는 해당 단계에 도달했을 때 이 메시지들을 참조하여 출력합니다.
# {placeholder} 형식으로 변수를 사용하여 동적 메시지 생성이 가능합니다.
logging_and_echo_directives:
  # 전역 에코 활성화 여부 (스크립트가 이 값을 참조하여 에코 실행 여부 결정)
  # true로 설정하면 아래 정의된 메시지들이 스크립트에 의해 출력됩니다.
  enable_echo: true

  # 데이터 생성 단계별 메시지 템플릿
  generation_phase:
    # 일반 섹션(테이블) 처리 메시지
    # 사용 가능한 플레이스홀더: {section_name} (예: corporate_customers), {count} (생성된 레코드 수)
    section_start: "INFO: [{section_name}] 데이터 생성을 시작합니다."
    # {config_details} 플레이스홀더는 스크립트가 해당 섹션의 설정을 요약하여 채워 넣을 수 있습니다.
    section_config_details: "DEBUG: [{section_name}] 생성 설정: {config_details}"
    # {item_details} 플레이스홀더는 스크립트가 개별 생성된 항목의 세부 정보를 로깅할 때 사용 (매우 상세, 주의해서 사용)
    section_item_generated_trace: "TRACE: [{section_name}] 항목 생성: {item_details}"
    section_end: "INFO: [{section_name}] 데이터 {count}건 생성을 완료했습니다."
    # {total_tables}, {total_records} 플레이스홀더 사용 가능
    total_generation_summary: "INFO: 모든 데이터 생성이 완료되었습니다. 총 {total_tables}개 테이블, {total_records}건의 레코드가 생성되었습니다."

  # 데이터 추출 단계 메시지 템플릿
  extraction_phase:
    # 사용 가능한 플레이스홀더: {output_type} (예: sql_dump_file), {output_file_path}, {table_name}, {error_message}
    extraction_start: "INFO: 데이터 추출을 시작합니다 (추출 유형: {output_type})."
    extraction_in_progress: "INFO: 데이터를 '{output_file_path}' 파일로 추출 중입니다..."
    extraction_table_dump_start: "DEBUG: 테이블 [{table_name}] 데이터 추출을 시작합니다."
    extraction_table_dump_end: "DEBUG: 테이블 [{table_name}] 데이터 추출을 완료했습니다."
    extraction_complete: "INFO: 데이터 추출이 성공적으로 완료되었습니다. 백업 파일: {output_file_path}"
    extraction_error: "ERROR: 데이터 추출 중 오류 발생: {error_message}"

  # 일반 오류 메시지 템플릿
  error_messages:
    # {error_details}, {validation_errors}, {section_name} 플레이스홀더 사용 가능
    general_processing_error: "ERROR: 처리 중 예기치 않은 오류 발생: {error_details}"
    config_validation_error: "ERROR: YAML 설정 파일 유효성 검사 중 오류 발생: {validation_errors}"
    data_generation_error: "ERROR: [{section_name}] 데이터 생성 중 특정 오류 발생: {error_details}"

  # 각 데이터 생성 섹션별 에코 활성화 여부 (선택 사항)
  # 스크립트는 이 값을 참조하여 전역 `enable_echo` 설정과 함께
  # 특정 섹션의 로깅 상세 수준을 조절하거나 개별적으로 활성화/비활성화할 수 있습니다.
  # 예를 들어, 전역 enable_echo가 true여도 특정 섹션만 false로 설정하여 로그를 줄일 수 있습니다.
  section_specific_echo_control:
    corporate_customers: { enabled: true, log_level: "INFO" } # 예: INFO, DEBUG, TRACE
    bank_accounts: { enabled: true, log_level: "INFO" }
    account_transfers: { enabled: true, log_level: "INFO" }
    corporate_credit_cards: { enabled: true, log_level: "INFO" }
    credit_card_transactions: { enabled: true, log_level: "DEBUG" } # 이 섹션은 더 자세히 로깅
    corporate_debit_cards: { enabled: true, log_level: "INFO" }
    debit_card_transactions: { enabled: true, log_level: "DEBUG" } # 이 섹션은 더 자세히 로깅

# 1. Data Generation Definitions
data_generation:
  # 1.1. 기업 고객 정보 (Customers)
  customers:
    count: 50
    table_name: corporate_customers
    fields:
      customer_id: { type: uuid, primary_key: true }
      company_name: { type: company_name_korean }
      business_registration_number: { type: business_registration_number }
      industry_code: { type: choice, values: ["IT서비스", "제조업", "도소매업", "건설업", "전문서비스업"] }
      ceo_name: { type: full_name_korean }
      contact_person_name: { type: full_name_korean }
      phone_number: { type: phone_number, format: "02-XXXX-XXXX" }
      mobile_phone_number: { type: phone_number, format: "010-XXXX-XXXX" }
      email: { type: email, domain_suffix: "company.kr" }
      address: { type: korean_address }
      establishment_date: { type: date_range, start: "1990-01-01", end: "2023-12-31" }
      join_date: { type: date_range, start: "2010-01-01", end: "2024-01-01" }
      credit_rating: { type: choice, values: ["AAA", "AA+", "A+", "BBB+", "BB+", "B+"] }

  # 1.2. 은행 계좌 정보 (Bank Accounts)
  accounts:
    count: 120
    table_name: bank_accounts
    fields:
      account_id: { type: uuid, primary_key: true }
      customer_id: { type: foreign_key, references: customers, field: customer_id }
      account_number: { type: bank_account_number, bank_code: "020" }
      account_type: { type: choice, values: ["기업자유예금", "보통예금", "당좌예금", "외화예금"] }
      currency_code: { type: conditional_choice, condition_field: account_type, 
                       choices_map: { "외화예금": ["USD", "JPY", "EUR"], "default": ["KRW"] } }
      balance: { type: float, min: 0, max: 5000000000, precision: 2 }
      open_date: { type: date_range, start: "2010-01-01", end: "2024-06-01" }
      last_transaction_date: { type: datetime_range, start: "2023-01-01T00:00:00", end: "2024-06-05T23:59:59" }
      status: { type: choice, values: ["활성", "휴면", "해지", "사고신고"] }

  # 1.3. 계좌 이체 내역 (Account Transfers)
  account_transfers:
    count: 10000
    table_name: account_transfers
    fields:
      transfer_id: { type: uuid, primary_key: true }
      from_account_id: { type: foreign_key, references: accounts, field: account_id }
      to_bank_code: { type: choice, values: ["020", "088", "004", "011", "003", "027"] }
      to_account_number: { type: bank_account_number_generic }
      to_account_holder: { type: company_or_person_name_korean }
      transfer_amount: { type: float, min: 1000, max: 100000000, precision: 0 }
      transfer_date: { type: datetime_range, start: "2023-01-01T00:00:00", end: "2024-06-05T23:59:59" }
      sender_memo: { type: text, max_length: 50, content_type: "transfer_purpose" }
      receiver_memo: { type: text, max_length: 50, content_type: "transfer_purpose" }
      transfer_type: { type: choice, values: ["일반이체", "급여이체", "대량이체", "CMS출금"] }
      fee: { type: integer, min: 0, max: 500 }
      status: { type: choice, values: ["성공", "실패", "처리중", "예약"] }

  # 1.4. 법인 신용카드 정보 (Corporate Credit Cards)
  corporate_credit_cards:
    count: 80
    table_name: corporate_credit_cards
    fields:
      card_id: { type: uuid, primary_key: true }
      customer_id: { type: foreign_key, references: customers, field: customer_id }
      card_number: { type: credit_card_number, provider_prefix: ["37", "4", "51", "55", "9"] }
      card_product_name: { type: choice, values: ["기업플러스카드", "법인チ타늄카드", "Company VIP 카드"] }
      card_brand: { type: choice, values: ["BC", "Visa", "MasterCard", "Amex", "UnionPay"] }
      issue_date: { type: date_range, start: "2020-01-01", end: "2024-05-01" }
      expiry_date: { type: date_future, months_min: 6, months_max: 72, format: "YYYY-MM" }
      credit_limit: { type: integer, min: 1000000, max: 200000000, step: 1000000 }
      payment_date: { type: integer, min: 1, max: 28 }
      status: { type: choice, values: ["활성", "정지", "해지신청", "만료"] }

  # 1.5. 신용카드 사용 내역 (Credit Card Transactions)
  credit_card_transactions:
    count: 25000
    table_name: credit_card_transactions
    fields:
      transaction_id: { type: uuid, primary_key: true }
      card_id: { type: foreign_key, references: corporate_credit_cards, field: card_id }
      transaction_datetime: { type: datetime_range, start: "2023-01-01T00:00:00", end: "2024-06-05T23:59:59" }
      amount: { type: float, min: 1000, max: 10000000, precision: 0 }
      currency_code: { type: choice, values: ["KRW", "USD", "JPY", "EUR"], weights: [0.95, 0.03, 0.01, 0.01] }
      original_amount_if_foreign: { type: float, min: 10, max: 8000, precision: 2, condition_field: currency_code, condition_not_value: "KRW"}
      merchant_name: { type: merchant_name_korean }
      merchant_category_code: { type: choice, values: ["0101", "0203", "0400", "0510", "0620"] }
      merchant_category_name: { type: choice, values: ["사무용품", "일반음식점", "주유소", "온라인쇼핑몰", "호텔/숙박", "항공권", "교통비"] }
      approval_number: { type: alphanumeric, length: 8, upper_case: true }
      transaction_type: { type: choice, values: ["승인", "취소", "부분취소"] }
      is_installment: { type: boolean, probability: 0.1 }
      installment_months: { type: integer, min: 2, max: 12, condition_field: is_installment, condition_value: true }

  # 1.6. 법인 체크카드 정보 (Corporate Debit Cards)
  corporate_debit_cards:
    count: 60
    table_name: corporate_debit_cards
    fields:
      debit_card_id: { type: uuid, primary_key: true }
      account_id: { type: foreign_key, references: accounts, field: account_id, unique_per_account: true }
      card_number: { type: debit_card_number, provider_prefix: ["60", "9"] }
      card_product_name: { type: choice, values: ["기업체크 Standard", "법인체크 Premium"] }
      issue_date: { type: date_range, start: "2020-01-01", end: "2024-05-01" }
      expiry_date: { type: date_future, months_min: 6, months_max: 72, format: "YYYY-MM" }
      status: { type: choice, values: ["활성", "정지", "해지신청", "만료"] }

  # 1.7. 체크카드 사용 내역 (Debit Card Transactions)
  debit_card_transactions:
    count: 15000
    table_name: debit_card_transactions
    fields:
      transaction_id: { type: uuid, primary_key: true }
      debit_card_id: { type: foreign_key, references: corporate_debit_cards, field: debit_card_id }
      transaction_datetime: { type: datetime_range, start: "2023-01-01T00:00:00", end: "2024-06-05T23:59:59" }
      amount: { type: float, min: 1000, max: 3000000, precision: 0 }
      currency_code: { type: choice, values: ["KRW", "USD"], weights: [0.98, 0.02] }
      merchant_name: { type: merchant_name_korean }
      merchant_category_name: { type: choice, values: ["편의점", "식당", "온라인결제", "교통", "공과금"] }
      approval_number: { type: alphanumeric, length: 8, upper_case: true }
      transaction_type: { type: choice, values: ["승인", "취소"] }

# 2. Data Extraction and Backup Configuration
extraction_config:
  output_type: sql_dump_file
  target_database_name: "corporate_bank_dw"
  
  sql_dump_options:
    output_file_path: "./corporate_banking_backup.sql"
    include_create_table_statements: true
    include_drop_table_statements: true
    batch_insert_size: 100
    character_set: "utf8mb4"
    collate: "utf8mb4_unicode_ci"

# 3. Table Schemas
table_schemas:
  corporate_customers:
    columns:
      customer_id: "VARCHAR(36) PRIMARY KEY"
      company_name: "VARCHAR(100) NOT NULL"
      business_registration_number: "VARCHAR(12) UNIQUE NOT NULL"
      industry_code: "VARCHAR(50)"
      ceo_name: "VARCHAR(50)"
      contact_person_name: "VARCHAR(50)"
      phone_number: "VARCHAR(20)"
      mobile_phone_number: "VARCHAR(20)"
      email: "VARCHAR(100)"
      address: "VARCHAR(255)"
      establishment_date: "DATE"
      join_date: "DATE NOT NULL"
      credit_rating: "VARCHAR(10)"
    indexes:
      - { name: idx_company_name, columns: [company_name] }
      - { name: idx_join_date, columns: [join_date] }

  bank_accounts:
    columns:
      account_id: "VARCHAR(36) PRIMARY KEY"
      customer_id: "VARCHAR(36) NOT NULL"
      account_number: "VARCHAR(30) UNIQUE NOT NULL"
      account_type: "VARCHAR(50) NOT NULL"
      currency_code: "VARCHAR(3) NOT NULL DEFAULT 'KRW'"
      balance: "DECIMAL(18, 2) NOT NULL DEFAULT 0.00"
      open_date: "DATE NOT NULL"
      last_transaction_date: "DATETIME"
      status: "VARCHAR(20) NOT NULL"
    foreign_keys:
      - { name: fk_account_customer, column: customer_id, references_table: corporate_customers, references_column: customer_id }
    indexes:
      - { name: idx_account_customer, columns: [customer_id] }
      - { name: idx_account_status, columns: [status] }

  account_transfers:
    columns:
      transfer_id: "VARCHAR(36) PRIMARY KEY"
      from_account_id: "VARCHAR(36) NOT NULL"
      to_bank_code: "VARCHAR(10)"
      to_account_number: "VARCHAR(30)"
      to_account_holder: "VARCHAR(100)"
      transfer_amount: "DECIMAL(18, 2) NOT NULL"
      transfer_date: "DATETIME NOT NULL"
      sender_memo: "VARCHAR(50)"
      receiver_memo: "VARCHAR(50)"
      transfer_type: "VARCHAR(30)"
      fee: "INT DEFAULT 0"
      status: "VARCHAR(20) NOT NULL"
    foreign_keys:
      - { name: fk_transfer_from_account, column: from_account_id, references_table: bank_accounts, references_column: account_id }
    indexes:
      - { name: idx_transfer_date, columns: [transfer_date] }
      - { name: idx_from_account, columns: [from_account_id] }

  corporate_credit_cards:
    columns:
      card_id: "VARCHAR(36) PRIMARY KEY"
      customer_id: "VARCHAR(36) NOT NULL"
      card_number: "VARCHAR(20) UNIQUE NOT NULL"
      card_product_name: "VARCHAR(100)"
      card_brand: "VARCHAR(30)"
      issue_date: "DATE NOT NULL"
      expiry_date: "VARCHAR(7) NOT NULL"
      credit_limit: "DECIMAL(18, 0) NOT NULL"
      payment_date: "TINYINT"
      status: "VARCHAR(20) NOT NULL"
    foreign_keys:
      - { name: fk_cc_customer, column: customer_id, references_table: corporate_customers, references_column: customer_id }

  credit_card_transactions:
    columns:
      transaction_id: "VARCHAR(36) PRIMARY KEY"
      card_id: "VARCHAR(36) NOT NULL"
      transaction_datetime: "DATETIME NOT NULL"
      amount: "DECIMAL(18, 2) NOT NULL"
      currency_code: "VARCHAR(3) NOT NULL DEFAULT 'KRW'"
      original_amount_if_foreign: "DECIMAL(18,2)"
      merchant_name: "VARCHAR(100)"
      merchant_category_code: "VARCHAR(10)"
      merchant_category_name: "VARCHAR(50)"
      approval_number: "VARCHAR(20)"
      transaction_type: "VARCHAR(20) NOT NULL"
      is_installment: "BOOLEAN DEFAULT FALSE"
      installment_months: "TINYINT DEFAULT 0"
    foreign_keys:
      - { name: fk_cctx_card, column: card_id, references_table: corporate_credit_cards, references_column: card_id }
    indexes:
      - { name: idx_cctx_datetime, columns: [transaction_datetime] }
      - { name: idx_cctx_card, columns: [card_id] }

  corporate_debit_cards:
    columns:
      debit_card_id: "VARCHAR(36) PRIMARY KEY"
      account_id: "VARCHAR(36) NOT NULL UNIQUE"
      card_number: "VARCHAR(20) UNIQUE NOT NULL"
      card_product_name: "VARCHAR(100)"
      issue_date: "DATE NOT NULL"
      expiry_date: "VARCHAR(7) NOT NULL"
      status: "VARCHAR(20) NOT NULL"
    foreign_keys:
      - { name: fk_dc_account, column: account_id, references_table: bank_accounts, references_column: account_id }

  debit_card_transactions:
    columns:
      transaction_id: "VARCHAR(36) PRIMARY KEY"
      debit_card_id: "VARCHAR(36) NOT NULL"
      transaction_datetime: "DATETIME NOT NULL"
      amount: "DECIMAL(18, 2) NOT NULL"
      currency_code: "VARCHAR(3) NOT NULL DEFAULT 'KRW'"
      merchant_name: "VARCHAR(100)"
      merchant_category_name: "VARCHAR(50)"
      approval_number: "VARCHAR(20)"
      transaction_type: "VARCHAR(20) NOT NULL"
    foreign_keys:
      - { name: fk_dctx_card, column: debit_card_id, references_table: corporate_debit_cards, references_column: debit_card_id }
    indexes:
      - { name: idx_dctx_datetime, columns: [transaction_datetime] }
      - { name: idx_dctx_card, columns: [debit_card_id] }
