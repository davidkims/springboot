# 파일명: .github/workflows/generate_workflow_run_log.yml
name: 워크플로 실행 로그 생성

on:
  workflow_dispatch: # 수동 트리거 허용
  schedule:
    - cron: '*/5 * * * 0' # 매주 일요일, 매 5분마다 실행 (UTC 기준)
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**' # 워크플로우 파일 변경 시에도 트리거

jobs:
  create_log:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 리포지토리 콘텐츠에 쓰기 권한 부여 (로그 파일 커밋을 위해 필요)

    steps:
      - name: 체크아웃 저장소 (전체 기록 포함)
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 은 모든 기록을 가져오므로, 이후 rebase나 pull에 필요합니다.
          fetch-depth: 0

      - name: 원격과 동기화 및 브랜치 리베이스
        # 이 단계는 로컬 브랜치를 원격의 최신 상태로 강제 동기화합니다.
        # git pull --rebase는 로컬에서 변경사항이 있을 때 원격의 변경사항 위에
        # 로컬 변경사항을 적용하려 시도하여 충돌을 줄입니다.
        # 만약 충돌이 발생하면, 워크플로우는 실패합니다.
        run: |
          LOCAL_BRANCH="${{ github.ref_name }}"
          echo "현재 로컬 브랜치: $LOCAL_BRANCH"

          # 원격의 최신 변경 사항을 가져옵니다.
          git fetch origin

          # 현재 브랜치가 원격에 존재하는지 확인 (새 브랜치인 경우 pull 시도 방지)
          if git ls-remote --exit-code origin "$LOCAL_BRANCH"; then
            echo "원격 브랜치 '$LOCAL_BRANCH'가 존재합니다. 로컬을 동기화합니다."
            # 원격 변경사항을 pull하고 로컬 변경사항을 그 위에 rebase합니다.
            # --autostash: rebase 전에 커밋되지 않은 변경사항을 임시 저장하고, rebase 후 복원
            git pull --rebase --autostash origin "$LOCAL_BRANCH"
            if [ $? -ne 0 ]; then
              echo "리베이스가 실패했습니다. 수동 해결이 필요한 충돌이 있을 수 있습니다."
              echo "워크플로우를 중단합니다."
              exit 1 # 리베이스 실패 시 워크플로우를 즉시 종료
            fi
            echo "지점이 성공적으로 동기화되었습니다."
          else
            echo "원격 브랜치 '$LOCAL_BRANCH'가 존재하지 않습니다. 새로운 브랜치라고 가정합니다. 동기화 건너뛰기."
          fi

      - name: 워크플로 실행을 가져오고 로그를 생성합니다.
        id: fetch_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          REPO="${{ github.repository }}"
          LOG_FILE=".github/workflow_run_log.md"

          echo "# GitHub 워크플로 실행 로그" > "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "이 파일은 \`워크플로 실행 로그 생성\` 워크플로에 의해 자동으로 생성됩니다." >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "마지막 업데이트: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "| 워크플로 이름 | 실행 ID | 상태 | 결론 | 실행 시간(UTC) | 브랜치 | 커미터 | 커밋 메시지 |" >> "$LOG_FILE"
          echo "|---|---|---|---|---|---|---|---|" >> "$LOG_FILE"

          WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows" | jq -r '.workflows[] | .id')

          for WORKFLOW_ID in $WORKFLOWS; do
            WORKFLOW_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID" | jq -r '.name')

            RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=100&status=completed,in_progress,queued&event=push,workflow_dispatch,schedule,pull_request" \
              | jq -r '.workflow_runs[] | "\(.name) \(.id) \(.status) \(.conclusion) \(.created_at) \(.head_branch) \(.head_commit.committer.name) \(.head_commit.message | gsub("[\r\n]"; " "))"')

            if [ -z "$RUNS" ]; then
              continue
            fi

            while IFS= read -r RUN; do
              RUN_ARRAY=($RUN)
              RUN_NAME="${RUN_ARRAY[0]}"
              RUN_ID="${RUN_ARRAY[1]}"
              RUN_STATUS="${RUN_ARRAY[2]}"
              RUN_CONCLUSION="${RUN_ARRAY[3]}"
              RUN_CREATED_AT="${RUN_ARRAY[4]}"
              RUN_BRANCH="${RUN_ARRAY[5]}"
              RUN_COMMITTER="${RUN_ARRAY[6]}"

              RUN_COMMIT_MESSAGE=""
              for ((i=7; i<${#RUN_ARRAY[@]}; i++)); do
                  RUN_COMMIT_MESSAGE+="${RUN_ARRAY[i]} "
              done
              RUN_COMMIT_MESSAGE=$(echo "$RUN_COMMIT_MESSAGE" | sed 's/ $//')

              if [ "$RUN_CONCLUSION" == "null" ]; then
                RUN_CONCLUSION="N/A"
              fi

              echo "| $RUN_NAME | $RUN_ID | $RUN_STATUS | $RUN_CONCLUSION | $RUN_CREATED_AT | $RUN_BRANCH | $RUN_COMMITTER | $RUN_COMMIT_MESSAGE |" >> "$LOG_FILE"
            done <<< "$RUNS"
          done

      - name: 변경 사항 커밋 및 푸시
        # 이 액션은 이전 스텝에서 생성된 로그 파일을 자동으로 커밋하고 푸시합니다.
        # 이전의 'git pull --rebase' 스텝이 성공했다면, 충돌 없이 푸시될 것입니다.
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "워크플로 실행 로그 업데이트"
          file_pattern: ".github/workflow_run_log.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
          # 이 워크플로우는 `main` 브랜치에만 실행되므로, `branch: ${{ github.ref_name }}` 명시
          branch: ${{ github.ref_name }}
