name: 실패한 워크플로 자동 재시도

on:
  workflow_run:
    # 이 섹션에 모니터링하려는 워크플로우의 이름을 정확히 입력해야 합니다.
    # 여러 워크플로우를 모니터링하려면 각 워크플로우 이름을 별도의 줄에 추가하세요.
    # 예시:
    #   - Build and Test
    #   - Deploy to Production
    workflows:
      - Your Workflow Name Here # <-- 이 부분을 반드시 실제 워크플로우 이름으로 변경하세요!
    types:
      - completed # 모니터링하는 워크플로우가 완료되었을 때 (성공, 실패, 취소 여부와 관계없이) 이 워크플로우를 트리거합니다.

jobs:
  rerun-failed:
    # 모니터링하는 워크플로우의 'conclusion' (최종 상태)이 'failure' 또는 'cancelled'일 때만 이 작업이 실행됩니다.
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    runs-on: ubuntu-latest # 이 작업이 실행될 운영체제 환경을 지정합니다.

    steps:
      - name: 워크플로에 대해 실패한 작업을 다시 실행합니다.
        uses: actions/github-script@v7 # GitHub API와 상호작용할 수 있게 해주는 GitHub Action입니다.
        with:
          script: |
            // 트리거된 워크플로우 실행의 ID를 환경 변수에서 가져옵니다.
            const runId = process.env.RUN_ID;
            
            // GitHub REST API를 사용하여 지정된 run_id의 실패한 작업을 재실행합니다.
            // context.repo.owner와 context.repo.repo는 현재 리포지토리의 소유자와 이름을 자동으로 가져옵니다.
            await github.rest.actions.reRunWorkflowFailedJobs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
        env:
          # `github.event.workflow_run.id`는 이 워크플로우를 트리거한 워크플로우 실행의 고유 ID입니다.
          # 이 ID를 RUN_ID 환경 변수에 할당하여 스크립트에서 사용합니다.
          RUN_ID: ${{ github.event.workflow_run.id }}
