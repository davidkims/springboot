name: Generate and Backup Corporate Banking Data

on:
  workflow_dispatch: # GitHub UI에서 수동으로 워크플로우 실행 가능
  push:
    branches: ["main"] # 'main' 브랜치에 코드가 푸시될 때 워크플로우 자동 실행

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 워크플로우 실행
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4 # GitHub 저장소 코드를 워커에 체크아웃

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5 # Python 3.11 환경 설정
        with:
          python-version: '3.11'

      - name: 📥 Install Required Packages
        run: |
          pip install pyyaml faker # YAML 처리(`pyyaml`) 및 더미 데이터 생성(`faker`)을 위한 Python 패키지 설치

      - name: 📄 Generate YAML Configuration
        run: |
          mkdir -p config # 'config' 디렉토리가 없으면 생성
          # banking_schema.yaml 파일 생성 및 예시 내용 추가
          # 실제 금융 데이터 스키마에 맞춰 이 부분을 수정하거나,
          # 리포지토리에 이 파일을 미리 커밋해 두는 것이 좋습니다.
          echo "users:" > config/banking_schema.yaml
          echo "  - id: 1" >> config/banking_schema.yaml
          echo "    name: John Doe" >> config/banking_schema.yaml
          echo "    email: john.doe@example.com" >> config/banking_schema.yaml
          echo "    status: active" >> config/banking_schema.yaml
          echo "accounts:" >> config/banking_schema.yaml
          echo "  - account_id: 1001" >> config/banking_schema.yaml
          echo "    user_id: 1" >> config/banking_schema.yaml
          echo "    balance: 100000.00" >> config/banking_schema.yaml
          echo "    currency: KRW" >> config/banking_schema.yaml
          echo "    type: savings" >> config/banking_schema.yaml
          echo "transactions:" >> config/banking_schema.yaml
          echo "  - transaction_id: 5001" >> config/banking_schema.yaml
          echo "    account_id: 1001" >> config/banking_schema.yaml
          echo "    amount: -5000.00" >> config/banking_schema.yaml
          echo "    type: withdrawal" >> config/banking_schema.yaml
          echo "    date: '2025-06-01'" >> config/banking_schema.yaml
          echo "INFO: config/banking_schema.yaml 파일 생성 완료"

      - name: 🧪 Validate YAML File
        run: |
          # 생성된 YAML 파일의 유효성을 검사합니다.
          # Python 스크립트 들여쓰기에 유의하세요 (EOF 아래 두 칸 들여쓰기).
          python - <<EOF
          import yaml
          try:
              with open('config/banking_schema.yaml', 'r') as f:
                  data = yaml.safe_load(f)
              print('✅ YAML Validation Passed')
          except FileNotFoundError:
              print("Error: 'config/banking_schema.yaml' not found.")
              exit(1) # 파일이 없으면 워크플로우 실패
          except yaml.YAMLError as exc:
              print(f"Error parsing YAML file: {exc}")
              exit(1) # YAML 구문 오류 시 워크플로우 실패
          EOF

      - name: 📦 Simulate Data Extraction
        run: |
          mkdir -p output # 'output' 디렉토리가 없으면 생성
          echo "INFO: 데이터 추출 시작"
          # 여기에 실제 데이터 추출 로직을 추가하세요.
          # 현재는 더미 SQL 파일을 생성합니다.
          touch output/corporate_banking_backup.sql
          echo '-- SQL Dump Placeholder for Corporate Banking Data' > output/corporate_banking_backup.sql
          echo "INFO: 데이터 추출 완료: output/corporate_banking_backup.sql"

      - name: 🔐 Encrypt Backup File
        run: |
          # 백업 파일을 ZIP으로 암호화합니다.
          # 비밀번호는 GitHub Secrets에서 가져옵니다. `secrets.BACKUP_PASSWORD`를 사용합니다.
          # 빈 비밀번호로 인한 오류를 방지하기 위해 반드시 GitHub Secrets에 값을 설정해야 합니다.
          zip -P "${{ secrets.BACKUP_PASSWORD }}" output/corporate_banking_backup.zip output/corporate_banking_backup.sql
          echo "✅ 백업 파일 암호화 완료"

      - name: ☁ Install OCI CLI
        run: |
          # OCI CLI를 수동으로 설치합니다.
          # oracle-actions/setup-oci-cli 액션 사용 시 발생하는 오류를 우회합니다.
          # 설치 스크립트를 다운로드하고 실행합니다.
          # --accept-all-defaults: 모든 기본값을 수락하여 비대화형 설치를 진행합니다.
          # --install-dir /usr/local/bin: OCI CLI 실행 파일을 /usr/local/bin에 설치하여 PATH에 자동으로 추가되도록 합니다.
          echo "ℹ️ OCI CLI 설치를 시작합니다..."
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/install.sh
          bash install.sh --accept-all-defaults --install-dir /usr/local/bin
          echo "✅ OCI CLI 설치 완료"

      - name: ☁ Upload to OCI Object Storage (CLI)
        env:
          # OCI CLI 인증을 위한 환경 변수 설정.
          # 모든 값은 GitHub Secrets에서 안전하게 가져옵니다.
          OCI_CLI_AUTH: "api_key"
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_API_KEY }}
          OCI_CLI_REGION: "ap-seoul-1" # 실제 OCI 리전에 맞게 변경하세요.
        run: |
          # OCI API 키 파일 생성 및 권한 설정.
          # OCI_CLI_KEY_CONTENT Secret에 OCI API 개인 키 내용이 PEM 형식으로 들어있어야 합니다.
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          
          # OCI CLI가 PATH에 추가되었는지 확인
          # which oci || (echo "Error: oci command not found after installation. Exiting." && exit 1)
          
          # OCI Object Storage에 암호화된 백업 파일 업로드.
          # --bucket-name은 OCI에 미리 생성된 버킷 이름이어야 합니다.
          oci os object put \
            --bucket-name backups \
            --file output/corporate_banking_backup.zip \
            --name corporate_banking_backup.zip \
            --force
          echo "✅ 백업 파일 OCI Object Storage 업로드 완료"

      - name: ☑️ NetBackup CLI 실행 (예시)
        run: |
          echo "🔄 NetBackup CLI 가정 실행 중..."
          # 실제 NetBackup 환경이라면, 여기에 실제 NetBackup CLI 명령어를 입력하세요.
          # 예: /usr/openv/netbackup/bin/bpbackup -i -L /tmp/backup_log -f output/corporate_banking_backup.zip
          echo "bpbackup -f output/corporate_banking_backup.zip"
          echo "⚠️ 이 스텝은 NetBackup CLI의 실행을 시뮬레이션합니다."
          echo "⚠️ 실제 NetBackup이 설치되어 있어야 하며, CLI 경로를 확인해야 합니다."

      - name: ✅ 완료 메시지
        run: echo "✅ 기업 금융 데이터 백업 및 암호화, OCI 업로드가 완료되었습니다."
