name: CI Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Ensure Dockerfile Exists (or Generate a Default One via echo)
        run: |
          if [ ! -f ./Dockerfile ]; then
            echo "⚠️ Dockerfile이 루트에 존재하지 않습니다. 기본 Dockerfile을 echo로 생성합니다."

            # 1. Alpine 기반 이미지 선택 및 JDK 설치
            echo "FROM eclipse-temurin:17-jdk-alpine" > Dockerfile

            # 2. 작업 디렉토리 설정
            echo "" >> Dockerfile
            echo "# 작업 디렉토리 생성" >> Dockerfile
            echo "WORKDIR /app" >> Dockerfile

            # 3. 소스 복사
            echo "" >> Dockerfile
            echo "# 로컬 소스코드를 컨테이너로 복사" >> Dockerfile
            echo "COPY . ." >> Dockerfile

            # 4. 시스템 Maven 설치 (pom.xml 존재 시 사용)
            echo "" >> Dockerfile
            echo "# 시스템 Maven 설치" >> Dockerfile
            echo "RUN apk update && apk add --no-cache maven" >> Dockerfile

            # 5. 빌드 단계: pom.xml 파일 유무 확인 후 mvn, 없으면 건너뛰기
            echo "" >> Dockerfile
            echo "# pom.xml이 있으면 Maven으로 패키지 빌드 (테스트는 생략), 없으면 건너뜀" >> Dockerfile
            echo 'RUN if [ -f pom.xml ]; then mvn package -DskipTests; else echo "⚠️ pom.xml 없으므로 빌드 스킵"; fi' >> Dockerfile

            # 6. 실행: 빌드 결과물(예: target/*.jar) 또는 건너뜀 메시지
            echo "" >> Dockerfile
            echo "# 애플리케이션 실행 (target 디렉토리의 JAR)" >> Dockerfile
            echo "CMD [\"sh\", \"-c\", \"if [ -f target/*.jar ]; then java -jar target/*.jar; else echo '⚠️ 실행할 JAR이 없습니다.'; fi\"]" >> Dockerfile

            echo "✅ 기본 Dockerfile 생성 완료."
          else
            echo "✅ Dockerfile이 이미 존재합니다."
          fi

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/springboot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ 완료 메시지
        run: echo "✅ Docker 이미지를 빌드하여 ghcr.io/${{ github.repository_owner }}/springboot:latest 로 푸시했습니다."
