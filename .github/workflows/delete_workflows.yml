name: Auto Code Fix & Re-run

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  auto_fix_and_test:
    name: "Auto-Fix 코드 문제 감지 → 수정 → 재실행"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      ####################################################################
      # 1) 전체 히스토리 체크아웃
      ####################################################################
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      ####################################################################
      # 2) 이미 “auto-fix” 커밋인 경우, 수정 단계 스킵
      ####################################################################
      - name: Check if this commit is auto-fix
        id: is_autofix
        run: |
          echo "HEAD commit message: ${{ github.event.head_commit.message }}"
          if [[ "${{ github.event.head_commit.message }}" == *"chore(auto-fix)"* ]]; then
            echo "is_autofix=true" >> $GITHUB_OUTPUT
          else
            echo "is_autofix=false" >> $GITHUB_OUTPUT
          fi

      ####################################################################
      # 3) 필요한 도구 설치
      ####################################################################
      - name: Set up Python & Node, install linters/formatters
        if: steps.is_autofix.outputs.is_autofix == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt
          
          # Python 관련: black, isort, flake8, yamllint
          python3 -m pip install --upgrade pip
          pip3 install black isort flake8 yamllint
          
          # Node.js/JavaScript 관련: eslint
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g eslint

      ####################################################################
      # 4) “auto-fix”가 아닌 경우, 자동 코드 수정 수행
      ####################################################################
      - name: Run auto-fix tools
        if: steps.is_autofix.outputs.is_autofix == 'false'
        run: |
          set -eux

          echo "▶ 4.1 Shell 스크립트 포맷팅 (shfmt)"
          find . -type f -name "*.sh" -print0 | xargs -0 shfmt -w

          echo "▶ 4.2 Python 코드 포맷팅 (black + isort)"
          black . || true
          isort . || true

          echo "▶ 4.3 JavaScript/TypeScript 포맷팅 (eslint --fix)"
          # 프로젝트 내 .js/.jsx/.ts/.tsx 파일 대상
          eslint . --ext .js,.jsx,.ts,.tsx --fix || true

          echo "▶ 4.4 YAML 문법 검사 (yamllint)"
          yamllint -c "{extends: default}" -f parsable .

      ####################################################################
      # 5) 자동 수정 후 변경사항 감지
      ####################################################################
      - name: Check for unstaged changes
        if: steps.is_autofix.outputs.is_autofix == 'false'
        id: check_changes
        run: |
          # 수정이 발생했는지 확인
          if git diff --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      ####################################################################
      # 6) 수정사항이 있으면 커밋 & 푸시 후 워크플로우 종료
      ####################################################################
      - name: Commit & push auto-fix changes
        if: steps.is_autofix.outputs.is_autofix == 'false' && steps.check_changes.outputs.no_changes == 'false'
        run: |
          echo "▶ 변경사항 감지됨 → 자동 수정 커밋 후 푸시"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -A
          git commit -m "chore(auto-fix): apply automatic code style and lint fixes"
          git push origin "HEAD:${{ github.ref_name }}"

          echo "✅ auto-fix 커밋 및 푸시 완료. 새 푸시에 의해 워크플로우가 재실행됩니다."
          # 수정사항이 생겼으므로, 이 워크플로우는 여기서 종료
          exit 0

      ####################################################################
      # 7) “auto-fix” 커밋이거나, 변경사항이 없는 경우 → 실제 테스트/빌드 수행
      ####################################################################
      - name: Run build & tests
        if: steps.is_autofix.outputs.is_autofix == 'true' || steps.check_changes.outputs.no_changes == 'true'
        run: |
          echo "=========================================="
          echo "▶ 실제 CI 단계: 빌드 및 테스트 실행"
          echo "=========================================="
          # 예시: Python 테스트
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "setup.py" ]; then
            python3 setup.py check
          fi
          if [ -d "tests" ]; then
            pytest --maxfail=1 --disable-warnings -q
          fi

          # 예시: Node.js 테스트
          if [ -f "package.json" ]; then
            npm install
            npm test || echo "Node.js 테스트 종료"
          fi

          # 예시: 추가적인 빌드/배포 스크립트
          # ./build.sh || true

          echo "✅ 빌드 및 테스트 완료"
