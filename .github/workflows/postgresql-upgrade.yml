name: Automatic MySQL Backup # Workflow name

on:
  push:
    branches:
      - main # Trigger on push to main branch
    paths:
      - '**.sql'
      - '.github/workflows/auto-backup.yml' # Trigger on changes to this workflow file

  schedule:
    - cron: '0 0 * * *' # Daily at midnight UTC (9 AM KST)

  workflow_dispatch: # Allow manual triggering
    inputs:
      reason:
        description: 'Reason for manual trigger (e.g., "urgent backup")'
        required: false
        default: 'Manual trigger from UI'

jobs:
  mysql-backup:
    runs-on: ubuntu-latest # Runner environment

    permissions:
      contents: write # Needed to read repo contents and push backup files

    steps:
      - name: Checkout repository # Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Essential for pushing changes back

      - name: Set up MySQL Client # Install MySQL client for mysqldump
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client-core-8.0 # Adjust version if needed for your OS

      - name: Create Backup Directory # Create directory for backups
        run: mkdir -p ./backups

      - name: Run MySQL Backup Script # Execute the backup script
        id: perform_backup # ID for referencing step outputs
        run: |
          #!/bin/bash
          BACKUP_FILENAME="mysql_backup_$(date +%Y%m%d_%H%M%S).sql"
          BACKUP_FILE_PATH="./backups/$BACKUP_FILENAME"

          echo "--- MySQL 백업 스크립트 시작 ---"
          echo "백업 파일명: $BACKUP_FILENAME"
          echo "백업 파일 경로: $BACKUP_FILE_PATH"
          echo "MySQL 호스트: $MYSQL_HOST"
          echo "MySQL 포트: $MYSQL_PORT"
          echo "MySQL 사용자: $MYSQL_USER"

          # IMPORTANT: Verify MYSQL_PASSWORD is set from environment variable
          if [ -z "$MYSQL_PASSWORD" ]; then
              echo "⭐⭐⭐ 치명적 오류: MySQL 비밀번호(MYSQL_PASSWORD)가 환경 변수로 설정되지 않았습니다. ⭐⭐⭐"
              echo "--------------------------------------------------------------------------------"
              echo "이 오류는 CI/CD 환경의 GitHub Secrets에 'MYSQL_ROOT_PASSWORD'가 없거나"
              echo "워크플로우 YAML에서 이를 'MYSQL_PASSWORD' 환경 변수로 제대로 전달하지 않았기 때문에 발생합니다."
              echo ""
              echo "아래 단계를 따라 GitHub Secrets 설정을 다시 확인하십시오:"
              echo "1. GitHub 저장소로 이동 -> 'Settings' 탭 -> 'Secrets and variables' 아래의 'Actions' 클릭."
              echo "2. 'Repository secrets' 탭에서 'MYSQL_ROOT_PASSWORD'라는 이름의 비밀이 있는지 확인."
              echo "   - 없으면 'New repository secret'으로 생성 (이름: MYSQL_ROOT_PASSWORD, 값: 실제 비밀번호)."
              echo "   - 있으면 값이 올바른지 확인."
              echo "--------------------------------------------------------------------------------"
              exit 1 # Exit with error if password is not set
          fi

          # Perform the MySQL dump
          if [ -n "$MYSQL_DATABASE" ]; then
              echo "특정 데이터베이스 '$MYSQL_DATABASE'를 백업합니다."
              mysqldump -h"$MYSQL_HOST" -P"$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" > "$BACKUP_FILE_PATH"
          else
              echo "모든 데이터베이스를 백업합니다."
              mysqldump --all-databases -h"$MYSQL_HOST" -P"$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" > "$BACKUP_FILE_PATH"
          fi

          if [ $? -eq 0 ]; then
              echo "--- MySQL 백업 성공 ---"
              echo "백업 파일이 '$BACKUP_FILE_PATH'에 생성되었습니다."
              echo "::set-output name=backup_successful::true"
              echo "::set-output name=backup_file_path::$BACKUP_FILE_PATH"
          else
              echo "--- MySQL 백업 실패 ---"
              echo "백업 중 오류가 발생했습니다. 로그를 확인하십시오."
              echo "::set-output name=backup_successful::false"
              exit 1 # Script failure
          fi
        # --- IMPORTANT: Ensure this 'env' block is directly under the 'run' step ---
        env:
          MYSQL_HOST: localhost # Adjust if your MySQL server is not on localhost
          MYSQL_PORT: 3306
          MYSQL_USER: root
          # This is the line that pulls the secret value
          MYSQL_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          # MYSQL_DATABASE: your_database_name # Uncomment and set if backing up a specific DB

      - name: Configure Git for automated commit # Configure Git user
        if: steps.perform_backup.outputs.backup_successful == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for new backup file # Check if a new backup file was created
        id: git_status
        if: steps.perform_backup.outputs.backup_successful == 'true'
        run: |
          git add ./backups/ # Stage the backups directory
          if git diff --staged --quiet; then
            echo "::set-output name=has_changes::false"
            echo "No new backup file or changes to commit."
          else
            echo "::set-output name=has_changes::true"
            echo "New backup file detected. Proceeding to commit."
          fi

      - name: Commit and Push backup file # Commit and push changes
        if: steps.git_status.outputs.has_changes == 'true'
        run: |
          echo "Attempting to commit and push backup file..."
          git fetch origin main # Fetch latest remote changes
          git rebase origin/main --autostash --no-edit || { # Rebase, or fall back to merge
            echo "Rebase failed. Trying to merge remote changes instead."
            git merge origin/main --no-edit || {
              echo "Error: Both rebase and merge failed due to unresolvable conflicts. Manual intervention is required."
              exit 1
            }
          }
          git commit -m "feat(backup): Auto-generated MySQL backup for ${{ github.ref_name }}" || true # Commit
          git push origin main # Push
          echo "Successfully pushed MySQL backup."

      - name: Upload backup file as artifact # Upload as GitHub Actions artifact (optional)
        if: steps.perform_backup.outputs.backup_successful == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mysql-backup-${{ github.run_id }}
          path: ${{ steps.perform_backup.outputs.backup_file_path }}
          retention-days: 7 # Retention period in days
