name: Generate Workflow Run Log

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'

jobs:
  generate_log:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository (with full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper synchronization

      - name: Synchronize with remote (Explicit Rebase/Merge)
        # This step ensures the local branch is fully up-to-date
        # before any new local commits are made by git-auto-commit-action.
        run: |
          LOCAL_BRANCH="${{ github.ref_name }}"
          REMOTE_BRANCH="origin/${{ github.ref_name }}"

          echo "Current local branch: $LOCAL_BRANCH"
          echo "Current remote branch: $REMOTE_BRANCH"

          # Fetch the latest changes from the remote
          git fetch origin

          # Check if the remote branch exists. If not, the current branch is new.
          if git branch -r | grep -q "$REMOTE_BRANCH"; then
            # Attempt to rebase the local branch onto the remote.
            # This is generally cleaner than merging for automated commits.
            # `--autostash` handles uncommitted changes.
            echo "Attempting to rebase local branch '$LOCAL_BRANCH' on top of '$REMOTE_BRANCH'..."
            git pull --rebase origin "$LOCAL_BRANCH" # This pulls and rebases
            if [ $? -ne 0 ]; then
              echo "Rebase failed. Trying merge instead..."
              git pull --no-rebase origin "$LOCAL_BRANCH" # Fallback to merge
              if [ $? -ne 0 ]; then
                echo "Merge also failed. Aborting workflow."
                exit 1
              fi
            fi
            echo "Branch synchronized successfully."
          else
            echo "Remote branch '$REMOTE_BRANCH' does not exist. Assuming new branch, no pull needed."
          fi

      - name: Fetch workflow runs and generate log
        id: fetch_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash

          REPO="${{ github.repository }}"
          LOG_FILE=".github/workflow_run_log.md"

          echo "# GitHub Workflow Run Log" > "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "This file is automatically generated by the \`Generate Workflow Run Log\` workflow." >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          echo "| Workflow Name | Run ID | Status | Conclusion | Run Time (UTC) | Branch | Committer | Commit Message |" >> "$LOG_FILE"
          echo "|---|---|---|---|---|---|---|---|" >> "$LOG_FILE"

          WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows" | jq -r '.workflows[] | .id')

          for WORKFLOW_ID in $WORKFLOWS; do
            WORKFLOW_NAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID" | jq -r '.name')

            RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=100&status=completed,in_progress,queued&event=push,workflow_dispatch,schedule,pull_request" | jq -r '.workflow_runs[] | "\(.name) \(.id) \(.status) \(.conclusion) \(.created_at) \(.head_branch) \(.head_commit.committer.name) \(.head_commit.message | gsub("[\r\n]"; " "))"')

            if [ -z "$RUNS" ]; then
              continue
            fi

            while IFS= read -r RUN; do
              RUN_ARRAY=($RUN)
              RUN_NAME="${RUN_ARRAY[0]}"
              RUN_ID="${RUN_ARRAY[1]}"
              RUN_STATUS="${RUN_ARRAY[2]}"
              RUN_CONCLUSION="${RUN_ARRAY[3]}"
              RUN_CREATED_AT="${RUN_ARRAY[4]}"
              RUN_BRANCH="${RUN_ARRAY[5]}"
              RUN_COMMITTER="${RUN_ARRAY[6]}"
              
              RUN_COMMIT_MESSAGE=""
              for ((i=7; i<${#RUN_ARRAY[@]}; i++)); do
                  RUN_COMMIT_MESSAGE+="${RUN_ARRAY[i]} "
              done
              RUN_COMMIT_MESSAGE=$(echo "$RUN_COMMIT_MESSAGE" | sed 's/ $//')

              if [ "$RUN_CONCLUSION" == "null" ]; then
                RUN_CONCLUSION="N/A"
              fi

              echo "| $RUN_NAME | $RUN_ID | $RUN_STATUS | $RUN_CONCLUSION | $RUN_CREATED_AT | $RUN_BRANCH | $RUN_COMMITTER | $RUN_COMMIT_MESSAGE |" >> "$LOG_FILE"
            done <<< "$RUNS"
          done

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update workflow run log"
          file_pattern: ".github/workflow_run_log.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
