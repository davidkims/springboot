name: 🧾 다중 고객 명함 생성 + 암호화/복호화

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-encrypted-cards:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4

    - name: 📁 디렉토리 생성
      run: |
        mkdir -p cards_encrypted cards_decrypted

    - name: 🐍 generate_multi_cards.py 및 Dockerfile 생성
      run: |
        echo "from PIL import Image, ImageDraw" > generate_multi_cards.py
        echo "from cryptography.fernet import Fernet" >> generate_multi_cards.py
        echo "import os" >> generate_multi_cards.py
        echo "key = Fernet.generate_key()" >> generate_multi_cards.py
        echo "fernet = Fernet(key)" >> generate_multi_cards.py
        echo "os.makedirs('/data/encrypted', exist_ok=True)" >> generate_multi_cards.py
        echo "os.makedirs('/data/decrypted', exist_ok=True)" >> generate_multi_cards.py
        echo "customer_ids = ['CUST001', 'CUST002', 'CUST003']" >> generate_multi_cards.py
        echo "with open('/data/encrypted/key.key', 'wb') as kf: kf.write(key)" >> generate_multi_cards.py
        echo "for cid in customer_ids:" >> generate_multi_cards.py
        echo "  img = Image.new('RGB', (400, 200), color=(200, 120, 120))" >> generate_multi_cards.py
        echo "  d = ImageDraw.Draw(img)" >> generate_multi_cards.py
        echo "  d.text((10, 80), f'고객 ID: {cid}', fill=(0, 0, 0))" >> generate_multi_cards.py
        echo "  img_path = f'/data/tmp_{cid}.png'" >> generate_multi_cards.py
        echo "  img.save(img_path)" >> generate_multi_cards.py
        echo "  with open(img_path, 'rb') as f: enc = fernet.encrypt(f.read())" >> generate_multi_cards.py
        echo "  with open(f'/data/encrypted/{cid}.enc', 'wb') as ef: ef.write(enc)" >> generate_multi_cards.py
        echo "  dec = fernet.decrypt(enc)" >> generate_multi_cards.py
        echo "  with open(f'/data/decrypted/{cid}.decrypted.png', 'wb') as df: df.write(dec)" >> generate_multi_cards.py
        echo "  os.remove(img_path)" >> generate_multi_cards.py
        echo "print('✅ 다중 명함 생성 및 암호화/복호화 완료')" >> generate_multi_cards.py

        echo "FROM python:3.10-slim" > Dockerfile
        echo "WORKDIR /app" >> Dockerfile
        echo "COPY generate_multi_cards.py /app/" >> Dockerfile
        echo "RUN pip install pillow cryptography" >> Dockerfile
        echo "CMD [\"python\", \"generate_multi_cards.py\"]" >> Dockerfile

    - name: 🛠️ Docker 이미지 빌드
      run: docker build -t customer-card-multi-encrypt .

    - name: 🏃 Docker 컨테이너 실행
      run: |
        docker run --rm \
          -v $(pwd)/cards_encrypted:/data/encrypted \
          -v $(pwd)/cards_decrypted:/data/decrypted \
          customer-card-multi-encrypt

    - name: 📂 결과 확인
      run: |
        echo "📦 암호화된 명함:"
        ls -lh cards_encrypted
        echo "🖼️ 복호화된 명함:"
        ls -lh cards_decrypted

    - name: 📤 아티팩트 업로드 (암호화된 명함)
      uses: actions/upload-artifact@v4
      with:
        name: encrypted-customer-cards
        path: cards_encrypted/

    - name: 📤 아티팩트 업로드 (복호화된 명함)
      uses: actions/upload-artifact@v4
      with:
        name: decrypted-customer-cards
        path: cards_decrypted/
