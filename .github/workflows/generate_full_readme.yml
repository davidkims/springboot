name: Generate Full README.md

on:
  workflow_dispatch: # GitHub UI에서 수동 실행 허용
  push:
    branches: ["main"] # 'main' 브랜치에 코드가 푸시될 때 실행
    paths-ignore:
      - 'README.md' # README.md 변경으로 인한 워크플로우 무한 루프 방지

jobs:
  generate-readme:
    runs-on: ubuntu-latest

    # 중요: GITHUB_TOKEN에 쓰기 권한을 부여해야 합니다.
    # 이 권한이 없으면 github-actions[bot]이 변경 사항을 푸시할 수 없습니다.
    permissions:
      contents: write # 이 설정이 git push를 가능하게 합니다.

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          # git log를 사용하고 push 시 rebase를 위해 전체 커밋 히스토리를 가져옵니다.
          fetch-depth: 0 
          # GITHUB_TOKEN은 기본적으로 제공되며, 위 permissions 설정으로 쓰기 권한을 가집니다.
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: 🐍 Set up Python (Optional:for more complex scripting)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 필요에 따라 3.9, 3.10 등으로 특정 버전 지정 가능

      - name: 📝 Generate Full README.md Content
        id: generate_content
        run: |
          README_PATH="README.md"
          REPO_NAME="davidkims/springboot" # 분석할 저장소 이름

          # --- 1. README.md의 헤더 및 소개 부분 ---
          echo "# 🚀 ${REPO_NAME} 개발 저장소" > "$README_PATH"
          echo "" >> "$README_PATH"
          echo "이 저장소는 Spring Boot 기반의 애플리케이션 개발 예제 및 관련 워크플로우를 포함합니다." >> "$README_PATH"
          echo "아래 내용은 GitHub Actions 워크플로우에 의해 자동으로 생성 및 관리됩니다." >> "$README_PATH"
          echo "" >> "$README_PATH"

          # --- 2. 김병권의 프로그래밍 블로그 소개 ---
          echo "## 👨‍💻 김병권의 프로그래밍 블로그 소개" >> "$README_PATH"
          echo "" >> "$README_PATH"
          echo "안녕하세요! 김병권의 프로그래밍 블로그는 다양한 프로그래밍 주제와 기술 스택에 대한 깊이 있는 통찰과 실용적인 예제를 공유하는 공간입니다. 특히 스프링 부트(Spring Boot), 클라우드 네이티브 개발, 마이크로서비스 아키텍처 등 최신 기술 트렌드에 대한 유용한 정보를 얻을 수 있습니다. 직접 경험하고 학습한 내용을 바탕으로 작성된 글들은 개발자 여러분의 문제 해결과 성장에 큰 도움이 될 것입니다." >> "$README_PATH"
          echo "" >> "$README_PATH"
          echo "👉 [블로그 방문하기](https://example.com/davidkims-blog) " >> "$README_PATH"
          echo "" >> "$README_PATH"

          # --- 3. 워크플로우 설명 섹션 ---
          echo "## ⚙️ GitHub Actions 워크플로우" >> "$README_PATH"
          echo "이 저장소에는 개발 및 배포 자동화를 위한 다음 GitHub Actions 워크플로우가 구성되어 있습니다:" >> "$README_PATH"
          echo "" >> "$README_PATH"

          # .github/workflows 디렉토리에서 모든 .yml 파일을 찾아 분석
          find .github/workflows -name "*.yml" | while IFS= read -r workflow_file; do
              WORKFLOW_NAME=$(grep "^name:" "$workflow_file" | head -n 1 | cut -d':' -f2- | xargs || echo "이름 없음")
              WORKFLOW_SIZE=$(du -b "$workflow_file" | cut -f1)
              # 마지막 커밋 날짜를 한국 시간으로 포맷 (현재 시간: 2025년 06월 05일 22시 57분 39초 KST)
              LAST_UPDATED=$(git log -1 --format="%ad" --date=format:'%Y년 %m월 %d일 %H시 %M분 %S초 KST' "$workflow_file" 2>/dev/null || echo "정보 없음")
              
              echo "### ✨ ${WORKFLOW_NAME} (\`${workflow_file}\`)" >> "$README_PATH"
              echo "- **용량:** ${WORKFLOW_SIZE} 바이트" >> "$README_PATH"
              echo "- **최신 갱신:** ${LAST_UPDATED}" >> "$README_PATH"
              echo "- **설명:**" >> "$README_PATH"
              
              # 워크플로우 파일 이름에 따른 설명 추가 (예시)
              case "$(basename "$workflow_file")" in # 파일 이름만으로 판단
                  "generate_full_readme.yml")
                      echo "  - 이 워크플로우는 \`README.md\` 파일을 자동으로 생성하고 업데이트합니다. 저장소의 파일 분석, 블로그 소개, 워크플로우 정보 등 최신 내용을 반영합니다." >> "$README_PATH"
                      ;;
                  "db.yml") # 이 워크플로우 파일 이름에 맞게 수정
                      echo "  - 이 워크플로우는 기업 금융 데이터를 시뮬레이션하고 백업합니다. 데이터 추출, 암호화, OCI Object Storage 업로드 및 NetBackup CLI 실행 시뮬레이션을 포함합니다." >> "$README_PATH"
                      ;;
                  *) # 그 외의 워크플로우
                      echo "  - 이 워크플로우에 대한 구체적인 설명이 필요합니다. 워크플로우 파일을 검토해주세요." >> "$README_PATH"
                      ;;
              esac
              echo "" >> "$README_PATH"
          done

          # --- 4. NetBackup 구성 가이드 ---
          echo "## 🛡️ NetBackup 구성 가이드 (시뮬레이션)" >> "$README_PATH"
          echo "이 저장소의 워크플로우는 백업 프로세스의 일부로 NetBackup CLI 실행을 시뮬레이션합니다. 실제 환경에서 NetBackup을 사용하려면 다음을 고려해야 합니다:" >> "$README_PATH"
          echo "" >> "$README_PATH"
          echo "### 📦 NetBackup 설치" >> "$README_PATH"
          echo "실제 NetBackup 백업을 수행하려면 해당 시스템에 NetBackup 클라이언트 또는 미디어 서버가 설치되어 있어야 합니다. 설치는 Veritas 공식 문서를 참조해주세요." >> "$README_PATH"
          echo "" >> "$README_PATH"
          echo "### 📁 필요한 파일 및 디렉토리" >> "$README_PATH"
          echo "워크플로우가 백업 파일을 생성하고 이를 NetBackup이 인식할 수 있는 위치에 두려면 다음이 필요합니다:" >> "$README_PATH"
          echo "- **백업 대상 파일:** 워크플로우는 \`output/corporate_banking_backup.sql\` 파일을 생성하고 이를 암호화하여 \`output/corporate_banking_backup.zip\`으로 만듭니다." >> "$README_PATH"
          echo "- **NetBackup 임시/로그 디렉토리:** NetBackup CLI가 로그를 기록하거나 임시 파일을 생성할 수 있는 권한 있는 디렉토리 (예: \`/usr/openv/netbackup/logs\`)." >> "$README_PATH"
          echo "- **OCI CLI 설정 파일:** 워크플로우는 \`~/.oci/oci_api_key.pem\` 파일을 생성하여 OCI Object Storage 접근에 사용합니다. 이 파일의 권한은 \`600\`으로 설정됩니다." >> "$README_PATH"
          echo "" >> "$README_PATH"
          echo "### 🔄 NetBackup CLI 실행 예시" >> "$README_PATH"
          echo "워크플로우 내에서는 다음 명령어가 시뮬레이션됩니다. 실제 환경에서는 적절한 경로와 옵션을 사용해야 합니다." >> "$README_PATH"
          echo "\`\`\`bash" >> "$README_PATH"
          echo "bpbackup -f /path/to/output/corporate_banking_backup.zip -S <master_server> -L /path/to/log_file" >> "$README_PATH"
          echo "\`\`\`" >> "$README_PATH"
          echo "" >> "$README_PATH"

          # --- 5. 저장소 파일 분석 보고서 ---
          echo "## 📊 저장소 파일 분석 보고서" >> "$README_PATH"
          echo "이 섹션은 저장소 내 주요 파일들의 목록과 기본적인 특이사항을 자동으로 분석하여 보여줍니다. (심층적인 코드 분석은 전문 도구가 필요합니다.)" >> "$README_PATH"
          echo "" >> "$README_PATH"

          # git ls-files를 사용하여 모든 파일을 나열하고 분석 보고서에 추가
          git ls-files | while IFS= read -r file; do
              # 분석에서 제외할 디렉토리 및 파일 유형
              if [[ "$file" == ".git/"* || "$file" == "target/"* || "$file" == "build/"* || "$file" == "src/main/resources/static/"* || "$file" == "node_modules/"* || "$file" == ".idea/"* || "$file" == "logs/"* || "$file" == "README.md" || ! -f "$file" ]]; then
                  continue
              fi

              FILE_SIZE=$(du -b "$file" | cut -f1)
              FILE_TYPE=$(file -b --mime-type "$file" 2>/dev/null || echo "unknown/type")

              echo "#### 📄 \`${file}\`" >> "$README_PATH"
              echo "- **파일 크기:** ${FILE_SIZE} 바이트" >> "$README_PATH"
              echo "- **파일 타입:** \`${FILE_TYPE}\`" >> "$README_PATH"

              SPECIAL_NOTE="자동 분석된 특이사항 없음. 수동 검토가 필요할 수 있습니다."
              if [[ "$file" == *.java ]]; then
                  if grep -q "TODO" "$file" 2>/dev/null; then
                      SPECIAL_NOTE="TODO 주석이 발견되었습니다."
                  fi
                  if grep -qE "System\.out\.print|e\.printStackTrace" "$file" 2>/dev/null; then
                      SPECIAL_NOTE+="\n  - 디버깅용 출력 코드 (System.out.print 등) 또는 예외 스택 트레이스 출력 (e.printStackTrace) 발견 가능성. 프로덕션 코드에서 제거를 권장합니다."
                  fi
              elif [[ "$file" == *.xml || "$file" == *.properties || "$file" == *.yml || "$file" == *.yaml ]]; then
                  if grep -qE "password|secret|api_key" "$file" 2>/dev/null; then
                      SPECIAL_NOTE="민감 정보(password, secret, api_key 등) 키워드 발견 가능성. 외부 노출에 주의하고 GitHub Secrets 사용을 권장합니다."
                  fi
              elif [[ "$file" == *.sh || "$file" == *.bat ]]; then
                  SPECIAL_NOTE="스크립트 파일입니다. 실행 권한 및 보안에 유의해야 합니다."
              elif [[ "$file" == *.md ]]; then
                  SPECIAL_NOTE="마크다운 문서입니다."
              fi

              echo "- **특이사항:** ${SPECIAL_NOTE}" >> "$README_PATH"
              echo "" >> "$README_PATH"
          done

          # --- 6. 보고서 생성 날짜 ---
          echo "## 📅 보고서 생성 날짜" >> "$README_PATH"
          echo "$(date '+%Y년 %m월 %d일 %H시 %M분 %S초 KST')" >> "$README_PATH"
          echo "" >> "$README_PATH"

          # 변경 사항이 있는지 확인합니다.
          # 현재 README.md 파일과 git이 추적하는 README.md 파일 간의 차이가 있는지 확인합니다.
          if git diff --exit-code --quiet "$README_PATH"; then
              echo "✅ README.md에 변경 사항이 없습니다. 업데이트를 건너뜀."
              echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
              echo "🔄 README.md가 업데이트되었습니다. 커밋 및 푸시 준비 중..."
              echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: ⚙️ Configure Git
        # README.md에 변경 사항이 있을 경우에만 Git 설정을 진행합니다.
        if: steps.generate_content.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: ⬆️ Commit and Push Changes
        # README.md에 변경 사항이 있을 경우에만 커밋 및 푸시를 진행합니다.
        if: steps.generate_content.outputs.has_changes == 'true'
        run: |
          git add README.md
          git commit -m "Docs: Auto-generated README.md with comprehensive repository info"
          
          # --- 중요 수정: 다른 변경 사항으로 인한 푸시 거부 오류 해결 ---
          # 최신 원격 변경 사항을 가져와 로컬 변경 사항을 그 위에 rebase 합니다.
          # 이는 'remote rejected' 오류를 방지하고 깔끔한 커밋 히스토리를 유지하는 데 도움이 됩니다.
          git pull --rebase origin main 
          # ------------------------------------------------------------------

          # GITHUB_TOKEN을 사용하여 변경 사항을 푸시합니다.
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
