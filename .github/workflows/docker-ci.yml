name: Docker 이미지 빌드 및 배포 (오류 스킵 포함)

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행
  pull_request:
    branches:
      - main # main 브랜치로 풀 리퀘스트 발생 시 워크플로우 실행
  workflow_dispatch: # GitHub UI에서 수동으로 워크플로우를 실행할 수 있도록 허용

env:
  # Docker 이미지 이름 (원하는 이름으로 변경하세요)
  IMAGE_NAME: my-app-image
  # Docker 이미지 태그 (Git SHA를 사용하여)
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 이 작업을 실행할 운영체제 환경을 지정합니다.

    # 권한 설정: Docker Hub 또는 GHCR에 이미지를 푸시하려면 'packages: write' 권한이 필요합니다.
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: 🚀 코드 체크아웃
        uses: actions/checkout@v4
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 💬 코드 체크아웃 완료 메시지
        run: echo "--- 리포지토리 코드 체크아웃 완료 ---"

      - name: 🐳 Docker 및 Docker Compose 수동 설치
        # docker/setup-docker 액션을 사용하지 않고 직접 설치합니다.
        run: |
          echo "--- Docker 및 Docker Compose 수동 설치 시작 ---"
          sudo apt-get update -y
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl --proto '=https' --tlsv1.2 -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          echo "--- Docker 및 Docker Compose 수동 설치 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: ℹ️ Docker CLI 버전 확인 및 정보 출력
        run: |
          echo "현재 시스템의 Docker 버전은 다음과 같습니다:"
          docker --version
          echo "Docker Compose 버전 (설치되어 있는 경우):"
          docker compose version || true
          echo "Docker 시스템 정보:"
          docker info
          echo "--- Docker CLI 준비 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 📁 파일 및 디렉토리 생성
        run: |
          echo "--- 파일 및 디렉토리 생성 시작 ---"
          echo "새로운 디렉토리 'my-data-volume' 생성 중..."
          mkdir -p my-data-volume/logs
          echo "새로운 파일 'my-data-volume/app.log' 생성 중..."
          echo "애플리케이션 시작 로그: $(date)" > my-data-volume/app.log
          echo "또 다른 파일 'my-data-volume/logs/error.log' 생성 중..."
          echo "에러 발생: $(date)" > my-data-volume/logs/error.log
          echo "생성된 파일 및 디렉토리 구조 확인:"
          ls -R my-data-volume/
          echo "--- 파일 및 디렉토리 생성 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: ⚙️ Docker Buildx 설정 (Docker 수동 설치 시에는 필요 없을 수 있음)
        # docker-buildx-plugin이 수동 설치에 포함되었으므로 이 액션은 필요 없을 수 있으나,
        # 안정성을 위해 남겨둡니다. 오류 발생 시 이 액션도 제거 고려.
        uses: docker/setup-buildx-action@v2
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 💬 Docker Buildx 설정 완료 메시지
        run: echo "--- Docker Buildx 설정 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 🔑 Docker Hub 시크릿 환경 변수 설정
        run: |
          echo "DOCKER_USERNAME_VAL=${{ secrets.DOCKER_USERNAME || '' }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD_VAL=${{ secrets.DOCKER_PASSWORD || '' }}" >> $GITHUB_ENV
        continue-on-error: true

      - name: 🔑 Docker Hub 로그인 (선택 사항:docker Hub에 푸시할 경우)
        if: ${{ env.DOCKER_USERNAME_VAL != '' && env.DOCKER_PASSWORD_VAL != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME_VAL }}
          password: ${{ env.DOCKER_PASSWORD_VAL }}
        continue-on-error: true # 로그인 실패 시에도 다음 단계 진행

      - name: 💬 Docker Hub 로그인 시도 완료 메시지 (조건부 출력)
        if: ${{ env.DOCKER_USERNAME_VAL != '' && env.DOCKER_PASSWORD_VAL != '' }}
        run: echo "--- Docker Hub 로그인 시도 완료 (시크릿이 있는 경우) ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 🔑 GitHub Container Registry (GHCR) 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 💬 GHCR 로그인 시도 완료 메시지
        run: echo "--- GHCR 로그인 시도 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 🏗️ Docker 이미지 빌드
        # docker/build-push-action@v4를 사용합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile # Dockerfile 경로 지정
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          outputs: type=docker # 빌드된 이미지를 Docker 데몬에 로드하여 다음 단계에서 사용 가능하게 합니다.
          push: false # 일단 빌드하고 푸시는 하지 않습니다.
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 💬 Docker 이미지 빌드 시작 및 완료 메시지
        run: |
          echo "--- Docker 이미지 빌드 시작 ---"
          echo "빌드 중인 이미지: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Dockerfile 경로: ./Dockerfile"
          echo "--- Docker 이미지 빌드 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 🔍 빌드된 Docker 이미지 확인
        run: |
          echo "--- 빌드된 Docker 이미지 목록 ---"
          docker images
          echo "--- 이미지 확인 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 📤 Docker 이미지 푸시 (Docker Hub)
        if: ${{ env.DOCKER_USERNAME_VAL != '' && env.DOCKER_PASSWORD_VAL != '' }}
        run: |
          echo "--- Docker Hub로 이미지 푸시 시작 ---"
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_NAME }}:latest # 최신 태그도 푸시
          echo "--- Docker Hub 푸시 완료 ---"
        continue-on-error: true # 푸시 실패 시에도 다음 단계 진행

      - name: 📤 Docker 이미지 푸시 (GitHub Container Registry)
        run: |
          echo "--- GHCR로 이미지 푸시 시작 ---"
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          echo "--- GHCR 푸시 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행

      - name: 🏃 Docker 컨테이너 실행 (선택 사항:빌드된 이미지 테스트용)
        run: |
          echo "--- Docker 컨테이너 실행 시작 (테스트용) ---"
          echo "실행 중인 이미지: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker run --rm ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          echo "--- Docker 컨테이너 실행 완료 ---"
        continue-on-error: true # 오류 발생 시에도 다음 단계 진행
