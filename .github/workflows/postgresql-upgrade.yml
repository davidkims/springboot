# This YAML defines a step or job for performing a MySQL database backup.
# It's designed to be easily integrated into CI/CD pipelines (e.g., GitHub Actions).

name: MySQL Database Backup

on:
  # Define when this job should run, e.g., on a schedule or manual trigger
  workflow_dispatch: # Allows manual triggering
  # schedule:
  #   - cron: '0 2 * * *' # Runs daily at 2 AM UTC

jobs:
  backup_mysql:
    runs-on: ubuntu-latest # Or your preferred runner environment

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to checkout your code

    - name: Perform MySQL Backup
      env:
        # MySQL 연결 상세 정보
        MYSQL_HOST: localhost # MySQL 호스트 (기본값: localhost)
        MYSQL_PORT: 3306      # MySQL 포트 (기본값: 3306)
        MYSQL_USER: root      # MySQL 사용자 (기본값: root)
        # 중요: MySQL 비밀번호를 여기에 직접 입력하거나,
        # CI/CD 환경의 비밀(secrets)로 설정하는 것이 좋습니다.
        # 예: MYSQL_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_PASSWORD: YOUR_MYSQL_ROOT_PASSWORD # 실제 비밀번호로 교체하거나 secrets 사용
        # MYSQL_DATABASE를 설정하면 특정 데이터베이스만 백업합니다.
        # 비워두면 모든 데이터베이스를 백업합니다.
        # 예: MYSQL_DATABASE: your_specific_database_name
        MYSQL_DATABASE: ""
      run: |
        #!/bin/bash

        # 타임스탬프를 포함한 백업 파일명 정의
        BACKUP_FILENAME="mysql_backup_$(date +%Y%m%d_%H%M%S).sql"

        # IMPORTANT: MYSQL_PWD 환경 변수를 사용하여 mysqldump에 비밀번호를 안전하게 전달합니다.
        # 이렇게 하면 명령줄 기록에 비밀번호가 직접 노출되는 것을 방지할 수 있습니다.
        export MYSQL_PWD="${MYSQL_PASSWORD}"

        # 비밀번호가 플레이스홀더인지 확인
        if [ "$MYSQL_PWD" == "YOUR_MYSQL_ROOT_PASSWORD" ]; then
          echo "오류: MySQL 비밀번호가 설정되지 않았습니다. 'YOUR_MYSQL_ROOT_PASSWORD'를 실제 비밀번호로 교체하거나 MYSQL_PASSWORD 환경 변수를 설정하십시오."
          exit 1
        fi

        # 백업 수행
        if [ -z "$MYSQL_DATABASE" ]; then
          # MYSQL_DATABASE가 설정되지 않은 경우 모든 데이터베이스 백업
          echo "모든 MySQL 데이터베이스를 덤프합니다 (호스트: $MYSQL_HOST, 포트: $MYSQL_PORT, 사용자: $MYSQL_USER)..."
          mysqldump --all-databases \
                    --host="$MYSQL_HOST" \
                    --port="$MYSQL_PORT" \
                    --user="$MYSQL_USER" > "$BACKUP_FILENAME"
        else
          # MYSQL_DATABASE가 설정된 경우 특정 데이터베이스 백업
          echo "MySQL 데이터베이스 '$MYSQL_DATABASE'를 덤프합니다 (호스트: $MYSQL_HOST, 포트: $MYSQL_PORT, 사용자: $MYSQL_USER)..."
          mysqldump --host="$MYSQL_HOST" \
                    --port="$MYSQL_PORT" \
                    --user="$MYSQL_USER" \
                    "$MYSQL_DATABASE" > "$BACKUP_FILENAME"
        fi

        # mysqldump 성공 여부 확인
        if [ $? -eq 0 ]; then
          echo "MySQL 백업이 성공적으로 생성되었습니다: $BACKUP_FILENAME"
        else
          echo "오류: MySQL 백업에 실패했습니다. 위의 오류 메시지를 확인하십시오."
          exit 1
        fi

    # 선택 사항: 백업 파일을 아티팩트로 업로드
    - name: Upload Backup File as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mysql-backup
        path: "*.sql" # 백업 파일명 패턴에 맞게 조정
