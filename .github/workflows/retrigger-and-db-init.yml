name: 🧾 거래 자동화 - PDF 영수증 + 실시간 반영 포함

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  compose-ledger:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 저장소 체크아웃 및 디렉토리 생성
        uses: actions/checkout@v4

      - name: 📁 echo 기반 파일 및 폴더 생성
        run: |
          mkdir -p app output

          echo "📄 ledger.py 생성"
          echo 'import csv, os, time, datetime, random' > app/ledger.py
          echo 'import psycopg2, mysql.connector' >> app/ledger.py
          echo 'from fpdf import FPDF' >> app/ledger.py
          echo 'def wait(): time.sleep(10)' >> app/ledger.py
          echo 'def connect_pg(): return psycopg2.connect(host="postgres", dbname="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo 'def connect_my(): return mysql.connector.connect(host="mysql", database="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo 'def generate(): return [[' >> app/ledger.py
          echo ' datetime.datetime.now().isoformat(), t, c, round(random.uniform(10,10000),2), random.choice(["KRW","USD"]), random.choice(["승인","거절"]), f"{c} {t} 거래"]' >> app/ledger.py
          echo ' for _ in range(50) for t in ["신용카드","체크카드","FX"] for c in ["중소기업","대기업"]]' >> app/ledger.py
          echo 'def save_csv(rows):' >> app/ledger.py
          echo ' with open("output/transactions.csv", "w", newline="", encoding="utf-8") as f:' >> app/ledger.py
          echo '  csv.writer(f).writerows([["시간","유형","기업구분","금액","통화","상태","설명"]] + rows)' >> app/ledger.py
          echo 'def save_pg(rows):' >> app/ledger.py
          echo ' c = connect_pg(); cur = c.cursor()' >> app/ledger.py
          echo ' cur.execute("CREATE TABLE IF NOT EXISTS tx_pg (시간 TEXT, 유형 TEXT, 기업구분 TEXT, 금액 REAL, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo ' cur.executemany("INSERT INTO tx_pg VALUES (%s,%s,%s,%s,%s,%s,%s)", rows); c.commit(); c.close()' >> app/ledger.py
          echo 'def save_my(rows):' >> app/ledger.py
          echo ' c = connect_my(); cur = c.cursor()' >> app/ledger.py
          echo ' cur.execute("CREATE TABLE IF NOT EXISTS tx_my (시간 TEXT, 유형 TEXT, 기업구분 TEXT, 금액 FLOAT, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo ' cur.executemany("INSERT INTO tx_my VALUES (%s,%s,%s,%s,%s,%s,%s)", rows); c.commit(); c.close()' >> app/ledger.py
          echo 'def generate_receipts(rows):' >> app/ledger.py
          echo ' os.makedirs("output/receipts", exist_ok=True)' >> app/ledger.py
          echo ' for i, row in enumerate(rows):' >> app/ledger.py
          echo '  txt = f"output/receipts/receipt_{i+1:03}.txt"' >> app/ledger.py
          echo '  with open(txt, "w", encoding="utf-8") as f:' >> app/ledger.py
          echo '   f.write(f"영수증 번호: {i+1:03}\n시간: {row[0]}\n유형: {row[1]}\n기업구분: {row[2]}\n금액: {row[3]} {row[4]}\n상태: {row[5]}\n설명: {row[6]}\n")' >> app/ledger.py
          echo 'def generate_pdfs(rows):' >> app/ledger.py
          echo ' for i, row in enumerate(rows):' >> app/ledger.py
          echo '  pdf = FPDF(); pdf.add_page(); pdf.set_font("Arial", size=12)' >> app/ledger.py
          echo '  lines = [' >> app/ledger.py
          echo '   f"영수증 번호: {i+1:03}", f"시간: {row[0]}", f"유형: {row[1]}", f"기업구분: {row[2]}", f"금액: {row[3]} {row[4]}", f"상태: {row[5]}", f"설명: {row[6]}"]' >> app/ledger.py
          echo '  [pdf.cell(200, 10, txt=line, ln=1) for line in lines]' >> app/ledger.py
          echo '  pdf.output(f"output/receipts/receipt_{i+1:03}.pdf")' >> app/ledger.py
          echo 'def stream_transactions():' >> app/ledger.py
          echo ' while True:' >> app/ledger.py
          echo '  new_row = [datetime.datetime.now().isoformat(), "FX", "중소기업", round(random.uniform(100, 1000), 2), "USD", "승인", "실시간 거래"]' >> app/ledger.py
          echo '  print(f"📈 실시간 거래 반영: {new_row}")' >> app/ledger.py
          echo '  save_pg([new_row]); save_my([new_row]); time.sleep(10)' >> app/ledger.py
          echo 'if __name__ == "__main__":' >> app/ledger.py
          echo ' wait(); rows = generate(); save_csv(rows); save_pg(rows); save_my(rows); generate_receipts(rows); generate_pdfs(rows)' >> app/ledger.py
          echo ' stream_transactions()' >> app/ledger.py

          echo "📄 Dockerfile 생성"
          echo 'FROM python:3.10-slim' > app/Dockerfile
          echo 'WORKDIR /app' >> app/Dockerfile
          echo 'COPY ledger.py .' >> app/Dockerfile
          echo 'RUN apt-get update && apt-get install -y gcc libpq-dev libjpeg-dev libfreetype6-dev build-essential' >> app/Dockerfile
          echo 'RUN pip install --no-cache-dir psycopg2 mysql-connector-python fpdf' >> app/Dockerfile
          echo 'CMD ["python", "ledger.py"]' >> app/Dockerfile

          echo "📄 docker-compose.yml 생성"
          echo 'version: "3.9"' > docker-compose.yml
          echo 'services:' >> docker-compose.yml
          echo '  postgres:' >> docker-compose.yml
          echo '    image: postgres:14' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      POSTGRES_USER: ledger' >> docker-compose.yml
          echo '      POSTGRES_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      POSTGRES_DB: ledgerdb' >> docker-compose.yml
          echo '    volumes: [pgdata:/var/lib/postgresql/data]' >> docker-compose.yml
          echo '  mysql:' >> docker-compose.yml
          echo '    image: mysql:8' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      MYSQL_ROOT_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      MYSQL_DATABASE: ledgerdb' >> docker-compose.yml
          echo '      MYSQL_USER: ledger' >> docker-compose.yml
          echo '      MYSQL_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '    volumes: [mysqldata:/var/lib/mysql]' >> docker-compose.yml
          echo '  ledger:' >> docker-compose.yml
          echo '    build: ./app' >> docker-compose.yml
          echo '    depends_on: [postgres, mysql]' >> docker-compose.yml
          echo '    volumes: [./output:/app/output]' >> docker-compose.yml
          echo 'volumes:' >> docker-compose.yml
          echo '  pgdata:' >> docker-compose.yml
          echo '  mysqldata:' >> docker-compose.yml

      - name: 🛠️ Docker Compose Build & Start
        run: |
          echo "🔧 Docker Compose Build 시작"
          docker compose build
          echo "🚀 Docker Compose 컨테이너 시작"
          docker compose up -d

      - name: ⏱️ 컨테이너 초기화 대기
        run: sleep 20

      - name: 📤 거래 CSV 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 거래데이터
          path: output/transactions.csv

      - name: 📤 영수증 TXT 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 영수증_텍스트
          path: output/receipts/*.txt

      - name: 📤 영수증 PDF 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 영수증_PDF
          path: output/receipts/*.pdf
