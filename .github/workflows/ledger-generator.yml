name: 🧾 거래 자동화 - Docker Compose + 지속 컨테이너

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  compose-ledger:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 저장소 체크아웃 및 디렉토리 생성
        uses: actions/checkout@v4

      - name: 📁 echo 기반 파일 및 폴더 생성
        run: |
          mkdir -p app output

          echo "📄 ledger.py 생성"
          echo 'import csv' > app/ledger.py
          echo 'import datetime' >> app/ledger.py
          echo 'import random' >> app/ledger.py
          echo 'import psycopg2, mysql.connector' >> app/ledger.py
          echo 'import os, time' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def wait_for_db(): time.sleep(10)' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def connect_postgres(): return psycopg2.connect(host="postgres", dbname="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo 'def connect_mysql(): return mysql.connector.connect(host="mysql", database="ledgerdb", user="ledger", password="ledgerpass")' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def generate(): return [' >> app/ledger.py
          echo ' [datetime.datetime.now().isoformat(), t, c, round(random.uniform(10.0,10000.0),2), random.choice(["KRW","USD"]), random.choice(["승인","거절"]), f"{c} {t} 거래"]' >> app/ledger.py
          echo ' for _ in range(50) for t in ["신용카드","체크카드","FX"] for c in ["중소기업","대기업"]]' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def save_csv(rows):' >> app/ledger.py
          echo ' with open("output/transactions.csv", "w", newline="", encoding="utf-8") as f:' >> app/ledger.py
          echo '  writer = csv.writer(f); writer.writerow(["시간","유형","기업구분","금액","통화","상태","설명"]); writer.writerows(rows)' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def save_pg(rows):' >> app/ledger.py
          echo '  conn = connect_postgres(); cur = conn.cursor()' >> app/ledger.py
          echo '  cur.execute("CREATE TABLE IF NOT EXISTS tx_pg (시간 TEXT, 유형 TEXT, 기업구분 TEXT, 금액 REAL, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo '  cur.executemany("INSERT INTO tx_pg VALUES (%s,%s,%s,%s,%s,%s,%s)", rows); conn.commit(); cur.close(); conn.close()' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'def save_mysql(rows):' >> app/ledger.py
          echo '  conn = connect_mysql(); cur = conn.cursor()' >> app/ledger.py
          echo '  cur.execute("CREATE TABLE IF NOT EXISTS tx_my (시간 TEXT, 유형 TEXT, 기업구분 TEXT, 금액 FLOAT, 통화 TEXT, 상태 TEXT, 설명 TEXT)")' >> app/ledger.py
          echo '  cur.executemany("INSERT INTO tx_my VALUES (%s,%s,%s,%s,%s,%s,%s)", rows); conn.commit(); cur.close(); conn.close()' >> app/ledger.py
          echo '' >> app/ledger.py
          echo 'if __name__ == "__main__":' >> app/ledger.py
          echo ' wait_for_db(); rows = generate(); save_csv(rows); save_pg(rows); save_mysql(rows)' >> app/ledger.py

          echo "📄 Dockerfile 생성"
          echo 'FROM python:3.10-slim' > app/Dockerfile
          echo 'WORKDIR /app' >> app/Dockerfile
          echo 'COPY ledger.py .' >> app/Dockerfile
          echo 'RUN apt-get update && apt-get install -y gcc libpq-dev default-libmysqlclient-dev' >> app/Dockerfile
          echo 'RUN pip install psycopg2 mysql-connector-python' >> app/Dockerfile
          echo 'CMD ["python", "ledger.py"]' >> app/Dockerfile

          echo "📄 docker-compose.yml 생성"
          echo 'version: "3.8"' > docker-compose.yml
          echo 'services:' >> docker-compose.yml
          echo '  postgres:' >> docker-compose.yml
          echo '    image: postgres:14' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      POSTGRES_USER: ledger' >> docker-compose.yml
          echo '      POSTGRES_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      POSTGRES_DB: ledgerdb' >> docker-compose.yml
          echo '    volumes:' >> docker-compose.yml
          echo '      - pgdata:/var/lib/postgresql/data' >> docker-compose.yml
          echo '' >> docker-compose.yml
          echo '  mysql:' >> docker-compose.yml
          echo '    image: mysql:8' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      MYSQL_ROOT_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '      MYSQL_DATABASE: ledgerdb' >> docker-compose.yml
          echo '      MYSQL_USER: ledger' >> docker-compose.yml
          echo '      MYSQL_PASSWORD: ledgerpass' >> docker-compose.yml
          echo '    volumes:' >> docker-compose.yml
          echo '      - mysqldata:/var/lib/mysql' >> docker-compose.yml
          echo '' >> docker-compose.yml
          echo '  ledger:' >> docker-compose.yml
          echo '    build: ./app' >> docker-compose.yml
          echo '    depends_on:' >> docker-compose.yml
          echo '      - postgres' >> docker-compose.yml
          echo '      - mysql' >> docker-compose.yml
          echo '    volumes:' >> docker-compose.yml
          echo '      - ./output:/app/output' >> docker-compose.yml
          echo 'volumes:' >> docker-compose.yml
          echo '  pgdata:' >> docker-compose.yml
          echo '  mysqldata:' >> docker-compose.yml

      - name: 🛠️ Docker Compose Build & Start
        run: |
          echo "🔧 Docker Compose Build 시작"
          docker-compose build
          echo "🚀 Docker Compose 컨테이너 시작"
          docker-compose up -d

      - name: ⏱️ 컨테이너 초기화 대기
        run: |
          echo "⏱️ DB 초기화 대기 중 (20초)"
          sleep 20

      - name: 📄 결과 CSV 확인 및 업로드
        run: |
          cat output/transactions.csv || echo "⚠️ CSV 파일 없음"
        shell: bash

      - name: 📤 CSV 결과 업로드
        uses: actions/upload-artifact@v4
        with:
          name: 거래데이터
          path: output/transactions.csv
