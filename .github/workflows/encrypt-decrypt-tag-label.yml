name: 🔐 암호화/복호화 + Codex 요금 추적

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  encrypt-track-codex:
    runs-on: ubuntu-latest

    env:
      ENCRYPT_DIR: /opt/encrypt
      DECRYPT_DIR: /opt/decrypt
      TAG_REPORT: codex-usage.md
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: 📁 저장소 체크아웃
        uses: actions/checkout@v4

      - name: 🔑 Generate OpenAI token
        id: generate_token
        run: bash scripts/generate_openai_token.sh
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: true

      - name: Skip when token missing
        if: steps.generate_token.outcome != 'success'
        run: echo "Token unavailable; skipping workflow." && exit 0

      - name: 🔐 암호화 / 복호화 태그 파일 생성
        if: steps.generate_token.outcome == 'success'
        run: |
          mkdir -p $ENCRYPT_DIR $DECRYPT_DIR
          for company in 삼성 현대 롯데; do
            echo "company=$company" > "$ENCRYPT_DIR/transactions_${company}.enc"
            echo "key=secretkey-${RANDOM}" >> "$ENCRYPT_DIR/transactions_${company}.enc"
            echo "암호화됨" >> "$ENCRYPT_DIR/transactions_${company}.enc"

            cp "$ENCRYPT_DIR/transactions_${company}.enc" "$DECRYPT_DIR/transactions_${company}.dec"
            echo "복호화됨" >> "$DECRYPT_DIR/transactions_${company}.dec"
          done

      - name: 💰 Codex 요금 API 호출 및 보고서 생성
        if: steps.generate_token.outcome == 'success'
        run: |
          echo "# 💵 Codex 요금 추적 보고서" > $TAG_REPORT
          echo "실행 시간: $(date)" >> $TAG_REPORT

          echo "Codex 모델 사용량 추적 중..." >> $TAG_REPORT

          curl --proto '=https' --tlsv1.2 https://api.openai.com/v1/usage \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            --silent > usage_raw.json || echo "❌ 사용량 불러오기 실패"

          if grep -q "total_usage" usage_raw.json; then
            total=$(jq '.total_usage' usage_raw.json)
            echo "- 전체 사용량: $total tokens" >> $TAG_REPORT
          else
            echo "- 사용량 정보를 가져오지 못했습니다." >> $TAG_REPORT
          fi

          echo "보고 완료"
          cat $TAG_REPORT

      - name: 🧾 태그 및 보고서 아카이브
        if: steps.generate_token.outcome == 'success'
        run: |
          mkdir -p output
          zip -j output/encrypted_files.zip $ENCRYPT_DIR/*.enc $DECRYPT_DIR/*.dec
          cp $TAG_REPORT output/
          echo "📦 압축 완료 및 보고서 생성됨"
