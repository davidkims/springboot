name: Daily Database Backup

on:
  schedule:
    # 매일 자정(UTC)에 실행
    - cron: '0 0 * * *'
  workflow_dispatch: # 수동 실행을 위한 트리거

jobs:
  backup-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client (if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Backup PostgreSQL Database
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }} # GitHub Secret
          DB_HOST: ${{ secrets.DB_HOST }} # GitHub Secret
          DB_PORT: ${{ secrets.DB_PORT }} # GitHub Secret
          DB_USER: ${{ secrets.DB_USER }} # GitHub Secret
          DB_NAME: ${{ secrets.DB_NAME }} # GitHub Secret
          BACKUP_FILE: database_backup_$(date +%Y%m%d%H%M%S).sql
        run: |
          pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME > $BACKUP_FILE
          # 개인정보 보호를 위해 백업 파일 암호화 (예: OpenSSL 사용)
          # openssl enc -aes-256-cbc -salt -in $BACKUP_FILE -out $BACKUP_FILE.enc -k ${{ secrets.ENCRYPTION_KEY }}
          # rm $BACKUP_FILE # 원본 파일 삭제

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secret
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secret
          aws-region: ap-northeast-2 # 사용하려는 AWS Region

      - name: Upload Backup to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }} # GitHub Secret
          BACKUP_FILE: database_backup_$(date +%Y%m%d%H%M%S).sql # 암호화된 파일명으로 변경해야 할 수 있습니다.
        run: |
          aws s3 cp $BACKUP_FILE s3://$S3_BUCKET/$BACKUP_FILE
          # 만약 암호화된 파일을 업로드했다면:
          # aws s3 cp $BACKUP_FILE.enc s3://$S3_BUCKET/$BACKUP_FILE.enc

      - name: Clean up local backup file
        run: |
          # rm $BACKUP_FILE
          # rm $BACKUP_FILE.enc # 암호화된 파일도 삭제
