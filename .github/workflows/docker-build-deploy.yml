name: Build & Deploy finance-transactions with DB Backup

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성
        run: |
          echo "[+] requirements.txt 생성"
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "[✔] requirements.txt 생성 완료"

      - name: ⚙️ .env 파일 생성
        run: |
          echo "[+] .env 파일 생성"
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "[✔] .env 파일 생성 완료"

      - name: 🐍 app.py 생성 (또는 다운로드)
        run: |
          echo "[+] app.py 생성 또는 다운로드"
          curl -fsSL https://raw.githubusercontent.com/example-repo/finance-transactions/main/app.py -o app.py && echo "[✔] app.py 다운로드 성공" || {
            echo "[!] 다운로드 실패 - 로컬에서 생성 중"
            echo "from flask import Flask, request, jsonify" > app.py
            echo "from flask_sqlalchemy import SQLAlchemy" >> app.py
            echo "from dotenv import load_dotenv" >> app.py
            echo "import os" >> app.py
            echo "" >> app.py
            echo "load_dotenv()" >> app.py
            echo "app = Flask(__name__)" >> app.py
            echo "" >> app.py
            echo "DB_URI = f\"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('POSTGRES_DB')}\"" >> app.py
            echo "app.config['SQLALCHEMY_DATABASE_URI'] = DB_URI" >> app.py
            echo "db = SQLAlchemy(app)" >> app.py
            echo "" >> app.py
            echo "class Transaction(db.Model):" >> app.py
            echo "    id = db.Column(db.Integer, primary_key=True)" >> app.py
            echo "    amount = db.Column(db.Float)" >> app.py
            echo "    currency = db.Column(db.String(10))" >> app.py
            echo "    status = db.Column(db.String(20))" >> app.py
            echo "" >> app.py
            echo "@app.before_first_request" >> app.py
            echo "def create_tables():" >> app.py
            echo "    db.create_all()" >> app.py
            echo "" >> app.py
            echo "@app.route('/', methods=['GET'])" >> app.py
            echo "def index():" >> app.py
            echo "    return jsonify({'status': 'success', 'message': f\"{os.getenv('APP_NAME')} is running!\"})" >> app.py
            echo "" >> app.py
            echo "@app.route('/transaction', methods=['POST'])" >> app.py
            echo "def transaction():" >> app.py
            echo "    try:" >> app.py
            echo "        data = request.get_json(force=True)" >> app.py
            echo "        tx = Transaction(**data)" >> app.py
            echo "        db.session.add(tx)" >> app.py
            echo "        db.session.commit()" >> app.py
            echo "        return jsonify({'status': 'success', 'message': 'Saved', 'data': data})" >> app.py
            echo "    except Exception as e:" >> app.py
            echo "        return jsonify({'status': 'error', 'message': str(e)}), 400" >> app.py
            echo "" >> app.py
            echo "if __name__ == '__main__':" >> app.py
            echo "    app.run(host='0.0.0.0', port=5000)" >> app.py
          }

      - name: 🐳 Dockerfile 생성 (또는 다운로드)
        run: |
          echo "[+] Dockerfile 생성 또는 다운로드"
          curl -fsSL https://raw.githubusercontent.com/example-repo/finance-transactions/main/Dockerfile -o Dockerfile && echo "[✔] Dockerfile 다운로드 성공" || {
            echo "[!] 다운로드 실패 - 로컬에서 생성 중"
            echo "FROM python:3.11-slim" > Dockerfile
            echo "WORKDIR /app" >> Dockerfile
            echo "COPY . ." >> Dockerfile
            echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
            echo "EXPOSE 5000" >> Dockerfile
            echo "CMD [\"python\", \"app.py\"]" >> Dockerfile
          }

      - name: 🛠️ Docker 설치
        run: |
          echo "[+] Docker 설치 중"
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker || sudo service docker start
          docker --version
          echo "[✔] Docker 설치 완료"

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          echo "[+] PostgreSQL 컨테이너 실행 중"
          docker run -d \
            --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 \
            postgres:15
          echo "⏳ DB 초기화 대기..."
          sleep 20
          docker ps
          echo "[✔] PostgreSQL 컨테이너 실행 완료"

      - name: 🏗️ Docker 이미지 빌드
        run: |
          echo "[+] 이미지 빌드 시작"
          docker build -t finance-transactions:latest .
          docker image ls
          echo "[✔] 이미지 빌드 완료"

      - name: 🚀 Flask 앱 실행
        run: |
          echo "[+] Flask 앱 컨테이너 실행 중"
          docker run -d \
            --name finance-transactions \
            --link db \
            --env-file .env \
            -p 8080:5000 \
            finance-transactions:latest
          sleep 10
          echo "[✔] Flask 앱 실행 완료"

      - name: 🔍 상태 확인
        run: |
          echo "[+] 상태 확인 중..."
          curl -s http://localhost:8080 || echo "[!] 상태 확인 실패"
          echo "[✔] 상태 확인 완료"

      - name: 📂 backup.sh 생성 및 실행
        run: |
          echo "[+] backup.sh 생성"
          mkdir -p backup
          echo "#!/bin/bash" > backup.sh
          echo "mkdir -p backup" >> backup.sh
          echo "TIMESTAMP=\$(date +%Y%m%d%H%M%S)" >> backup.sh
          echo "docker exec db pg_dump -U postgres -d finance > backup/backup-\$TIMESTAMP.sql" >> backup.sh
          chmod +x backup.sh
          echo "[🔁] DB 백업 실행 중..."
          ./backup.sh
          echo "[✔] 백업 완료"
          ls -lh backup

      - name: 🧹 마무리 정리
        if: always()
        run: |
          echo "[+] 컨테이너 정리"
          docker stop finance-transactions || true
          docker stop db || true
          docker rm finance-transactions || true
          docker rm db || true
          echo "[✔] 정리 완료"
