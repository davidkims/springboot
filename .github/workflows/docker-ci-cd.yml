name: CI Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Ensure Dockerfile Exists (or Generate a Default One via echo)
        run: |
          if [ ! -f ./Dockerfile ]; then
            echo "⚠️ Dockerfile이 루트에 존재하지 않습니다. 기본 Dockerfile을 echo로 생성합니다."

            # 베이스 이미지 설정
            echo "FROM eclipse-temurin:17-jdk-alpine" > Dockerfile

            # 작업 디렉토리 설정
            echo "" >> Dockerfile
            echo "# 작업 디렉토리 생성" >> Dockerfile
            echo "WORKDIR /app" >> Dockerfile

            # 소스 복사
            echo "" >> Dockerfile
            echo "# 로컬 소스코드를 컨테이너로 복사" >> Dockerfile
            echo "COPY . ." >> Dockerfile

            # 빌드 명령어(예: Maven Wrapper 사용)
            echo "" >> Dockerfile
            echo "# Maven Wrapper로 패키지 빌드 (테스트는 생략)" >> Dockerfile
            echo "RUN chmod +x mvnw" >> Dockerfile
            echo "RUN ./mvnw package -DskipTests" >> Dockerfile

            # 실행 명령어
            echo "" >> Dockerfile
            echo "# JAR 실행" >> Dockerfile
            echo 'CMD ["java", "-jar", "target/*.jar"]' >> Dockerfile

            echo "✅ 기본 Dockerfile 생성 완료."
          else
            echo "✅ Dockerfile이 이미 존재합니다."
          fi

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/springboot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ 완료 메시지
        run: echo "✅ Docker 이미지를 빌드하여 ghcr.io/${{ github.repository_owner }}/springboot:latest 로 푸시했습니다."
