name: Build & Deploy finance-transactions with DB Backup + Provenance + Restart + Preserve

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성 및 확인
        run: |
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "faker" >> requirements.txt
          pip install -r requirements.txt

      - name: ⚙️ .env 파일 생성 및 확인
        run: |
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env

      - name: 🐍 거래 원장 및 입출금 발생 시뮬레이션
        run: |
          mkdir -p backup
          echo "import csv, random, datetime, time, os, shutil" > ledger.py
          echo "from faker import Faker" >> ledger.py
          echo "fake = Faker()" >> ledger.py

          echo "accounts = [[fake.name(), fake.bban(), round(random.uniform(1000,100000),2)] for _ in range(10)]" >> ledger.py
          echo "with open('backup/accounts.csv', 'a', newline='') as f:" >> ledger.py
          echo "    writer = csv.writer(f);" >> ledger.py
          echo "    if f.tell() == 0: writer.writerow(['name','account','balance'])" >> ledger.py
          echo "    writer.writerows(accounts)" >> ledger.py

          echo "with open('backup/transactions.csv', 'a', newline='') as f:" >> ledger.py
          echo "    writer = csv.writer(f);" >> ledger.py
          echo "    if f.tell() == 0: writer.writerow(['timestamp','amount','currency','status'])" >> ledger.py
          echo "    for _ in range(20):" >> ledger.py
          echo "        ts = datetime.datetime.now().isoformat(); amt = round(random.uniform(1.0, 5000.0), 2)" >> ledger.py
          echo "        currency = random.choice(['USD','KRW','JPY']); status = random.choice(['completed','pending','failed'])" >> ledger.py
          echo "        writer.writerow([ts, amt, currency, status]); print(f'💸 거래 발생: {amt} {currency} / 상태: {status}'); time.sleep(0.1)" >> ledger.py

          echo "for card_type in ['credit_card', 'check_card']:" >> ledger.py
          echo "    filename = f'backup/{card_type}_transactions.csv'" >> ledger.py
          echo "    with open(filename, 'a', newline='') as f:" >> ledger.py
          echo "        writer = csv.writer(f);" >> ledger.py
          echo "        if f.tell() == 0: writer.writerow(['timestamp','card_number','amount','type','status'])" >> ledger.py
          echo "        for _ in range(15):" >> ledger.py
          echo "            ts = datetime.datetime.now().isoformat(); card = fake.credit_card_number(); amt = round(random.uniform(5.0, 300.0),2)" >> ledger.py
          echo "            t = random.choice(['withdrawal', 'deposit']); s = random.choice(['completed', 'pending', 'failed'])" >> ledger.py
          echo "            writer.writerow([ts, card, amt, t, s])" >> ledger.py

          echo "# 거래 재처리" >> ledger.py
          echo "for file in ['backup/transactions.csv', 'backup/credit_card_transactions.csv', 'backup/check_card_transactions.csv']:" >> ledger.py
          echo "    with open(file, 'r') as infile, open(file+'.tmp', 'w', newline='') as outfile:" >> ledger.py
          echo "        reader = csv.reader(infile); writer = csv.writer(outfile); header = next(reader); writer.writerow(header)" >> ledger.py
          echo "        for row in reader:" >> ledger.py
          echo "            if row[-1] in ['pending','failed']:" >> ledger.py
          echo "                row[-1] = 'completed'; print(f'🔁 재처리: {row}')" >> ledger.py
          echo "            writer.writerow(row)" >> ledger.py
          echo "    shutil.move(file+'.tmp', file)" >> ledger.py

          python3 ledger.py

      - name: 📜 Provenance 생성 (CSV 해시)
        run: |
          mkdir -p provenance
          TS=$(date +%Y%m%d%H%M%S)
          OUT="provenance/csv-metadata-$TS.json"
          echo "[" > "$OUT"
          for f in backup/*.csv; do
            HASH=$(sha256sum "$f" | awk '{print $1}')
            echo "  {\"file\": \"$f\", \"sha256\": \"$HASH\" }," >> "$OUT"
          done
          sed -i '$ s/},/}/' "$OUT"
          echo "]" >> "$OUT"

      - name: ⬇️ 증명서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: csv-provenance
          path: provenance/*.json

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15
          sleep 10

      - name: 🗃️ CSV → PostgreSQL 적재
        run: |
          for f in transactions credit_card_transactions check_card_transactions; do
            tail -n +2 backup/${f}.csv > backup/tmp.csv
            docker exec db psql -U postgres -d finance -c "CREATE TABLE IF NOT EXISTS ${f} (timestamp TIMESTAMP, amount NUMERIC, currency_or_card VARCHAR(30), type_or_status VARCHAR(30), status VARCHAR(30));"
            docker cp backup/tmp.csv db:/tmp/tmp.csv
            docker exec db psql -U postgres -d finance -c "\
              COPY ${f}(timestamp, amount, currency_or_card, type_or_status, status) FROM '/tmp/tmp.csv' DELIMITER ',' CSV;"
          done

      - name: 💾 DB 백업
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          docker exec db pg_dump -U postgres -d finance > backup/backup-$TS.sql
          echo "$TS" > backup/latest.txt

      - name: 🧾 Backup Provenance 생성
        run: |
          mkdir -p provenance
          TS=$(cat backup/latest.txt)
          BACKUP_FILE="backup/backup-$TS.sql"
          HASH=$(sha256sum "$BACKUP_FILE" | awk '{print $1}')
          echo "{\"artifact\": \"$BACKUP_FILE\", \"sha256\": \"$HASH\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > provenance/provenance-$TS.json

      - name: ⬇️ DB Backup 증명서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: db-provenance
          path: provenance/provenance-*.json

      - name: ♻️ 컨테이너 재시작
        run: |
          docker restart db || docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15

      - name: 🧹 컨테이너 정리
        if: always()
        run: |
          docker stop db || true
          docker rm db || true
