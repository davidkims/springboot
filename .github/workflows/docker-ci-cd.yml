name: Generate and Backup Corporate Banking Data with Transaction Images

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📥 Install Required Python Packages
        run: |
          pip install pyyaml faker pillow

      - name: 📄 Generate YAML Configuration
        run: |
          mkdir -p config
          echo "# YAML configuration moved into separate file manually." > config/banking_schema.yaml
          echo "# Place the full YAML content into 'config/banking_schema.yaml'" >> config/banking_schema.yaml

      - name: 🧪 Validate YAML File via echo-generated script
        run: |
          mkdir -p scripts
          echo "import yaml" > scripts/validate_yaml.py
          echo "with open('config/banking_schema.yaml') as f:" >> scripts/validate_yaml.py
          echo "    data = yaml.safe_load(f)" >> scripts/validate_yaml.py
          echo "print('✅ YAML Validation Passed')" >> scripts/validate_yaml.py
          python scripts/validate_yaml.py

      - name: 📦 Simulate Data Extraction
        run: |
          mkdir -p output
          echo "INFO: 데이터 추출 시작"
          touch output/corporate_banking_backup.sql
          echo '-- SQL Dump Placeholder' > output/corporate_banking_backup.sql
          echo "INFO: 데이터 추출 완료: output/corporate_banking_backup.sql"

      - name: 🔐 Encrypt Backup File (비밀번호가 비어 있으면 -P 없이 실행)
        run: |
          if [ -n "${{ secrets.BACKUP_PASSWORD }}" ]; then
            echo "🔒 비밀번호 적용: ${BACKUP_PASSWORD}"
            zip -j -P "${{ secrets.BACKUP_PASSWORD }}" output/corporate_banking_backup.zip output/corporate_banking_backup.sql
          else
            echo "⚠️ BACKUP_PASSWORD가 비어 있습니다. -P 없이 압축합니다."
            zip -j output/corporate_banking_backup.zip output/corporate_banking_backup.sql
          fi
          echo "✅ 백업 파일 암호화/압축 완료: output/corporate_banking_backup.zip"

      - name: 🖼️ Generate Credit & Debit Card Transaction Images via echo-generated script
        run: |
          mkdir -p scripts

          # 이미지 생성용 Python 스크립트 생성
          echo "from PIL import Image, ImageDraw" > scripts/gen_images.py
          echo "import os" >> scripts/gen_images.py
          echo "cc_dir = 'output/credit_card_images'" >> scripts/gen_images.py
          echo "dc_dir = 'output/debit_card_images'" >> scripts/gen_images.py
          echo "os.makedirs(cc_dir, exist_ok=True)" >> scripts/gen_images.py
          echo "os.makedirs(dc_dir, exist_ok=True)" >> scripts/gen_images.py

          echo "for i in range(1, 11):" >> scripts/gen_images.py
          echo "    img = Image.new('RGB', (300, 180), color=(30, 144, 255))" >> scripts/gen_images.py
          echo "    d = ImageDraw.Draw(img)" >> scripts/gen_images.py
          echo "    text = f\"Credit Card TXN #{i}\"" >> scripts/gen_images.py
          echo "    d.text((10, 80), text, fill=(255, 255, 255))" >> scripts/gen_images.py
          echo "    img.save(f'{cc_dir}/credit_txn_{i}.png')" >> scripts/gen_images.py

          echo "for i in range(1, 11):" >> scripts/gen_images.py
          echo "    img = Image.new('RGB', (300, 180), color=(34, 139, 34))" >> scripts/gen_images.py
          echo "    d = ImageDraw.Draw(img)" >> scripts/gen_images.py
          echo "    text = f\"Debit Card TXN #{i}\"" >> scripts/gen_images.py
          echo "    d.text((10, 80), text, fill=(255, 255, 255))" >> scripts/gen_images.py
          echo "    img.save(f'{dc_dir}/debit_txn_{i}.png')" >> scripts/gen_images.py

          echo "print('✅ 신용카드 및 체크카드 거래 이미지 생성 완료')" >> scripts/gen_images.py

          python scripts/gen_images.py

      - name: ☁ Upload to OCI Object Storage (CLI)
        env:
          OCI_CLI_AUTH: "api_key"
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_API_KEY }}
          OCI_CLI_REGION: "ap-seoul-1"
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem

          oci os object put \
            --bucket-name backups \
            --file output/corporate_banking_backup.zip \
            --name corporate_banking_backup.zip \
            --force \
            --region $OCI_CLI_REGION

          for img in output/credit_card_images/*.png; do
            filename=$(basename $img)
            oci os object put \
              --bucket-name backups \
              --file "$img" \
              --name "credit_card_images/$filename" \
              --force \
              --region $OCI_CLI_REGION
          done

          for img in output/debit_card_images/*.png; do
            filename=$(basename $img)
            oci os object put \
              --bucket-name backups \
              --file "$img" \
              --name "debit_card_images/$filename" \
              --force \
              --region $OCI_CLI_REGION
          done

          echo "✅ 백업 파일(.zip) 및 이미지 업로드 완료"

      - name: ☑️ NetBackup CLI 실행 (예시)
        run: |
          echo "🔄 NetBackup CLI 가정 실행 중..."
          echo "bpbackup -f output/corporate_banking_backup.zip"
          echo "bpbackup -d output/credit_card_images"
          echo "bpbackup -d output/debit_card_images"
          echo "⚠️ 실제 NetBackup 설치 필요 및 CLI 경로 확인 필요"

      - name: ✅ 완료 메시지
        run: echo "✅ 기업 금융 데이터 백업, 암호화, 이미지 생성, 업로드까지 모두 완료되었습니다."
