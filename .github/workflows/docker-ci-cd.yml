# .github/workflows/docker-ci-cd.yml

name: Spring Boot Docker Image CI/CD to GHCR

# 워크플로우 트리거 조건 정의
on:
  push:
    branches: [ "main" ] # 'main' 브랜치에 푸시될 때 워크플로우 실행
  # pull_request:
  #   branches: [ "main" ] # 'main' 브랜치로 풀 리퀘스트가 열릴 때도 빌드하고 싶다면 주석 해제

# 워크플로우가 사용할 권한 설정 (GHCR에 이미지 푸시를 위해 'packages: write' 필수)
permissions:
  contents: read  # 저장소 코드 읽기 권한
  packages: write # GitHub Packages (GHCR)에 쓰기 권한

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 워크플로우를 실행할 GitHub 호스팅 러너 환경

    steps:
    - name: Checkout repository # GitHub 저장소 코드를 러너로 가져옵니다.
      uses: actions/checkout@v4

    - name: Set up Docker Buildx # Docker 이미지 빌드를 위한 Buildx 환경을 설정합니다.
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry # GHCR에 로그인하여 이미지 푸시 권한을 얻습니다.
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}          # 현재 워크플로우를 실행하는 GitHub 사용자 ID
        password: ${{ secrets.GITHUB_TOKEN }} # GitHub가 자동으로 제공하는 보안 토큰 (패키지 쓰기 권한 있음)

    - name: Extract metadata (tags, labels) for Docker # Docker 이미지의 태그와 라벨을 동적으로 생성합니다.
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }} # GHCR 이미지 경로 (예: ghcr.io/사용자명/저장소명)
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }} # 'main' 브랜시 푸시 시 'latest' 태그 추가
          type=sha,prefix=,suffix=,format=short # 커밋 SHA를 짧은 형태로 태그 추가 (예: 1a2b3c4)
        labels: | # Spring Boot 관련 OCI 라벨 추가 (선택 사항)
          org.springframework.boot.version=${{ github.event.repository.name }} # 예시: 프로젝트 이름
          org.springframework.boot.artifact-id=${{ github.event.repository.name }}
          org.springframework.boot.project-name=${{ github.event.repository.name }}

    - name: Build and push Docker image # Docker 이미지를 빌드하고 GHCR로 푸시합니다.
      uses: docker/build-push-action@v5
      with:
        context: .              # Dockerfile이 있는 경로 (GitHub 저장소의 루트)
        file: ./Dockerfile      # 사용할 Dockerfile의 경로
        push: true              # 이미지를 GHCR로 푸시하도록 설정
        tags: ${{ steps.meta.outputs.tags }}   # 'metadata-action'에서 생성된 태그 사용
        labels: ${{ steps.meta.outputs.labels }} # 'metadata-action'에서 생성된 라벨 사용
        cache-from: type=gha    # GitHub Actions 캐싱을 사용하여 빌드 속도 향상
        cache-to: type=gha,mode=max # GitHub Actions 캐싱에 빌드 결과 저장
