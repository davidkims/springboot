name: Build & Deploy finance-transactions with DB Backup + Provenance + Restart + Preserve

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📅 Checkout 코드
        uses: actions/checkout@v4

      - name: 📦 requirements.txt 생성 및 확인
        run: |
          echo "flask" > requirements.txt
          echo "flask_sqlalchemy" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
          echo "psycopg2-binary" >> requirements.txt
          echo "SQLAlchemy" >> requirements.txt
          echo "faker" >> requirements.txt
          pip install -r requirements.txt

      - name: ⚙️ .env 파일 생성 및 확인
        run: |
          echo "FLASK_ENV=production" > .env
          echo "APP_NAME=FinanceTransactions" >> .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=finance" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres123" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env

      - name: 🐍 거래 원장 및 입출금 발생 시뮬레이션
        run: |
          mkdir -p backup
          echo "import csv, random, datetime, time" > ledger.py
          echo "from faker import Faker" >> ledger.py
          echo "fake = Faker()" >> ledger.py
          echo "countries = ['KR', 'US', 'JP', 'DE', 'FR']" >> ledger.py
          echo "with open('backup/global_ledger.csv', 'a', newline='') as ledger, open('backup/error_log.csv', 'a', newline='') as errlog:" >> ledger.py
          echo "    ledger_writer = csv.writer(ledger); err_writer = csv.writer(errlog)" >> ledger.py
          echo "    ledger_writer.writerow(['timestamp','country','amount','currency','status'])" >> ledger.py
          echo "    err_writer.writerow(['timestamp','country','amount','currency','status'])" >> ledger.py
          echo "    for country in countries:" >> ledger.py
          echo "        for _ in range(10):" >> ledger.py
          echo "            ts = datetime.datetime.now().isoformat(); amt = round(random.uniform(10.0, 1000.0), 2)" >> ledger.py
          echo "            currency = random.choice(['USD','KRW','EUR','JPY','GBP']); status = random.choice(['completed','pending','failed'])" >> ledger.py
          echo "            row = [ts, country, amt, currency, status]" >> ledger.py
          echo "            ledger_writer.writerow(row)" >> ledger.py
          echo "            if status != 'completed': err_writer.writerow(row)" >> ledger.py
          echo "            print(f'💱 거래 기록: {row}')" >> ledger.py
          echo "            time.sleep(0.05)" >> ledger.py

          echo "# 거래 상태별 통계 요약" >> ledger.py
          echo "from collections import Counter" >> ledger.py
          echo "with open('backup/global_ledger.csv', 'r') as f:" >> ledger.py
          echo "    reader = csv.reader(f); next(reader)" >> ledger.py
          echo "    statuses = [row[4] for row in reader]" >> ledger.py
          echo "    count = Counter(statuses)" >> ledger.py
          echo "    with open('backup/summary.csv', 'w', newline='') as summary:" >> ledger.py
          echo "        writer = csv.writer(summary); writer.writerow(['status', 'count'])" >> ledger.py
          echo "        for k, v in count.items(): writer.writerow([k, v])" >> ledger.py

          python3 ledger.py

      - name: 📜 Provenance 생성 (CSV 해시)
        run: |
          mkdir -p provenance
          TS=$(date +%Y%m%d%H%M%S)
          OUT="provenance/csv-metadata-$TS.json"
          echo "[" > "$OUT"
          for f in backup/*.csv; do
            HASH=$(sha256sum "$f" | awk '{print $1}')
            echo "  {\"file\": \"$f\", \"sha256\": \"$HASH\" }," >> "$OUT"
          done
          sed -i '$ s/},/}/' "$OUT"
          echo "]" >> "$OUT"

      - name: ⬇️ 증명서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: csv-provenance
          path: provenance/*.json

      - name: 🐘 PostgreSQL 컨테이너 실행
        run: |
          docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15
          sleep 10

      - name: 🗃️ CSV → PostgreSQL 적재
        run: |
          docker exec db psql -U postgres -d finance -c "CREATE TABLE IF NOT EXISTS global_ledger (timestamp TIMESTAMP, country VARCHAR(10), amount NUMERIC, currency VARCHAR(10), status VARCHAR(20));"
          tail -n +2 backup/global_ledger.csv > backup/tmp_global.csv
          docker cp backup/tmp_global.csv db:/tmp/tmp_global.csv
          docker exec db psql -U postgres -d finance -c "COPY global_ledger(timestamp, country, amount, currency, status) FROM '/tmp/tmp_global.csv' DELIMITER ',' CSV;"

      - name: 💾 DB 백업
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          docker exec db pg_dump -U postgres -d finance > backup/backup-$TS.sql
          echo "$TS" > backup/latest.txt

      - name: 🧾 Backup Provenance 생성
        run: |
          mkdir -p provenance
          TS=$(cat backup/latest.txt)
          BACKUP_FILE="backup/backup-$TS.sql"
          HASH=$(sha256sum "$BACKUP_FILE" | awk '{print $1}')
          echo "{\"artifact\": \"$BACKUP_FILE\", \"sha256\": \"$HASH\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > provenance/provenance-$TS.json

      - name: ⬇️ DB Backup 증명서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: db-provenance
          path: provenance/provenance-*.json

      - name: ♻️ 컨테이너 재시작
        run: |
          docker restart db || docker run -d --name db \
            -e POSTGRES_DB=finance \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -p 5432:5432 postgres:15

      - name: 🧹 컨테이너 정리
        if: always()
        run: |
          docker stop db || true
          docker rm db || true
